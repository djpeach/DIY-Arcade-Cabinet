{
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Renderer.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Renderer.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Renderer.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Renderer.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Renderer.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _config = _interopRequireWildcard(require(\"./config\"));\n\nvar _Chess = _interopRequireDefault(require(\"./Chess\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Renderer = function Renderer() {\n  _classCallCheck(this, Renderer);\n\n  this.canvas = document.getElementById('canvas');\n  this.ctx = this.canvas.getContext('2d');\n  this.sideLength = document.getElementById('canvasBox').clientHeight;\n  this.canvas.height = this.sideLength;\n  this.canvas.width = this.sideLength;\n  this.canvas.imageSmoothingEnabled = false;\n  (0, _config.init)({\n    tileHeight: this.canvas.height / _config[\"default\"].rows,\n    tileWidth: this.canvas.width / _config[\"default\"].cols\n  });\n  new _Chess[\"default\"](this.ctx);\n};\n\nnew Renderer();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlbmRlcmVyLmpzIl0sIm5hbWVzIjpbIlJlbmRlcmVyIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImN0eCIsImdldENvbnRleHQiLCJzaWRlTGVuZ3RoIiwiY2xpZW50SGVpZ2h0IiwiaGVpZ2h0Iiwid2lkdGgiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJ0aWxlSGVpZ2h0IiwiY29uZmlnIiwicm93cyIsInRpbGVXaWR0aCIsImNvbHMiLCJDaGVzcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7Ozs7Ozs7SUFFTUEsUSxHQUNKLG9CQUFjO0FBQUE7O0FBQ1osT0FBS0MsTUFBTCxHQUFjQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBZDtBQUNBLE9BQUtDLEdBQUwsR0FBVyxLQUFLSCxNQUFMLENBQVlJLFVBQVosQ0FBdUIsSUFBdkIsQ0FBWDtBQUNBLE9BQUtDLFVBQUwsR0FBa0JKLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixXQUF4QixFQUFxQ0ksWUFBdkQ7QUFDQSxPQUFLTixNQUFMLENBQVlPLE1BQVosR0FBcUIsS0FBS0YsVUFBMUI7QUFDQSxPQUFLTCxNQUFMLENBQVlRLEtBQVosR0FBb0IsS0FBS0gsVUFBekI7QUFDQSxPQUFLTCxNQUFMLENBQVlTLHFCQUFaLEdBQW9DLEtBQXBDO0FBQ0Esb0JBQUs7QUFDSEMsSUFBQUEsVUFBVSxFQUFFLEtBQUtWLE1BQUwsQ0FBWU8sTUFBWixHQUFxQkksbUJBQU9DLElBRHJDO0FBRUhDLElBQUFBLFNBQVMsRUFBRSxLQUFLYixNQUFMLENBQVlRLEtBQVosR0FBb0JHLG1CQUFPRztBQUZuQyxHQUFMO0FBSUEsTUFBSUMsaUJBQUosQ0FBVSxLQUFLWixHQUFmO0FBQ0QsQzs7QUFHSCxJQUFJSixRQUFKIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYW5pZWxwZWFjaC9EZXYvZGV2LWFyY2FkZS1nYW1lcy9BcmNhZGUgQ2hlc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnLCB7aW5pdH0gZnJvbSAnLi9jb25maWcnXG5pbXBvcnQgQ2hlc3MgZnJvbSAnLi9DaGVzcydcblxuY2xhc3MgUmVuZGVyZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKVxuICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgIHRoaXMuc2lkZUxlbmd0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXNCb3gnKS5jbGllbnRIZWlnaHRcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLnNpZGVMZW5ndGhcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuc2lkZUxlbmd0aFxuICAgIHRoaXMuY2FudmFzLmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlXG4gICAgaW5pdCh7XG4gICAgICB0aWxlSGVpZ2h0OiB0aGlzLmNhbnZhcy5oZWlnaHQgLyBjb25maWcucm93cyxcbiAgICAgIHRpbGVXaWR0aDogdGhpcy5jYW52YXMud2lkdGggLyBjb25maWcuY29sc1xuICAgIH0pXG4gICAgbmV3IENoZXNzKHRoaXMuY3R4KVxuICB9XG59XG5cbm5ldyBSZW5kZXJlcigpIl19",
    "map": {
      "version": 3,
      "sources": [
        "Renderer.js"
      ],
      "names": [
        "Renderer",
        "canvas",
        "document",
        "getElementById",
        "ctx",
        "getContext",
        "sideLength",
        "clientHeight",
        "height",
        "width",
        "imageSmoothingEnabled",
        "tileHeight",
        "config",
        "rows",
        "tileWidth",
        "cols",
        "Chess"
      ],
      "mappings": ";;AAAA;;AACA;;;;;;;;IAEMA,Q,GACJ,oBAAc;AAAA;;AACZ,OAAKC,MAAL,GAAcC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAd;AACA,OAAKC,GAAL,GAAW,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAX;AACA,OAAKC,UAAL,GAAkBJ,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCI,YAAvD;AACA,OAAKN,MAAL,CAAYO,MAAZ,GAAqB,KAAKF,UAA1B;AACA,OAAKL,MAAL,CAAYQ,KAAZ,GAAoB,KAAKH,UAAzB;AACA,OAAKL,MAAL,CAAYS,qBAAZ,GAAoC,KAApC;AACA,oBAAK;AACHC,IAAAA,UAAU,EAAE,KAAKV,MAAL,CAAYO,MAAZ,GAAqBI,mBAAOC,IADrC;AAEHC,IAAAA,SAAS,EAAE,KAAKb,MAAL,CAAYQ,KAAZ,GAAoBG,mBAAOG;AAFnC,GAAL;AAIA,MAAIC,iBAAJ,CAAU,KAAKZ,GAAf;AACD,C;;AAGH,IAAIJ,QAAJ",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import config, {init} from './config'\nimport Chess from './Chess'\n\nclass Renderer {\n  constructor() {\n    this.canvas = document.getElementById('canvas')\n    this.ctx = this.canvas.getContext('2d')\n    this.sideLength = document.getElementById('canvasBox').clientHeight\n    this.canvas.height = this.sideLength\n    this.canvas.width = this.sideLength\n    this.canvas.imageSmoothingEnabled = false\n    init({\n      tileHeight: this.canvas.height / config.rows,\n      tileWidth: this.canvas.width / config.cols\n    })\n    new Chess(this.ctx)\n  }\n}\n\nnew Renderer()"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604593
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/config.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/config.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/config.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "config.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.init = void 0;\nvar config = {\n  fpsTag: document.getElementById('fps'),\n  turnTag: document.getElementById('turn'),\n  infoTag: document.getElementById('info'),\n  winnerTag: document.getElementById('winner'),\n  testing: false,\n  blank_board: [2, 3, 4, 5, 6, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, -1, 6, -1, -1, -1, -1, -2, -3, -4, -5, -6, -4, -3, -2],\n  rows: 8,\n  cols: 8,\n  pieces_codes: {\n    NO_PIECE: 0,\n    PAWN: 1,\n    ROOK: 2,\n    KNIGHT: 3,\n    BISHOP: 4,\n    KING: 5,\n    QUEEN: 6\n  },\n  playerOneKeyMap: {\n    up: 87,\n    down: 83,\n    left: 65,\n    right: 68,\n    select: 70\n  },\n  playerTwoKeyMap: {\n    up: 73,\n    down: 75,\n    left: 74,\n    right: 76,\n    select: 72\n  },\n  messageTypes: {\n    keyDown: 'KEY_DOWN',\n    keyUp: 'KEY_UP',\n    gameOver: 'GAME_OVER'\n  }\n};\n\nvar init = function init(ops) {\n  config.tileHeight = ops.tileHeight;\n  config.tileWidth = ops.tileWidth;\n};\n\nexports.init = init;\nvar _default = config;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJmcHNUYWciLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidHVyblRhZyIsImluZm9UYWciLCJ3aW5uZXJUYWciLCJ0ZXN0aW5nIiwiYmxhbmtfYm9hcmQiLCJyb3dzIiwiY29scyIsInBpZWNlc19jb2RlcyIsIk5PX1BJRUNFIiwiUEFXTiIsIlJPT0siLCJLTklHSFQiLCJCSVNIT1AiLCJLSU5HIiwiUVVFRU4iLCJwbGF5ZXJPbmVLZXlNYXAiLCJ1cCIsImRvd24iLCJsZWZ0IiwicmlnaHQiLCJzZWxlY3QiLCJwbGF5ZXJUd29LZXlNYXAiLCJtZXNzYWdlVHlwZXMiLCJrZXlEb3duIiwia2V5VXAiLCJnYW1lT3ZlciIsImluaXQiLCJvcHMiLCJ0aWxlSGVpZ2h0IiwidGlsZVdpZHRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUk7QUFDWkMsRUFBQUEsTUFBTSxFQUFFQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsS0FBeEIsQ0FESTtBQUVaQyxFQUFBQSxPQUFPLEVBQUVGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixNQUF4QixDQUZHO0FBR1pFLEVBQUFBLE9BQU8sRUFBRUgsUUFBUSxDQUFDQyxjQUFULENBQXdCLE1BQXhCLENBSEc7QUFJWkcsRUFBQUEsU0FBUyxFQUFFSixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FKQztBQUtaSSxFQUFBQSxPQUFPLEVBQUUsS0FMRztBQU1aQyxFQUFBQSxXQUFXLEVBQUUsQ0FDWCxDQURXLEVBQ1IsQ0FEUSxFQUNMLENBREssRUFDRixDQURFLEVBQ0MsQ0FERCxFQUNJLENBREosRUFDTyxDQURQLEVBQ1UsQ0FEVixFQUVYLENBRlcsRUFFUixDQUZRLEVBRUwsQ0FGSyxFQUVGLENBRkUsRUFFQyxDQUZELEVBRUksQ0FGSixFQUVPLENBRlAsRUFFVSxDQUZWLEVBR1gsQ0FIVyxFQUdSLENBSFEsRUFHTCxDQUhLLEVBR0YsQ0FIRSxFQUdDLENBSEQsRUFHSSxDQUhKLEVBR08sQ0FIUCxFQUdVLENBSFYsRUFJWCxDQUpXLEVBSVIsQ0FKUSxFQUlMLENBSkssRUFJRixDQUpFLEVBSUMsQ0FKRCxFQUlJLENBSkosRUFJTyxDQUpQLEVBSVUsQ0FKVixFQUtYLENBTFcsRUFLUixDQUxRLEVBS0wsQ0FMSyxFQUtGLENBTEUsRUFLQyxDQUxELEVBS0ksQ0FMSixFQUtPLENBTFAsRUFLVSxDQUxWLEVBTVgsQ0FOVyxFQU1SLENBTlEsRUFNTCxDQU5LLEVBTUYsQ0FORSxFQU1DLENBTkQsRUFNSSxDQU5KLEVBTU8sQ0FOUCxFQU1VLENBTlYsRUFPWCxDQUFDLENBUFUsRUFPUCxDQUFDLENBUE0sRUFPSCxDQUFDLENBUEUsRUFPRSxDQVBGLEVBT0ssQ0FBQyxDQVBOLEVBT1MsQ0FBQyxDQVBWLEVBT2EsQ0FBQyxDQVBkLEVBT2lCLENBQUMsQ0FQbEIsRUFRWCxDQUFDLENBUlUsRUFRUCxDQUFDLENBUk0sRUFRSCxDQUFDLENBUkUsRUFRQyxDQUFDLENBUkYsRUFRSyxDQUFDLENBUk4sRUFRUyxDQUFDLENBUlYsRUFRYSxDQUFDLENBUmQsRUFRaUIsQ0FBQyxDQVJsQixDQU5EO0FBZ0JaQyxFQUFBQSxJQUFJLEVBQUUsQ0FoQk07QUFpQlpDLEVBQUFBLElBQUksRUFBRSxDQWpCTTtBQWtCWkMsRUFBQUEsWUFBWSxFQUFFO0FBQ1pDLElBQUFBLFFBQVEsRUFBRSxDQURFO0FBRVpDLElBQUFBLElBQUksRUFBRSxDQUZNO0FBR1pDLElBQUFBLElBQUksRUFBRSxDQUhNO0FBSVpDLElBQUFBLE1BQU0sRUFBRSxDQUpJO0FBS1pDLElBQUFBLE1BQU0sRUFBRSxDQUxJO0FBTVpDLElBQUFBLElBQUksRUFBRSxDQU5NO0FBT1pDLElBQUFBLEtBQUssRUFBRTtBQVBLLEdBbEJGO0FBMkJaQyxFQUFBQSxlQUFlLEVBQUU7QUFDZkMsSUFBQUEsRUFBRSxFQUFFLEVBRFc7QUFFZkMsSUFBQUEsSUFBSSxFQUFFLEVBRlM7QUFHZkMsSUFBQUEsSUFBSSxFQUFFLEVBSFM7QUFJZkMsSUFBQUEsS0FBSyxFQUFFLEVBSlE7QUFLZkMsSUFBQUEsTUFBTSxFQUFFO0FBTE8sR0EzQkw7QUFrQ1pDLEVBQUFBLGVBQWUsRUFBRTtBQUNmTCxJQUFBQSxFQUFFLEVBQUUsRUFEVztBQUVmQyxJQUFBQSxJQUFJLEVBQUUsRUFGUztBQUdmQyxJQUFBQSxJQUFJLEVBQUUsRUFIUztBQUlmQyxJQUFBQSxLQUFLLEVBQUUsRUFKUTtBQUtmQyxJQUFBQSxNQUFNLEVBQUU7QUFMTyxHQWxDTDtBQXlDWkUsRUFBQUEsWUFBWSxFQUFFO0FBQ1pDLElBQUFBLE9BQU8sRUFBRSxVQURHO0FBRVpDLElBQUFBLEtBQUssRUFBRSxRQUZLO0FBR1pDLElBQUFBLFFBQVEsRUFBRTtBQUhFO0FBekNGLENBQWQ7O0FBZ0RPLElBQU1DLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUNDLEdBQUQsRUFBUztBQUMzQi9CLEVBQUFBLE1BQU0sQ0FBQ2dDLFVBQVAsR0FBb0JELEdBQUcsQ0FBQ0MsVUFBeEI7QUFDQWhDLEVBQUFBLE1BQU0sQ0FBQ2lDLFNBQVAsR0FBbUJGLEdBQUcsQ0FBQ0UsU0FBdkI7QUFDRCxDQUhNOzs7ZUFLUWpDLE0iLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbmllbHBlYWNoL0Rldi9kZXYtYXJjYWRlLWdhbWVzL0FyY2FkZSBDaGVzcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBjb25maWcgPSAge1xuICBmcHNUYWc6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmcHMnKSxcbiAgdHVyblRhZzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R1cm4nKSxcbiAgaW5mb1RhZzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8nKSxcbiAgd2lubmVyVGFnOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2lubmVyJyksXG4gIHRlc3Rpbmc6IGZhbHNlLFxuICBibGFua19ib2FyZDogW1xuICAgIDIsIDMsIDQsIDUsIDYsIDQsIDMsIDIsXG4gICAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSxcbiAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAgIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gICAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgICAwLCAwLCAxLCAwLCAwLCAwLCAwLCAwLFxuICAgIC0xLCAtMSwgLTEsICA2LCAtMSwgLTEsIC0xLCAtMSxcbiAgICAtMiwgLTMsIC00LCAtNSwgLTYsIC00LCAtMywgLTJcbiAgXSxcbiAgcm93czogOCxcbiAgY29sczogOCxcbiAgcGllY2VzX2NvZGVzOiB7XG4gICAgTk9fUElFQ0U6IDAsXG4gICAgUEFXTjogMSxcbiAgICBST09LOiAyLFxuICAgIEtOSUdIVDogMyxcbiAgICBCSVNIT1A6IDQsXG4gICAgS0lORzogNSxcbiAgICBRVUVFTjogNlxuICB9LFxuICBwbGF5ZXJPbmVLZXlNYXA6IHtcbiAgICB1cDogODcsXG4gICAgZG93bjogODMsXG4gICAgbGVmdDogNjUsXG4gICAgcmlnaHQ6IDY4LFxuICAgIHNlbGVjdDogNzBcbiAgfSxcbiAgcGxheWVyVHdvS2V5TWFwOiB7XG4gICAgdXA6IDczLFxuICAgIGRvd246IDc1LFxuICAgIGxlZnQ6IDc0LFxuICAgIHJpZ2h0OiA3NixcbiAgICBzZWxlY3Q6IDcyXG4gIH0sXG4gIG1lc3NhZ2VUeXBlczoge1xuICAgIGtleURvd246ICdLRVlfRE9XTicsXG4gICAga2V5VXA6ICdLRVlfVVAnLFxuICAgIGdhbWVPdmVyOiAnR0FNRV9PVkVSJ1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBpbml0ID0gKG9wcykgPT4ge1xuICBjb25maWcudGlsZUhlaWdodCA9IG9wcy50aWxlSGVpZ2h0XG4gIGNvbmZpZy50aWxlV2lkdGggPSBvcHMudGlsZVdpZHRoXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "config.js"
      ],
      "names": [
        "config",
        "fpsTag",
        "document",
        "getElementById",
        "turnTag",
        "infoTag",
        "winnerTag",
        "testing",
        "blank_board",
        "rows",
        "cols",
        "pieces_codes",
        "NO_PIECE",
        "PAWN",
        "ROOK",
        "KNIGHT",
        "BISHOP",
        "KING",
        "QUEEN",
        "playerOneKeyMap",
        "up",
        "down",
        "left",
        "right",
        "select",
        "playerTwoKeyMap",
        "messageTypes",
        "keyDown",
        "keyUp",
        "gameOver",
        "init",
        "ops",
        "tileHeight",
        "tileWidth"
      ],
      "mappings": ";;;;;;AAAA,IAAIA,MAAM,GAAI;AACZC,EAAAA,MAAM,EAAEC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CADI;AAEZC,EAAAA,OAAO,EAAEF,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFG;AAGZE,EAAAA,OAAO,EAAEH,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHG;AAIZG,EAAAA,SAAS,EAAEJ,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAJC;AAKZI,EAAAA,OAAO,EAAE,KALG;AAMZC,EAAAA,WAAW,EAAE,CACX,CADW,EACR,CADQ,EACL,CADK,EACF,CADE,EACC,CADD,EACI,CADJ,EACO,CADP,EACU,CADV,EAEX,CAFW,EAER,CAFQ,EAEL,CAFK,EAEF,CAFE,EAEC,CAFD,EAEI,CAFJ,EAEO,CAFP,EAEU,CAFV,EAGX,CAHW,EAGR,CAHQ,EAGL,CAHK,EAGF,CAHE,EAGC,CAHD,EAGI,CAHJ,EAGO,CAHP,EAGU,CAHV,EAIX,CAJW,EAIR,CAJQ,EAIL,CAJK,EAIF,CAJE,EAIC,CAJD,EAII,CAJJ,EAIO,CAJP,EAIU,CAJV,EAKX,CALW,EAKR,CALQ,EAKL,CALK,EAKF,CALE,EAKC,CALD,EAKI,CALJ,EAKO,CALP,EAKU,CALV,EAMX,CANW,EAMR,CANQ,EAML,CANK,EAMF,CANE,EAMC,CAND,EAMI,CANJ,EAMO,CANP,EAMU,CANV,EAOX,CAAC,CAPU,EAOP,CAAC,CAPM,EAOH,CAAC,CAPE,EAOE,CAPF,EAOK,CAAC,CAPN,EAOS,CAAC,CAPV,EAOa,CAAC,CAPd,EAOiB,CAAC,CAPlB,EAQX,CAAC,CARU,EAQP,CAAC,CARM,EAQH,CAAC,CARE,EAQC,CAAC,CARF,EAQK,CAAC,CARN,EAQS,CAAC,CARV,EAQa,CAAC,CARd,EAQiB,CAAC,CARlB,CAND;AAgBZC,EAAAA,IAAI,EAAE,CAhBM;AAiBZC,EAAAA,IAAI,EAAE,CAjBM;AAkBZC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,CADE;AAEZC,IAAAA,IAAI,EAAE,CAFM;AAGZC,IAAAA,IAAI,EAAE,CAHM;AAIZC,IAAAA,MAAM,EAAE,CAJI;AAKZC,IAAAA,MAAM,EAAE,CALI;AAMZC,IAAAA,IAAI,EAAE,CANM;AAOZC,IAAAA,KAAK,EAAE;AAPK,GAlBF;AA2BZC,EAAAA,eAAe,EAAE;AACfC,IAAAA,EAAE,EAAE,EADW;AAEfC,IAAAA,IAAI,EAAE,EAFS;AAGfC,IAAAA,IAAI,EAAE,EAHS;AAIfC,IAAAA,KAAK,EAAE,EAJQ;AAKfC,IAAAA,MAAM,EAAE;AALO,GA3BL;AAkCZC,EAAAA,eAAe,EAAE;AACfL,IAAAA,EAAE,EAAE,EADW;AAEfC,IAAAA,IAAI,EAAE,EAFS;AAGfC,IAAAA,IAAI,EAAE,EAHS;AAIfC,IAAAA,KAAK,EAAE,EAJQ;AAKfC,IAAAA,MAAM,EAAE;AALO,GAlCL;AAyCZE,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,UADG;AAEZC,IAAAA,KAAK,EAAE,QAFK;AAGZC,IAAAA,QAAQ,EAAE;AAHE;AAzCF,CAAd;;AAgDO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAS;AAC3B/B,EAAAA,MAAM,CAACgC,UAAP,GAAoBD,GAAG,CAACC,UAAxB;AACAhC,EAAAA,MAAM,CAACiC,SAAP,GAAmBF,GAAG,CAACE,SAAvB;AACD,CAHM;;;eAKQjC,M",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "let config =  {\n  fpsTag: document.getElementById('fps'),\n  turnTag: document.getElementById('turn'),\n  infoTag: document.getElementById('info'),\n  winnerTag: document.getElementById('winner'),\n  testing: false,\n  blank_board: [\n    2, 3, 4, 5, 6, 4, 3, 2,\n    1, 1, 1, 1, 1, 1, 1, 1,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 1, 0, 0, 0, 0, 0,\n    -1, -1, -1,  6, -1, -1, -1, -1,\n    -2, -3, -4, -5, -6, -4, -3, -2\n  ],\n  rows: 8,\n  cols: 8,\n  pieces_codes: {\n    NO_PIECE: 0,\n    PAWN: 1,\n    ROOK: 2,\n    KNIGHT: 3,\n    BISHOP: 4,\n    KING: 5,\n    QUEEN: 6\n  },\n  playerOneKeyMap: {\n    up: 87,\n    down: 83,\n    left: 65,\n    right: 68,\n    select: 70\n  },\n  playerTwoKeyMap: {\n    up: 73,\n    down: 75,\n    left: 74,\n    right: 76,\n    select: 72\n  },\n  messageTypes: {\n    keyDown: 'KEY_DOWN',\n    keyUp: 'KEY_UP',\n    gameOver: 'GAME_OVER'\n  }\n}\n\nexport const init = (ops) => {\n  config.tileHeight = ops.tileHeight\n  config.tileWidth = ops.tileWidth\n}\n\nexport default config"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604594
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Chess.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Chess.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Chess.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Chess.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Chess.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Bishop = _interopRequireDefault(require(\"./Bishop\"));\n\nvar _King = _interopRequireDefault(require(\"./King\"));\n\nvar _Knight = _interopRequireDefault(require(\"./Knight\"));\n\nvar _Pawn = _interopRequireDefault(require(\"./Pawn\"));\n\nvar _Queen = _interopRequireDefault(require(\"./Queen\"));\n\nvar _Rook = _interopRequireDefault(require(\"./Rook\"));\n\nvar _Engine = _interopRequireDefault(require(\"./Engine\"));\n\nvar _Player = _interopRequireDefault(require(\"./Player\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Chess =\n/*#__PURE__*/\nfunction () {\n  function Chess(ctx) {\n    var _this = this;\n\n    _classCallCheck(this, Chess);\n\n    _defineProperty(this, \"initializeBoard\", function () {\n      var w = _config[\"default\"].tileWidth;\n      var h = _config[\"default\"].tileHeight;\n\n      for (var row = 0; row < _this.rows; row++) {\n        for (var col = 0; col < _this.cols; col++) {\n          var piece = void 0;\n          var tileIndex = (0, _utils.coordsToIndex)(row, col);\n          var coords = {\n            x: col * w,\n            y: row * h,\n            row: row,\n            col: col\n          };\n\n          switch (Math.abs(_this.blank_board[tileIndex])) {\n            case _config[\"default\"].pieces_codes.PAWN:\n              piece = new _Pawn[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.ROOK:\n              piece = new _Rook[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.KNIGHT:\n              piece = new _Knight[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.BISHOP:\n              piece = new _Bishop[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.KING:\n              piece = new _King[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.QUEEN:\n              piece = new _Queen[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            default: // pass\n\n          }\n\n          if (piece) {\n            _this.board[tileIndex] = piece;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"update\", function () {\n      if (_this.gameOver) {\n        _config[\"default\"].winnerTag.innerText = \"Game Over! Player \".concat(_this.otherPlayer.playerNumber, \" wins!\");\n      }\n\n      _this.currentPlayer.update(_this.switchPlayer, _this.board, _this.otherPlayer);\n    });\n\n    _defineProperty(this, \"switchPlayer\", function () {\n      _this.messager.unsubscribe(_this.currentPlayer);\n\n      var tempPlayer = _this.currentPlayer;\n      _this.currentPlayer = _this.otherPlayer;\n      _this.otherPlayer = tempPlayer;\n\n      _this.messager.subscribe(_this.currentPlayer);\n\n      if (_this.currentPlayer.board) {\n        _this.currentPlayer.checkIfKingInCheck();\n      }\n    });\n\n    _defineProperty(this, \"draw\", function () {\n      _this.drawBoard();\n\n      if (!_this.gameOver) {\n        _this.currentPlayer.draw(_this.engine.ctx);\n      }\n\n      _this.drawPieces();\n    });\n\n    this.blank_board = _config[\"default\"].blank_board;\n    this.board = [];\n    this.rows = _config[\"default\"].rows;\n    this.cols = _config[\"default\"].cols;\n    this.engine = new _Engine[\"default\"](this.initializeBoard, ctx);\n    this.engine.update = this.update;\n    this.engine.draw = this.draw;\n    this.messager = this.engine.messager;\n    this.player1 = new _Player[\"default\"](_config[\"default\"].playerOneKeyMap, this.messager);\n    this.player2 = new _Player[\"default\"](_config[\"default\"].playerTwoKeyMap, this.messager);\n    this.currentPlayer = this.player1;\n    this.otherPlayer = this.player2;\n    this.messager.subscribe(this.currentPlayer);\n  }\n\n  _createClass(Chess, [{\n    key: \"drawBoard\",\n    value: function drawBoard() {\n      var color = '';\n      var w = _config[\"default\"].tileWidth;\n      var h = _config[\"default\"].tileHeight;\n\n      for (var row = 0; row < this.rows; row++) {\n        color = Math.floor(row % 2) === 0 ? 'grey' : 'black';\n\n        for (var col = 0; col < this.cols; col++) {\n          this.engine.ctx.fillStyle = color;\n          this.engine.ctx.fillRect(col * w, row * h, w, h);\n          color = color === 'grey' ? 'black' : 'grey';\n\n          if (_config[\"default\"].testing) {\n            var index = (0, _utils.coordsToIndex)(row, col);\n            this.engine.ctx.fillStyle = 'yellow';\n            this.engine.ctx.font = \"30px Arial\";\n            this.engine.ctx.fillText(index, col * w + 10, row * h + 30);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawPieces\",\n    value: function drawPieces() {\n      for (var pieceIndex = 0; pieceIndex < this.board.length; pieceIndex++) {\n        var piece = this.board[pieceIndex];\n\n        if (piece) {\n          this.engine.ctx.drawImage(piece.img, piece.x, piece.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n        }\n      }\n    }\n  }]);\n\n  return Chess;\n}();\n\nvar _default = Chess;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Chess.js"
      ],
      "names": [
        "Chess",
        "ctx",
        "w",
        "config",
        "tileWidth",
        "h",
        "tileHeight",
        "row",
        "rows",
        "col",
        "cols",
        "piece",
        "tileIndex",
        "coords",
        "x",
        "y",
        "Math",
        "abs",
        "blank_board",
        "pieces_codes",
        "PAWN",
        "Pawn",
        "ROOK",
        "Rook",
        "KNIGHT",
        "Knight",
        "BISHOP",
        "Bishop",
        "KING",
        "King",
        "QUEEN",
        "Queen",
        "board",
        "gameOver",
        "winnerTag",
        "innerText",
        "otherPlayer",
        "playerNumber",
        "currentPlayer",
        "update",
        "switchPlayer",
        "messager",
        "unsubscribe",
        "tempPlayer",
        "subscribe",
        "checkIfKingInCheck",
        "drawBoard",
        "draw",
        "engine",
        "drawPieces",
        "Engine",
        "initializeBoard",
        "player1",
        "Player",
        "playerOneKeyMap",
        "player2",
        "playerTwoKeyMap",
        "color",
        "floor",
        "fillStyle",
        "fillRect",
        "testing",
        "index",
        "font",
        "fillText",
        "pieceIndex",
        "length",
        "drawImage",
        "img"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import config            from './config'\nimport { coordsToIndex } from \"./utils\"\nimport Bishop            from './Bishop'\nimport King              from './King'\nimport Knight            from './Knight'\nimport Pawn              from './Pawn'\nimport Queen             from './Queen'\nimport Rook              from './Rook'\nimport Engine            from './Engine'\nimport Player            from './Player'\n\nclass Chess {\n  constructor(ctx) {\n    this.blank_board = config.blank_board\n    this.board = []\n    this.rows = config.rows\n    this.cols = config.cols\n    this.engine = new Engine(this.initializeBoard, ctx)\n    this.engine.update = this.update\n    this.engine.draw = this.draw\n    this.messager = this.engine.messager\n    this.player1 = new Player(config.playerOneKeyMap, this.messager)\n    this.player2 = new Player(config.playerTwoKeyMap, this.messager)\n    this.currentPlayer = this.player1\n    this.otherPlayer = this.player2\n    this.messager.subscribe(this.currentPlayer)\n  }\n\n  initializeBoard = () => {\n    const w = config.tileWidth\n    const h = config.tileHeight\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.cols; col++) {\n        let piece\n        let tileIndex = coordsToIndex(row, col)\n        let coords = { x: col * w, y: row * h, row: row, col: col }\n        switch (Math.abs(this.blank_board[ tileIndex ])) {\n          case config.pieces_codes.PAWN:\n            piece = new Pawn(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.ROOK:\n            piece = new Rook(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.KNIGHT:\n            piece = new Knight(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.BISHOP:\n            piece = new Bishop(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.KING:\n            piece = new King(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.QUEEN:\n            piece = new Queen(coords, this.blank_board[ tileIndex ])\n            break\n          default:\n            // pass\n        }\n        if (piece) {\n          this.board[ tileIndex ] = piece\n        }\n      }\n    }\n  }\n\n  drawBoard() {\n    let color = ''\n    const w = config.tileWidth\n    const h = config.tileHeight\n    for(let row = 0;row<this.rows;row++) {\n      color = Math.floor(row % 2) === 0 ? 'grey' : 'black'\n      for(let col = 0;col<this.cols;col++) {\n        this.engine.ctx.fillStyle = color\n        this.engine.ctx.fillRect(col * w, row * h, w, h)\n        color = color === 'grey' ? 'black' : 'grey'\n        if (config.testing) {\n          let index = coordsToIndex(row, col)\n          this.engine.ctx.fillStyle = 'yellow'\n          this.engine.ctx.font = \"30px Arial\"\n          this.engine.ctx.fillText(index, col * w + 10, row * h + 30)\n        }\n      }\n    }\n  }\n\n  drawPieces() {\n    for(let pieceIndex = 0; pieceIndex<this.board.length; pieceIndex++) {\n      let piece = this.board[pieceIndex]\n      if(piece) {\n        this.engine.ctx.drawImage(piece.img, piece.x, piece.y, config.tileWidth, config.tileHeight)\n      }\n    }\n  }\n\n  update = () =>  {\n    if (this.gameOver) {\n      config.winnerTag.innerText = `Game Over! Player ${this.otherPlayer.playerNumber} wins!`\n    }\n    this.currentPlayer.update(this.switchPlayer, this.board, this.otherPlayer)\n  }\n\n  switchPlayer = () => {\n    this.messager.unsubscribe(this.currentPlayer)\n    let tempPlayer = this.currentPlayer\n    this.currentPlayer = this.otherPlayer\n    this.otherPlayer = tempPlayer\n    this.messager.subscribe(this.currentPlayer)\n    if (this.currentPlayer.board) {\n      this.currentPlayer.checkIfKingInCheck()\n    }\n  }\n\n  draw = () => {\n    this.drawBoard()\n    if(!this.gameOver) {\n      this.currentPlayer.draw(this.engine.ctx)\n    }\n    this.drawPieces()\n  }\n}\n\nexport default Chess"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/utils.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/utils.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/utils.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/utils.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "utils.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexToCoords = indexToCoords;\nexports.coordsToIndex = coordsToIndex;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction indexToCoords(index) {\n  return {\n    x: index % 8 * _config[\"default\"].tileWidth,\n    y: Math.floor(index / 8) * _config[\"default\"].tileHeight\n  };\n}\n\nfunction coordsToIndex(x, y) {\n  return x * 8 + y;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbImluZGV4VG9Db29yZHMiLCJpbmRleCIsIngiLCJjb25maWciLCJ0aWxlV2lkdGgiLCJ5IiwiTWF0aCIsImZsb29yIiwidGlsZUhlaWdodCIsImNvb3Jkc1RvSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFTyxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUNuQyxTQUFPO0FBQ0xDLElBQUFBLENBQUMsRUFBR0QsS0FBSyxHQUFHLENBQVQsR0FBY0UsbUJBQU9DLFNBRG5CO0FBRUxDLElBQUFBLENBQUMsRUFBRUMsSUFBSSxDQUFDQyxLQUFMLENBQVdOLEtBQUssR0FBRyxDQUFuQixJQUF3QkUsbUJBQU9LO0FBRjdCLEdBQVA7QUFJRDs7QUFFTSxTQUFTQyxhQUFULENBQXVCUCxDQUF2QixFQUEwQkcsQ0FBMUIsRUFBNkI7QUFDbEMsU0FBUUgsQ0FBQyxHQUFHLENBQUwsR0FBVUcsQ0FBakI7QUFDRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGFuaWVscGVhY2gvRGV2L2Rldi1hcmNhZGUtZ2FtZXMvQXJjYWRlIENoZXNzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4VG9Db29yZHMoaW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiAoaW5kZXggJSA4KSAqIGNvbmZpZy50aWxlV2lkdGgsXG4gICAgeTogTWF0aC5mbG9vcihpbmRleCAvIDgpICogY29uZmlnLnRpbGVIZWlnaHRcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29vcmRzVG9JbmRleCh4LCB5KSB7XG4gIHJldHVybiAoeCAqIDgpICsgeVxufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "utils.js"
      ],
      "names": [
        "indexToCoords",
        "index",
        "x",
        "config",
        "tileWidth",
        "y",
        "Math",
        "floor",
        "tileHeight",
        "coordsToIndex"
      ],
      "mappings": ";;;;;;;;AAAA;;;;AAEO,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,SAAO;AACLC,IAAAA,CAAC,EAAGD,KAAK,GAAG,CAAT,GAAcE,mBAAOC,SADnB;AAELC,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWN,KAAK,GAAG,CAAnB,IAAwBE,mBAAOK;AAF7B,GAAP;AAID;;AAEM,SAASC,aAAT,CAAuBP,CAAvB,EAA0BG,CAA1B,EAA6B;AAClC,SAAQH,CAAC,GAAG,CAAL,GAAUG,CAAjB;AACD",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import config from './config'\n\nexport function indexToCoords(index) {\n  return {\n    x: (index % 8) * config.tileWidth,\n    y: Math.floor(index / 8) * config.tileHeight\n  }\n}\n\nexport function coordsToIndex(x, y) {\n  return (x * 8) + y\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604607
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Bishop.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Bishop.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Bishop.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Bishop.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Bishop.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Bishop =\n/*#__PURE__*/\nfunction () {\n  function Bishop(coords, pieceCode) {\n    _classCallCheck(this, Bishop);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_bishop : _ImageLoader[\"default\"].w_bishop;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Bishop, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var blocked = false;\n      var tilesAdvanced = 0;\n      var tilesShifted = 0;\n      var lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n        var proposedIndex = currentIndex + tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = proposedIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (pieceOnTile) {\n          if (player.ownsPiece(pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex = currentIndex + tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex;\n        var _pieceOnTile = board[_proposedIndex];\n\n        if (_pieceOnTile) {\n          if (player.ownsPiece(_pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex2 = currentIndex - tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex2)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex2;\n        var _pieceOnTile2 = board[_proposedIndex2];\n\n        if (_pieceOnTile2) {\n          if (player.ownsPiece(_pieceOnTile2.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex2);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex2);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex3 = currentIndex - tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex3)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex3;\n        var _pieceOnTile3 = board[_proposedIndex3];\n\n        if (_pieceOnTile3) {\n          if (player.ownsPiece(_pieceOnTile3.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex3);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex3);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 7 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Bishop;\n}();\n\nvar _default = Bishop;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Bishop.js"
      ],
      "names": [
        "Bishop",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_bishop",
        "w_bishop",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "blocked",
        "tilesAdvanced",
        "tilesShifted",
        "lastIndexChecked",
        "config",
        "cols",
        "proposedIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import images from \"./ImageLoader\"\nimport config from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Bishop {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_bishop : images.w_bishop\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let blocked = false\n    let tilesAdvanced = 0\n    let tilesShifted = 0\n    let lastIndexChecked = currentIndex\n    while(!blocked) { // move forward right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move forward left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 7 && prevIndex % 8 ===0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Bishop"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604586
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/ImageLoader.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/ImageLoader.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/ImageLoader.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/ImageLoader.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "ImageLoader.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.loadImages = void 0;\nvar images = {\n  b_pawn: null,\n  b_rook: null,\n  b_knight: null,\n  b_bishop: null,\n  b_king: null,\n  b_queen: null,\n  w_pawn: null,\n  w_rook: null,\n  w_knight: null,\n  w_bishop: null,\n  w_king: null,\n  w_queen: null\n};\nvar imagesLeftToLoad = 0;\n\nfunction handleImageLoaded() {\n  imagesLeftToLoad--;\n\n  if (imagesLeftToLoad <= 0) {\n    startEngine();\n  }\n}\n\nfunction startEngine() {}\n\nvar loadImages = function loadImages(cb) {\n  var image_files = ['b_pawn.png', 'b_rook.png', 'b_knight.png', 'b_bishop.png', 'b_king.png', 'b_queen.png', 'w_pawn.png', 'w_rook.png', 'w_knight.png', 'w_bishop.png', 'w_king.png', 'w_queen.png'];\n  imagesLeftToLoad = image_files.length;\n\n  for (var key in images) {\n    images[key] = document.createElement('img');\n    images[key].onload = handleImageLoaded;\n    images[key].src = \"images/\".concat(key, \".png\");\n  }\n\n  startEngine = cb;\n};\n\nexports.loadImages = loadImages;\nvar _default = images;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlTG9hZGVyLmpzIl0sIm5hbWVzIjpbImltYWdlcyIsImJfcGF3biIsImJfcm9vayIsImJfa25pZ2h0IiwiYl9iaXNob3AiLCJiX2tpbmciLCJiX3F1ZWVuIiwid19wYXduIiwid19yb29rIiwid19rbmlnaHQiLCJ3X2Jpc2hvcCIsIndfa2luZyIsIndfcXVlZW4iLCJpbWFnZXNMZWZ0VG9Mb2FkIiwiaGFuZGxlSW1hZ2VMb2FkZWQiLCJzdGFydEVuZ2luZSIsImxvYWRJbWFnZXMiLCJjYiIsImltYWdlX2ZpbGVzIiwibGVuZ3RoIiwia2V5IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwib25sb2FkIiwic3JjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUc7QUFDWEMsRUFBQUEsTUFBTSxFQUFFLElBREc7QUFFWEMsRUFBQUEsTUFBTSxFQUFFLElBRkc7QUFHWEMsRUFBQUEsUUFBUSxFQUFFLElBSEM7QUFJWEMsRUFBQUEsUUFBUSxFQUFFLElBSkM7QUFLWEMsRUFBQUEsTUFBTSxFQUFFLElBTEc7QUFNWEMsRUFBQUEsT0FBTyxFQUFFLElBTkU7QUFPWEMsRUFBQUEsTUFBTSxFQUFFLElBUEc7QUFRWEMsRUFBQUEsTUFBTSxFQUFFLElBUkc7QUFTWEMsRUFBQUEsUUFBUSxFQUFFLElBVEM7QUFVWEMsRUFBQUEsUUFBUSxFQUFFLElBVkM7QUFXWEMsRUFBQUEsTUFBTSxFQUFFLElBWEc7QUFZWEMsRUFBQUEsT0FBTyxFQUFFO0FBWkUsQ0FBYjtBQWVBLElBQUlDLGdCQUFnQixHQUFHLENBQXZCOztBQUVBLFNBQVNDLGlCQUFULEdBQTZCO0FBQzNCRCxFQUFBQSxnQkFBZ0I7O0FBQ2hCLE1BQUdBLGdCQUFnQixJQUFJLENBQXZCLEVBQTBCO0FBQ3hCRSxJQUFBQSxXQUFXO0FBQ1o7QUFDRjs7QUFFRCxTQUFTQSxXQUFULEdBQXVCLENBRXRCOztBQUdNLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNDLEVBQUQsRUFBUTtBQUNoQyxNQUFJQyxXQUFXLEdBQUcsQ0FDZCxZQURjLEVBQ0EsWUFEQSxFQUNjLGNBRGQsRUFDOEIsY0FEOUIsRUFDOEMsWUFEOUMsRUFDNEQsYUFENUQsRUFFZCxZQUZjLEVBRUEsWUFGQSxFQUVjLGNBRmQsRUFFOEIsY0FGOUIsRUFFOEMsWUFGOUMsRUFFNEQsYUFGNUQsQ0FBbEI7QUFLQUwsRUFBQUEsZ0JBQWdCLEdBQUdLLFdBQVcsQ0FBQ0MsTUFBL0I7O0FBRUEsT0FBSSxJQUFJQyxHQUFSLElBQWVwQixNQUFmLEVBQXVCO0FBQ3JCQSxJQUFBQSxNQUFNLENBQUNvQixHQUFELENBQU4sR0FBY0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQXRCLElBQUFBLE1BQU0sQ0FBQ29CLEdBQUQsQ0FBTixDQUFZRyxNQUFaLEdBQXFCVCxpQkFBckI7QUFDQWQsSUFBQUEsTUFBTSxDQUFDb0IsR0FBRCxDQUFOLENBQVlJLEdBQVosb0JBQTRCSixHQUE1QjtBQUNEOztBQUVETCxFQUFBQSxXQUFXLEdBQUdFLEVBQWQ7QUFDRCxDQWZNOzs7ZUFpQlFqQixNIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYW5pZWxwZWFjaC9EZXYvZGV2LWFyY2FkZS1nYW1lcy9BcmNhZGUgQ2hlc3MiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaW1hZ2VzID0ge1xuICBiX3Bhd246IG51bGwsXG4gIGJfcm9vazogbnVsbCxcbiAgYl9rbmlnaHQ6IG51bGwsXG4gIGJfYmlzaG9wOiBudWxsLFxuICBiX2tpbmc6IG51bGwsXG4gIGJfcXVlZW46IG51bGwsXG4gIHdfcGF3bjogbnVsbCxcbiAgd19yb29rOiBudWxsLFxuICB3X2tuaWdodDogbnVsbCxcbiAgd19iaXNob3A6IG51bGwsXG4gIHdfa2luZzogbnVsbCxcbiAgd19xdWVlbjogbnVsbCxcbn1cblxubGV0IGltYWdlc0xlZnRUb0xvYWQgPSAwXG5cbmZ1bmN0aW9uIGhhbmRsZUltYWdlTG9hZGVkKCkge1xuICBpbWFnZXNMZWZ0VG9Mb2FkLS1cbiAgaWYoaW1hZ2VzTGVmdFRvTG9hZCA8PSAwKSB7XG4gICAgc3RhcnRFbmdpbmUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0RW5naW5lKCkge1xuXG59XG5cblxuZXhwb3J0IGNvbnN0IGxvYWRJbWFnZXMgPSAoY2IpID0+IHtcbiAgbGV0IGltYWdlX2ZpbGVzID0gW1xuICAgICAgJ2JfcGF3bi5wbmcnLCAnYl9yb29rLnBuZycsICdiX2tuaWdodC5wbmcnLCAnYl9iaXNob3AucG5nJywgJ2Jfa2luZy5wbmcnLCAnYl9xdWVlbi5wbmcnLFxuICAgICAgJ3dfcGF3bi5wbmcnLCAnd19yb29rLnBuZycsICd3X2tuaWdodC5wbmcnLCAnd19iaXNob3AucG5nJywgJ3dfa2luZy5wbmcnLCAnd19xdWVlbi5wbmcnLFxuICBdXG5cbiAgaW1hZ2VzTGVmdFRvTG9hZCA9IGltYWdlX2ZpbGVzLmxlbmd0aFxuXG4gIGZvcihsZXQga2V5IGluIGltYWdlcykge1xuICAgIGltYWdlc1trZXldID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJylcbiAgICBpbWFnZXNba2V5XS5vbmxvYWQgPSBoYW5kbGVJbWFnZUxvYWRlZFxuICAgIGltYWdlc1trZXldLnNyYyA9IGBpbWFnZXMvJHtrZXl9LnBuZ2BcbiAgfVxuXG4gIHN0YXJ0RW5naW5lID0gY2Jcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW1hZ2VzIl19",
    "map": {
      "version": 3,
      "sources": [
        "ImageLoader.js"
      ],
      "names": [
        "images",
        "b_pawn",
        "b_rook",
        "b_knight",
        "b_bishop",
        "b_king",
        "b_queen",
        "w_pawn",
        "w_rook",
        "w_knight",
        "w_bishop",
        "w_king",
        "w_queen",
        "imagesLeftToLoad",
        "handleImageLoaded",
        "startEngine",
        "loadImages",
        "cb",
        "image_files",
        "length",
        "key",
        "document",
        "createElement",
        "onload",
        "src"
      ],
      "mappings": ";;;;;;AAAA,IAAIA,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,IADG;AAEXC,EAAAA,MAAM,EAAE,IAFG;AAGXC,EAAAA,QAAQ,EAAE,IAHC;AAIXC,EAAAA,QAAQ,EAAE,IAJC;AAKXC,EAAAA,MAAM,EAAE,IALG;AAMXC,EAAAA,OAAO,EAAE,IANE;AAOXC,EAAAA,MAAM,EAAE,IAPG;AAQXC,EAAAA,MAAM,EAAE,IARG;AASXC,EAAAA,QAAQ,EAAE,IATC;AAUXC,EAAAA,QAAQ,EAAE,IAVC;AAWXC,EAAAA,MAAM,EAAE,IAXG;AAYXC,EAAAA,OAAO,EAAE;AAZE,CAAb;AAeA,IAAIC,gBAAgB,GAAG,CAAvB;;AAEA,SAASC,iBAAT,GAA6B;AAC3BD,EAAAA,gBAAgB;;AAChB,MAAGA,gBAAgB,IAAI,CAAvB,EAA0B;AACxBE,IAAAA,WAAW;AACZ;AACF;;AAED,SAASA,WAAT,GAAuB,CAEtB;;AAGM,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD,EAAQ;AAChC,MAAIC,WAAW,GAAG,CACd,YADc,EACA,YADA,EACc,cADd,EAC8B,cAD9B,EAC8C,YAD9C,EAC4D,aAD5D,EAEd,YAFc,EAEA,YAFA,EAEc,cAFd,EAE8B,cAF9B,EAE8C,YAF9C,EAE4D,aAF5D,CAAlB;AAKAL,EAAAA,gBAAgB,GAAGK,WAAW,CAACC,MAA/B;;AAEA,OAAI,IAAIC,GAAR,IAAepB,MAAf,EAAuB;AACrBA,IAAAA,MAAM,CAACoB,GAAD,CAAN,GAAcC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACAtB,IAAAA,MAAM,CAACoB,GAAD,CAAN,CAAYG,MAAZ,GAAqBT,iBAArB;AACAd,IAAAA,MAAM,CAACoB,GAAD,CAAN,CAAYI,GAAZ,oBAA4BJ,GAA5B;AACD;;AAEDL,EAAAA,WAAW,GAAGE,EAAd;AACD,CAfM;;;eAiBQjB,M",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "let images = {\n  b_pawn: null,\n  b_rook: null,\n  b_knight: null,\n  b_bishop: null,\n  b_king: null,\n  b_queen: null,\n  w_pawn: null,\n  w_rook: null,\n  w_knight: null,\n  w_bishop: null,\n  w_king: null,\n  w_queen: null,\n}\n\nlet imagesLeftToLoad = 0\n\nfunction handleImageLoaded() {\n  imagesLeftToLoad--\n  if(imagesLeftToLoad <= 0) {\n    startEngine()\n  }\n}\n\nfunction startEngine() {\n\n}\n\n\nexport const loadImages = (cb) => {\n  let image_files = [\n      'b_pawn.png', 'b_rook.png', 'b_knight.png', 'b_bishop.png', 'b_king.png', 'b_queen.png',\n      'w_pawn.png', 'w_rook.png', 'w_knight.png', 'w_bishop.png', 'w_king.png', 'w_queen.png',\n  ]\n\n  imagesLeftToLoad = image_files.length\n\n  for(let key in images) {\n    images[key] = document.createElement('img')\n    images[key].onload = handleImageLoaded\n    images[key].src = `images/${key}.png`\n  }\n\n  startEngine = cb\n}\n\nexport default images"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/King.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/King.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/King.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/King.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "King.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar King =\n/*#__PURE__*/\nfunction () {\n  function King(coords, pieceCode) {\n    _classCallCheck(this, King);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_king : _ImageLoader[\"default\"].w_king;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(King, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var proposedIndex = currentIndex + _config[\"default\"].cols * this.magnitude; // move forward\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var pieceOnTile = board[proposedIndex];\n\n        if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - _config[\"default\"].cols * this.magnitude; // move backward\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile = board[proposedIndex];\n\n        if (!_pieceOnTile || !player.ownsPiece(_pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex + 1; // move right\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile2 = board[proposedIndex];\n\n        if (!_pieceOnTile2 || !player.ownsPiece(_pieceOnTile2.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - 1; // move left\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile3 = board[proposedIndex];\n\n        if (!_pieceOnTile3 || !player.ownsPiece(_pieceOnTile3.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex + _config[\"default\"].cols * this.magnitude + 1; // move forward right\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile4 = board[proposedIndex];\n\n        if (!_pieceOnTile4 || !player.ownsPiece(_pieceOnTile4.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex + _config[\"default\"].cols * this.magnitude - 1; // move forward left\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile5 = board[proposedIndex];\n\n        if (!_pieceOnTile5 || !player.ownsPiece(_pieceOnTile5.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - _config[\"default\"].cols * this.magnitude + 1; // move backwards right\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile6 = board[proposedIndex];\n\n        if (!_pieceOnTile6 || !player.ownsPiece(_pieceOnTile6.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - _config[\"default\"].cols * this.magnitude - 1; // move backwards left\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile7 = board[proposedIndex];\n\n        if (!_pieceOnTile7 || !player.ownsPiece(_pieceOnTile7.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 7 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return King;\n}();\n\nvar _default = King;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "King.js"
      ],
      "names": [
        "King",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_king",
        "w_king",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "proposedIndex",
        "config",
        "cols",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass King {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_king : images.w_king\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let proposedIndex = currentIndex + (config.cols * this.magnitude) // move forward\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - (config.cols * this.magnitude) // move backward\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex + 1 // move right\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - 1 // move left\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex + (config.cols * this.magnitude) + 1 // move forward right\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex + (config.cols * this.magnitude) - 1 // move forward left\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - (config.cols * this.magnitude) + 1 // move backwards right\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - (config.cols * this.magnitude) - 1 // move backwards left\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 7 && prevIndex % 8 ===0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default King"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604588
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Knight.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Knight.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Knight.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Knight.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Knight.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Knight =\n/*#__PURE__*/\nfunction () {\n  function Knight(coords, pieceCode) {\n    _classCallCheck(this, Knight);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_knight : _ImageLoader[\"default\"].w_knight;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Knight, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var proposedIndex;\n      var doubleForwardIndex = currentIndex + _config[\"default\"].cols * 2 * this.magnitude;\n      var singleRightIndex = doubleForwardIndex + 1;\n\n      if (this.inBounds(doubleForwardIndex, singleRightIndex)) {\n        proposedIndex = singleRightIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var singleLeftIndex = doubleForwardIndex - 1;\n\n      if (this.inBounds(doubleForwardIndex, singleLeftIndex)) {\n        proposedIndex = singleLeftIndex;\n        var _pieceOnTile = board[proposedIndex];\n\n        if (!_pieceOnTile || !player.ownsPiece(_pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var doubleBackwardIndex = currentIndex - _config[\"default\"].cols * 2 * this.magnitude;\n      singleRightIndex = doubleBackwardIndex + 1;\n\n      if (this.inBounds(doubleBackwardIndex, singleRightIndex)) {\n        proposedIndex = singleRightIndex;\n        var _pieceOnTile2 = board[proposedIndex];\n\n        if (!_pieceOnTile2 || !player.ownsPiece(_pieceOnTile2.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      singleLeftIndex = doubleBackwardIndex - 1;\n\n      if (this.inBounds(doubleBackwardIndex, singleLeftIndex)) {\n        proposedIndex = singleLeftIndex;\n        var _pieceOnTile3 = board[proposedIndex];\n\n        if (!_pieceOnTile3 || !player.ownsPiece(_pieceOnTile3.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var singleForwardIndex = currentIndex + _config[\"default\"].cols * this.magnitude;\n      var doubleRightIndex = singleForwardIndex + 2;\n\n      if (this.inBounds(singleForwardIndex, doubleRightIndex)) {\n        proposedIndex = doubleRightIndex;\n        var _pieceOnTile4 = board[proposedIndex];\n\n        if (!_pieceOnTile4 || !player.ownsPiece(_pieceOnTile4.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var doubleLeftIndex = singleForwardIndex - 2;\n\n      if (this.inBounds(singleForwardIndex, doubleLeftIndex)) {\n        proposedIndex = doubleLeftIndex;\n        var _pieceOnTile5 = board[proposedIndex];\n\n        if (!_pieceOnTile5 || !player.ownsPiece(_pieceOnTile5.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var singleBackwardIndex = currentIndex - _config[\"default\"].cols * this.magnitude;\n      doubleRightIndex = singleBackwardIndex + 2;\n\n      if (this.inBounds(singleBackwardIndex, doubleRightIndex)) {\n        proposedIndex = doubleRightIndex;\n        var _pieceOnTile6 = board[proposedIndex];\n\n        if (!_pieceOnTile6 || !player.ownsPiece(_pieceOnTile6.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      doubleLeftIndex = singleBackwardIndex - 2;\n\n      if (this.inBounds(singleBackwardIndex, doubleLeftIndex)) {\n        proposedIndex = doubleLeftIndex;\n        var _pieceOnTile7 = board[proposedIndex];\n\n        if (!_pieceOnTile7 || !player.ownsPiece(_pieceOnTile7.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 2 && (prevIndex % 8 === 0 || (prevIndex - 1) % 8 === 0)) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 2 && ((prevIndex + 1) % 8 === 0 || (prevIndex + 2) % 8 === 0)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Knight;\n}();\n\nvar _default = Knight;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Knight.js"
      ],
      "names": [
        "Knight",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_knight",
        "w_knight",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "proposedIndex",
        "doubleForwardIndex",
        "config",
        "cols",
        "singleRightIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "singleLeftIndex",
        "doubleBackwardIndex",
        "singleForwardIndex",
        "doubleRightIndex",
        "doubleLeftIndex",
        "singleBackwardIndex",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Knight {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_knight : images.w_knight\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n    let proposedIndex\n\n    let doubleForwardIndex = currentIndex + ((config.cols * 2) * this.magnitude)\n    let singleRightIndex = doubleForwardIndex + 1\n    if (this.inBounds(doubleForwardIndex, singleRightIndex)) {\n      proposedIndex = singleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let singleLeftIndex = doubleForwardIndex - 1\n    if (this.inBounds(doubleForwardIndex, singleLeftIndex)) {\n      proposedIndex = singleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let doubleBackwardIndex = currentIndex - ((config.cols * 2) * this.magnitude)\n    singleRightIndex = doubleBackwardIndex + 1\n    if (this.inBounds(doubleBackwardIndex, singleRightIndex)) {\n      proposedIndex = singleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    singleLeftIndex = doubleBackwardIndex - 1\n    if (this.inBounds(doubleBackwardIndex, singleLeftIndex)) {\n      proposedIndex = singleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let singleForwardIndex = currentIndex + (config.cols * this.magnitude)\n    let doubleRightIndex = singleForwardIndex + 2\n    if (this.inBounds(singleForwardIndex, doubleRightIndex)) {\n      proposedIndex = doubleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let doubleLeftIndex = singleForwardIndex - 2\n    if (this.inBounds(singleForwardIndex, doubleLeftIndex)) {\n      proposedIndex = doubleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let singleBackwardIndex = currentIndex - (config.cols * this.magnitude)\n    doubleRightIndex = singleBackwardIndex + 2\n    if (this.inBounds(singleBackwardIndex, doubleRightIndex)) {\n      proposedIndex = doubleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    doubleLeftIndex = singleBackwardIndex - 2\n    if (this.inBounds(singleBackwardIndex, doubleLeftIndex)) {\n      proposedIndex = doubleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (prevIndex - nextIndex === 2 && (prevIndex % 8 === 0 || (prevIndex - 1) % 8 === 0)) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 2 && ((prevIndex + 1) % 8 === 0 || (prevIndex + 2) % 8 === 0)) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Knight"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604588
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Pawn.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Pawn.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Pawn.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Pawn.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Pawn.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Pawn =\n/*#__PURE__*/\nfunction () {\n  function Pawn(coords, pieceCode) {\n    _classCallCheck(this, Pawn);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_pawn : _ImageLoader[\"default\"].w_pawn;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Pawn, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var singleForwardIndex = currentIndex + _config[\"default\"].cols * this.magnitude;\n      var doubleForwardIndex = currentIndex + _config[\"default\"].cols * 2 * this.magnitude;\n      var possibleMoves = [];\n\n      if (this.inBounds(currentIndex, singleForwardIndex) && !board[singleForwardIndex]) {\n        possibleMoves.push(singleForwardIndex); // move up\n      }\n\n      if (this.inBounds(currentIndex, doubleForwardIndex) && this.row === _config[\"default\"].rows - 2 || this.row === 1) {\n        // first turn with pawn\n        possibleMoves.push(doubleForwardIndex); // move up twice\n      }\n\n      if (this.inBounds(singleForwardIndex, singleForwardIndex + 1) && board[singleForwardIndex + 1] && !player.ownsPiece(board[singleForwardIndex + 1].code)) {\n        // diagonal right piece to attack\n        possibleMoves.push(singleForwardIndex + 1);\n      }\n\n      if (this.inBounds(singleForwardIndex, singleForwardIndex - 1) && board[singleForwardIndex - 1] && !player.ownsPiece(board[singleForwardIndex - 1].code)) {\n        possibleMoves.push(singleForwardIndex - 1);\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows - 1) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Pawn;\n}();\n\nvar _default = Pawn;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBhd24uanMiXSwibmFtZXMiOlsiUGF3biIsImNvb3JkcyIsInBpZWNlQ29kZSIsIngiLCJ5Iiwicm93IiwiY29sIiwiaW1nIiwiaW1hZ2VzIiwiYl9wYXduIiwid19wYXduIiwiY29kZSIsIm1hZ25pdHVkZSIsIk1hdGgiLCJhYnMiLCJwbGF5ZXIiLCJib2FyZCIsImN1cnJlbnRJbmRleCIsInNpbmdsZUZvcndhcmRJbmRleCIsImNvbmZpZyIsImNvbHMiLCJkb3VibGVGb3J3YXJkSW5kZXgiLCJwb3NzaWJsZU1vdmVzIiwiaW5Cb3VuZHMiLCJwdXNoIiwicm93cyIsIm93bnNQaWVjZSIsImN0eCIsImdldFBvc3NpYmxlTW92ZXMiLCJmb3JFYWNoIiwicHJvcG9zZWRJbmRleCIsInByb3Bvc2VkQ29vcmRzIiwiZmlsbFJlY3QiLCJ0aWxlV2lkdGgiLCJ0aWxlSGVpZ2h0IiwicHJldkluZGV4IiwibmV4dEluZGV4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7SUFFTUEsSTs7O0FBQ0osZ0JBQVlDLE1BQVosRUFBb0JDLFNBQXBCLEVBQStCO0FBQUE7O0FBQzdCLFNBQUtDLENBQUwsR0FBU0YsTUFBTSxDQUFDRSxDQUFoQjtBQUNBLFNBQUtDLENBQUwsR0FBU0gsTUFBTSxDQUFDRyxDQUFoQjtBQUNBLFNBQUtDLEdBQUwsR0FBV0osTUFBTSxDQUFDSSxHQUFsQjtBQUNBLFNBQUtDLEdBQUwsR0FBV0wsTUFBTSxDQUFDSyxHQUFsQjtBQUNBLFNBQUtDLEdBQUwsR0FBV0wsU0FBUyxHQUFHLENBQVosR0FBZ0JNLHdCQUFPQyxNQUF2QixHQUFnQ0Qsd0JBQU9FLE1BQWxEO0FBQ0EsU0FBS0MsSUFBTCxHQUFZVCxTQUFaO0FBQ0EsU0FBS1UsU0FBTCxHQUFpQixLQUFLRCxJQUFMLEdBQVlFLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEtBQUtILElBQWQsQ0FBN0I7QUFDRDs7OztxQ0FFZ0JJLE0sRUFBUUMsSyxFQUFPO0FBQzlC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QVE7QUFDWCxXQUFLRSxDQUFMLEdBQVNGLE1BQU0sQ0FBQ0UsQ0FBaEI7QUFDQSxXQUFLQyxDQUFMLEdBQVNILE1BQU0sQ0FBQ0csQ0FBaEI7QUFDQSxXQUFLQyxHQUFMLEdBQVdKLE1BQU0sQ0FBQ0ksR0FBbEI7QUFDQSxXQUFLQyxHQUFMLEdBQVdMLE1BQU0sQ0FBQ0ssR0FBbEI7QUFDRDs7Ozs7O2VBR1lOLEkiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbmllbHBlYWNoL0Rldi9kZXYtYXJjYWRlLWdhbWVzL0FyY2FkZSBDaGVzcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbWFnZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBcIi4vSW1hZ2VMb2FkZXJcIlxuaW1wb3J0IGNvbmZpZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICcuL2NvbmZpZydcbmltcG9ydCB7IGNvb3Jkc1RvSW5kZXgsIGluZGV4VG9Db29yZHMgfSBmcm9tICcuL3V0aWxzJ1xuXG5jbGFzcyBQYXduIHtcbiAgY29uc3RydWN0b3IoY29vcmRzLCBwaWVjZUNvZGUpIHtcbiAgICB0aGlzLnggPSBjb29yZHMueFxuICAgIHRoaXMueSA9IGNvb3Jkcy55XG4gICAgdGhpcy5yb3cgPSBjb29yZHMucm93XG4gICAgdGhpcy5jb2wgPSBjb29yZHMuY29sXG4gICAgdGhpcy5pbWcgPSBwaWVjZUNvZGUgPiAwID8gaW1hZ2VzLmJfcGF3biA6IGltYWdlcy53X3Bhd25cbiAgICB0aGlzLmNvZGUgPSBwaWVjZUNvZGVcbiAgICB0aGlzLm1hZ25pdHVkZSA9IHRoaXMuY29kZSAvIE1hdGguYWJzKHRoaXMuY29kZSlcbiAgfVxuXG4gIGdldFBvc3NpYmxlTW92ZXMocGxheWVyLCBib2FyZCkge1xuICAgIGxldCBjdXJyZW50SW5kZXggPSBjb29yZHNUb0luZGV4KHRoaXMucm93LCB0aGlzLmNvbClcbiAgICBsZXQgc2luZ2xlRm9yd2FyZEluZGV4ID0gY3VycmVudEluZGV4ICsgKGNvbmZpZy5jb2xzICogdGhpcy5tYWduaXR1ZGUpXG4gICAgbGV0IGRvdWJsZUZvcndhcmRJbmRleCA9IGN1cnJlbnRJbmRleCArICgoY29uZmlnLmNvbHMgKiAyKSAqIHRoaXMubWFnbml0dWRlKVxuICAgIGxldCBwb3NzaWJsZU1vdmVzID0gW11cbiAgICBpZih0aGlzLmluQm91bmRzKGN1cnJlbnRJbmRleCwgc2luZ2xlRm9yd2FyZEluZGV4KSAmJiAhYm9hcmRbc2luZ2xlRm9yd2FyZEluZGV4XSkge1xuICAgICAgcG9zc2libGVNb3Zlcy5wdXNoKHNpbmdsZUZvcndhcmRJbmRleCkgLy8gbW92ZSB1cFxuICAgIH1cbiAgICBpZiAodGhpcy5pbkJvdW5kcyhjdXJyZW50SW5kZXgsIGRvdWJsZUZvcndhcmRJbmRleCkgJiYgdGhpcy5yb3cgPT09IGNvbmZpZy5yb3dzIC0gMiB8fCB0aGlzLnJvdyA9PT0gMSkgeyAvLyBmaXJzdCB0dXJuIHdpdGggcGF3blxuICAgICAgcG9zc2libGVNb3Zlcy5wdXNoKGRvdWJsZUZvcndhcmRJbmRleCkgLy8gbW92ZSB1cCB0d2ljZVxuICAgIH1cbiAgICBpZiAodGhpcy5pbkJvdW5kcyhzaW5nbGVGb3J3YXJkSW5kZXgsIHNpbmdsZUZvcndhcmRJbmRleCArIDEpICYmIGJvYXJkW3NpbmdsZUZvcndhcmRJbmRleCArIDFdICYmICFwbGF5ZXIub3duc1BpZWNlKGJvYXJkW3NpbmdsZUZvcndhcmRJbmRleCArIDFdLmNvZGUpKSB7IC8vIGRpYWdvbmFsIHJpZ2h0IHBpZWNlIHRvIGF0dGFja1xuICAgICAgcG9zc2libGVNb3Zlcy5wdXNoKHNpbmdsZUZvcndhcmRJbmRleCArIDEpXG4gICAgfVxuICAgIGlmICh0aGlzLmluQm91bmRzKHNpbmdsZUZvcndhcmRJbmRleCwgc2luZ2xlRm9yd2FyZEluZGV4IC0gMSkgJiYgYm9hcmRbc2luZ2xlRm9yd2FyZEluZGV4IC0gMV0gJiYgIXBsYXllci5vd25zUGllY2UoYm9hcmRbc2luZ2xlRm9yd2FyZEluZGV4IC0gMV0uY29kZSkpIHtcbiAgICAgIHBvc3NpYmxlTW92ZXMucHVzaChzaW5nbGVGb3J3YXJkSW5kZXggLSAxKVxuICAgIH1cblxuICAgIHJldHVybiBwb3NzaWJsZU1vdmVzXG4gIH1cblxuICBzaG93UG9zc2libGVNb3ZlcyhwbGF5ZXIsIGJvYXJkLCBjdHgpIHtcbiAgICB0aGlzLmdldFBvc3NpYmxlTW92ZXMocGxheWVyLCBib2FyZCkuZm9yRWFjaChwcm9wb3NlZEluZGV4ID0+IHtcbiAgICAgIGxldCBwcm9wb3NlZENvb3JkcyA9IGluZGV4VG9Db29yZHMocHJvcG9zZWRJbmRleClcbiAgICAgIGN0eC5maWxsUmVjdChwcm9wb3NlZENvb3Jkcy54LCBwcm9wb3NlZENvb3Jkcy55LCBjb25maWcudGlsZVdpZHRoLCBjb25maWcudGlsZUhlaWdodClcbiAgICB9KVxuICB9XG5cbiAgaW5Cb3VuZHMocHJldkluZGV4LCBuZXh0SW5kZXgpIHtcbiAgICBpZiAobmV4dEluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChuZXh0SW5kZXggPiBjb25maWcuY29scyAqIGNvbmZpZy5yb3dzIC0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChwcmV2SW5kZXggLSBuZXh0SW5kZXggPT09IDEgJiYgcHJldkluZGV4ICUgOCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChuZXh0SW5kZXggLSBwcmV2SW5kZXggPT09IDEgJiYgbmV4dEluZGV4ICUgOCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBtb3ZlKGNvb3Jkcykge1xuICAgIHRoaXMueCA9IGNvb3Jkcy54XG4gICAgdGhpcy55ID0gY29vcmRzLnlcbiAgICB0aGlzLnJvdyA9IGNvb3Jkcy5yb3dcbiAgICB0aGlzLmNvbCA9IGNvb3Jkcy5jb2xcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXduIl19",
    "map": {
      "version": 3,
      "sources": [
        "Pawn.js"
      ],
      "names": [
        "Pawn",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_pawn",
        "w_pawn",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "singleForwardIndex",
        "config",
        "cols",
        "doubleForwardIndex",
        "possibleMoves",
        "inBounds",
        "push",
        "rows",
        "ownsPiece",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedIndex",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import images                                     from \"./ImageLoader\"\nimport config                                     from './config'\nimport { coordsToIndex, indexToCoords } from './utils'\n\nclass Pawn {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_pawn : images.w_pawn\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let singleForwardIndex = currentIndex + (config.cols * this.magnitude)\n    let doubleForwardIndex = currentIndex + ((config.cols * 2) * this.magnitude)\n    let possibleMoves = []\n    if(this.inBounds(currentIndex, singleForwardIndex) && !board[singleForwardIndex]) {\n      possibleMoves.push(singleForwardIndex) // move up\n    }\n    if (this.inBounds(currentIndex, doubleForwardIndex) && this.row === config.rows - 2 || this.row === 1) { // first turn with pawn\n      possibleMoves.push(doubleForwardIndex) // move up twice\n    }\n    if (this.inBounds(singleForwardIndex, singleForwardIndex + 1) && board[singleForwardIndex + 1] && !player.ownsPiece(board[singleForwardIndex + 1].code)) { // diagonal right piece to attack\n      possibleMoves.push(singleForwardIndex + 1)\n    }\n    if (this.inBounds(singleForwardIndex, singleForwardIndex - 1) && board[singleForwardIndex - 1] && !player.ownsPiece(board[singleForwardIndex - 1].code)) {\n      possibleMoves.push(singleForwardIndex - 1)\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows - 1) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Pawn"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604589
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Queen.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Queen.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Queen.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Queen.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Queen.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Queen =\n/*#__PURE__*/\nfunction () {\n  function Queen(coords, pieceCode) {\n    _classCallCheck(this, Queen);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_queen : _ImageLoader[\"default\"].w_queen;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Queen, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var blocked = false;\n      var tilesAdvanced = 0;\n      var lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward\n        tilesAdvanced += _config[\"default\"].cols;\n        var proposedIndex = currentIndex + tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = proposedIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (pieceOnTile) {\n          if (player.ownsPiece(pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move right\n        tilesAdvanced += 1;\n\n        var _proposedIndex = currentIndex + tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex;\n        var _pieceOnTile = board[_proposedIndex];\n\n        if (_pieceOnTile) {\n          if (player.ownsPiece(_pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move left\n        tilesAdvanced += 1;\n\n        var _proposedIndex2 = currentIndex - tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex2)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex2;\n        var _pieceOnTile2 = board[_proposedIndex2];\n\n        if (_pieceOnTile2) {\n          if (player.ownsPiece(_pieceOnTile2.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex2);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex2);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move back\n        tilesAdvanced += _config[\"default\"].cols;\n\n        var _proposedIndex3 = currentIndex - tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex3)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex3;\n        var _pieceOnTile3 = board[_proposedIndex3];\n\n        if (_pieceOnTile3) {\n          if (player.ownsPiece(_pieceOnTile3.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex3);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex3);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      var tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex4 = currentIndex + tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex4)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex4;\n        var _pieceOnTile4 = board[_proposedIndex4];\n\n        if (_pieceOnTile4) {\n          if (player.ownsPiece(_pieceOnTile4.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex4);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex4);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex5 = currentIndex + tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex5)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex5;\n        var _pieceOnTile5 = board[_proposedIndex5];\n\n        if (_pieceOnTile5) {\n          if (player.ownsPiece(_pieceOnTile5.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex5);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex5);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex6 = currentIndex - tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex6)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex6;\n        var _pieceOnTile6 = board[_proposedIndex6];\n\n        if (_pieceOnTile6) {\n          if (player.ownsPiece(_pieceOnTile6.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex6);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex6);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex7 = currentIndex - tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex7)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex7;\n        var _pieceOnTile7 = board[_proposedIndex7];\n\n        if (_pieceOnTile7) {\n          if (player.ownsPiece(_pieceOnTile7.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex7);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex7);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 7 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Queen;\n}();\n\nvar _default = Queen;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Queen.js"
      ],
      "names": [
        "Queen",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_queen",
        "w_queen",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "blocked",
        "tilesAdvanced",
        "lastIndexChecked",
        "config",
        "cols",
        "proposedIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "tilesShifted",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Queen {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_queen : images.w_queen\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let blocked = false\n    let tilesAdvanced = 0\n    let lastIndexChecked = currentIndex\n    while(!blocked) { // move forward\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex + (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move right\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex + tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move left\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex - tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move back\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex - (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    let tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move forward right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move forward left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 7 && prevIndex % 8 ===0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Queen"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604591
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Rook.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Rook.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Rook.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Rook.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Rook.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Rook =\n/*#__PURE__*/\nfunction () {\n  function Rook(coords, pieceCode) {\n    _classCallCheck(this, Rook);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_rook : _ImageLoader[\"default\"].w_rook;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Rook, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var blocked = false;\n      var tilesAdvanced = 0;\n      var lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward\n        tilesAdvanced += _config[\"default\"].cols;\n        var proposedIndex = currentIndex + tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = proposedIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (pieceOnTile) {\n          if (player.ownsPiece(pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move back\n        tilesAdvanced += _config[\"default\"].cols;\n\n        var _proposedIndex = currentIndex - tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex;\n        var _pieceOnTile = board[_proposedIndex];\n\n        if (_pieceOnTile) {\n          if (player.ownsPiece(_pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move right\n        tilesAdvanced += 1;\n\n        var _proposedIndex2 = currentIndex + tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex2)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex2;\n        var _pieceOnTile2 = board[_proposedIndex2];\n\n        if (_pieceOnTile2) {\n          if (player.ownsPiece(_pieceOnTile2.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex2);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex2);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move left\n        tilesAdvanced += 1;\n\n        var _proposedIndex3 = currentIndex - tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex3)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex3;\n        var _pieceOnTile3 = board[_proposedIndex3];\n\n        if (_pieceOnTile3) {\n          if (player.ownsPiece(_pieceOnTile3.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex3);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex3);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows - 1) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Rook;\n}();\n\nvar _default = Rook;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Rook.js"
      ],
      "names": [
        "Rook",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_rook",
        "w_rook",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "blocked",
        "tilesAdvanced",
        "lastIndexChecked",
        "config",
        "cols",
        "proposedIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Rook {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_rook : images.w_rook\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let blocked = false\n    let tilesAdvanced = 0\n    let lastIndexChecked = currentIndex\n    while(!blocked) { // move forward\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex + (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move back\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex - (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move right\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex + tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move left\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex - tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows - 1) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Rook"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604594
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Engine.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Engine.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Engine.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Engine.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Engine.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = require(\"./ImageLoader\");\n\nvar _Input = _interopRequireDefault(require(\"./Input\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _Messager = _interopRequireDefault(require(\"./Messager\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Engine = function Engine(onStartUp, ctx) {\n  var _this = this;\n\n  _classCallCheck(this, Engine);\n\n  _defineProperty(this, \"startUp\", function () {\n    _this.onStartUp();\n\n    _this.lastUpdateTime = new Date().getTime();\n    _this.frameCounter = 0;\n    _this.frameTime = 0;\n    window.requestAnimationFrame(_this.loop);\n  });\n\n  _defineProperty(this, \"loop\", function () {\n    var currentTime = new Date().getTime();\n    var deltaTime = (currentTime - _this.lastUpdateTime) / 1000;\n    _this.lastUpdateTime = currentTime;\n    _this.frameCounter++;\n    _this.frameTime += deltaTime;\n\n    if (_this.frameTime >= .5) {\n      _this.frameTime = .5 - _this.frameTime;\n      _this.fps = _this.frameCounter * 2;\n      _this.frameCounter = 0;\n      _config[\"default\"].fpsTag.innerText = \"FPS: \".concat(_this.fps);\n    }\n\n    if (_this.update) {\n      _this.update();\n    }\n\n    if (_this.draw) {\n      _this.draw();\n    }\n\n    window.requestAnimationFrame(_this.loop);\n  });\n\n  this.ctx = ctx;\n  this.onStartUp = onStartUp;\n  this.fps = 0;\n  this.messager = new _Messager[\"default\"]();\n  new _Input[\"default\"](this.messager);\n  (0, _ImageLoader.loadImages)(this.startUp);\n};\n\nvar _default = Engine;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVuZ2luZS5qcyJdLCJuYW1lcyI6WyJFbmdpbmUiLCJvblN0YXJ0VXAiLCJjdHgiLCJsYXN0VXBkYXRlVGltZSIsIkRhdGUiLCJnZXRUaW1lIiwiZnJhbWVDb3VudGVyIiwiZnJhbWVUaW1lIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibG9vcCIsImN1cnJlbnRUaW1lIiwiZGVsdGFUaW1lIiwiZnBzIiwiY29uZmlnIiwiZnBzVGFnIiwiaW5uZXJUZXh0IiwidXBkYXRlIiwiZHJhdyIsIm1lc3NhZ2VyIiwiTWVzc2FnZXIiLCJJbnB1dCIsInN0YXJ0VXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7SUFFTUEsTSxHQUNKLGdCQUFZQyxTQUFaLEVBQXVCQyxHQUF2QixFQUE0QjtBQUFBOztBQUFBOztBQUFBLG1DQVNsQixZQUFNO0FBQ2QsSUFBQSxLQUFJLENBQUNELFNBQUw7O0FBQ0EsSUFBQSxLQUFJLENBQUNFLGNBQUwsR0FBc0IsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQXRCO0FBQ0EsSUFBQSxLQUFJLENBQUNDLFlBQUwsR0FBb0IsQ0FBcEI7QUFDQSxJQUFBLEtBQUksQ0FBQ0MsU0FBTCxHQUFpQixDQUFqQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLHFCQUFQLENBQTZCLEtBQUksQ0FBQ0MsSUFBbEM7QUFDRCxHQWYyQjs7QUFBQSxnQ0FpQnJCLFlBQU07QUFDWCxRQUFNQyxXQUFXLEdBQUcsSUFBSVAsSUFBSixHQUFXQyxPQUFYLEVBQXBCO0FBQ0EsUUFBTU8sU0FBUyxHQUFHLENBQUNELFdBQVcsR0FBRyxLQUFJLENBQUNSLGNBQXBCLElBQXNDLElBQXhEO0FBQ0EsSUFBQSxLQUFJLENBQUNBLGNBQUwsR0FBc0JRLFdBQXRCO0FBRUEsSUFBQSxLQUFJLENBQUNMLFlBQUw7QUFDQSxJQUFBLEtBQUksQ0FBQ0MsU0FBTCxJQUFrQkssU0FBbEI7O0FBRUEsUUFBRyxLQUFJLENBQUNMLFNBQUwsSUFBa0IsRUFBckIsRUFBeUI7QUFDdkIsTUFBQSxLQUFJLENBQUNBLFNBQUwsR0FBaUIsS0FBSyxLQUFJLENBQUNBLFNBQTNCO0FBQ0EsTUFBQSxLQUFJLENBQUNNLEdBQUwsR0FBVyxLQUFJLENBQUNQLFlBQUwsR0FBb0IsQ0FBL0I7QUFDQSxNQUFBLEtBQUksQ0FBQ0EsWUFBTCxHQUFvQixDQUFwQjtBQUNBUSx5QkFBT0MsTUFBUCxDQUFjQyxTQUFkLGtCQUFrQyxLQUFJLENBQUNILEdBQXZDO0FBQ0Q7O0FBRUQsUUFBRyxLQUFJLENBQUNJLE1BQVIsRUFBZ0I7QUFDZCxNQUFBLEtBQUksQ0FBQ0EsTUFBTDtBQUNEOztBQUVELFFBQUcsS0FBSSxDQUFDQyxJQUFSLEVBQWM7QUFDWixNQUFBLEtBQUksQ0FBQ0EsSUFBTDtBQUNEOztBQUNEVixJQUFBQSxNQUFNLENBQUNDLHFCQUFQLENBQTZCLEtBQUksQ0FBQ0MsSUFBbEM7QUFDRCxHQXhDMkI7O0FBQzFCLE9BQUtSLEdBQUwsR0FBV0EsR0FBWDtBQUNBLE9BQUtELFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsT0FBS1ksR0FBTCxHQUFXLENBQVg7QUFDQSxPQUFLTSxRQUFMLEdBQWdCLElBQUlDLG9CQUFKLEVBQWhCO0FBQ0EsTUFBSUMsaUJBQUosQ0FBVSxLQUFLRixRQUFmO0FBQ0EsK0JBQVcsS0FBS0csT0FBaEI7QUFDRCxDOztlQW9DWXRCLE0iLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbmllbHBlYWNoL0Rldi9kZXYtYXJjYWRlLWdhbWVzL0FyY2FkZSBDaGVzcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bG9hZEltYWdlc30gZnJvbSBcIi4vSW1hZ2VMb2FkZXJcIjtcbmltcG9ydCBJbnB1dCBmcm9tICcuL0lucHV0J1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZydcbmltcG9ydCBNZXNzYWdlciAgICAgICAgICAgIGZyb20gJy4vTWVzc2FnZXInXG5cbmNsYXNzIEVuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKG9uU3RhcnRVcCwgY3R4KSB7XG4gICAgdGhpcy5jdHggPSBjdHhcbiAgICB0aGlzLm9uU3RhcnRVcCA9IG9uU3RhcnRVcFxuICAgIHRoaXMuZnBzID0gMFxuICAgIHRoaXMubWVzc2FnZXIgPSBuZXcgTWVzc2FnZXIoKVxuICAgIG5ldyBJbnB1dCh0aGlzLm1lc3NhZ2VyKVxuICAgIGxvYWRJbWFnZXModGhpcy5zdGFydFVwKVxuICB9XG5cbiAgc3RhcnRVcCA9ICgpID0+IHtcbiAgICB0aGlzLm9uU3RhcnRVcCgpXG4gICAgdGhpcy5sYXN0VXBkYXRlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgdGhpcy5mcmFtZUNvdW50ZXIgPSAwXG4gICAgdGhpcy5mcmFtZVRpbWUgPSAwXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmxvb3ApXG4gIH1cblxuICBsb29wID0gKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICBjb25zdCBkZWx0YVRpbWUgPSAoY3VycmVudFRpbWUgLSB0aGlzLmxhc3RVcGRhdGVUaW1lKSAvIDEwMDBcbiAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gY3VycmVudFRpbWVcblxuICAgIHRoaXMuZnJhbWVDb3VudGVyKytcbiAgICB0aGlzLmZyYW1lVGltZSArPSBkZWx0YVRpbWVcblxuICAgIGlmKHRoaXMuZnJhbWVUaW1lID49IC41KSB7XG4gICAgICB0aGlzLmZyYW1lVGltZSA9IC41IC0gdGhpcy5mcmFtZVRpbWVcbiAgICAgIHRoaXMuZnBzID0gdGhpcy5mcmFtZUNvdW50ZXIgKiAyXG4gICAgICB0aGlzLmZyYW1lQ291bnRlciA9IDBcbiAgICAgIGNvbmZpZy5mcHNUYWcuaW5uZXJUZXh0ID0gYEZQUzogJHt0aGlzLmZwc31gXG4gICAgfVxuXG4gICAgaWYodGhpcy51cGRhdGUpIHtcbiAgICAgIHRoaXMudXBkYXRlKClcbiAgICB9XG5cbiAgICBpZih0aGlzLmRyYXcpIHtcbiAgICAgIHRoaXMuZHJhdygpXG4gICAgfVxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5sb29wKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVuZ2luZSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "Engine.js"
      ],
      "names": [
        "Engine",
        "onStartUp",
        "ctx",
        "lastUpdateTime",
        "Date",
        "getTime",
        "frameCounter",
        "frameTime",
        "window",
        "requestAnimationFrame",
        "loop",
        "currentTime",
        "deltaTime",
        "fps",
        "config",
        "fpsTag",
        "innerText",
        "update",
        "draw",
        "messager",
        "Messager",
        "Input",
        "startUp"
      ],
      "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;IAEMA,M,GACJ,gBAAYC,SAAZ,EAAuBC,GAAvB,EAA4B;AAAA;;AAAA;;AAAA,mCASlB,YAAM;AACd,IAAA,KAAI,CAACD,SAAL;;AACA,IAAA,KAAI,CAACE,cAAL,GAAsB,IAAIC,IAAJ,GAAWC,OAAX,EAAtB;AACA,IAAA,KAAI,CAACC,YAAL,GAAoB,CAApB;AACA,IAAA,KAAI,CAACC,SAAL,GAAiB,CAAjB;AACAC,IAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAI,CAACC,IAAlC;AACD,GAf2B;;AAAA,gCAiBrB,YAAM;AACX,QAAMC,WAAW,GAAG,IAAIP,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMO,SAAS,GAAG,CAACD,WAAW,GAAG,KAAI,CAACR,cAApB,IAAsC,IAAxD;AACA,IAAA,KAAI,CAACA,cAAL,GAAsBQ,WAAtB;AAEA,IAAA,KAAI,CAACL,YAAL;AACA,IAAA,KAAI,CAACC,SAAL,IAAkBK,SAAlB;;AAEA,QAAG,KAAI,CAACL,SAAL,IAAkB,EAArB,EAAyB;AACvB,MAAA,KAAI,CAACA,SAAL,GAAiB,KAAK,KAAI,CAACA,SAA3B;AACA,MAAA,KAAI,CAACM,GAAL,GAAW,KAAI,CAACP,YAAL,GAAoB,CAA/B;AACA,MAAA,KAAI,CAACA,YAAL,GAAoB,CAApB;AACAQ,yBAAOC,MAAP,CAAcC,SAAd,kBAAkC,KAAI,CAACH,GAAvC;AACD;;AAED,QAAG,KAAI,CAACI,MAAR,EAAgB;AACd,MAAA,KAAI,CAACA,MAAL;AACD;;AAED,QAAG,KAAI,CAACC,IAAR,EAAc;AACZ,MAAA,KAAI,CAACA,IAAL;AACD;;AACDV,IAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAI,CAACC,IAAlC;AACD,GAxC2B;;AAC1B,OAAKR,GAAL,GAAWA,GAAX;AACA,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKY,GAAL,GAAW,CAAX;AACA,OAAKM,QAAL,GAAgB,IAAIC,oBAAJ,EAAhB;AACA,MAAIC,iBAAJ,CAAU,KAAKF,QAAf;AACA,+BAAW,KAAKG,OAAhB;AACD,C;;eAoCYtB,M",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import {loadImages} from \"./ImageLoader\";\nimport Input from './Input'\nimport config from './config'\nimport Messager            from './Messager'\n\nclass Engine {\n  constructor(onStartUp, ctx) {\n    this.ctx = ctx\n    this.onStartUp = onStartUp\n    this.fps = 0\n    this.messager = new Messager()\n    new Input(this.messager)\n    loadImages(this.startUp)\n  }\n\n  startUp = () => {\n    this.onStartUp()\n    this.lastUpdateTime = new Date().getTime()\n    this.frameCounter = 0\n    this.frameTime = 0\n    window.requestAnimationFrame(this.loop)\n  }\n\n  loop = () => {\n    const currentTime = new Date().getTime()\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000\n    this.lastUpdateTime = currentTime\n\n    this.frameCounter++\n    this.frameTime += deltaTime\n\n    if(this.frameTime >= .5) {\n      this.frameTime = .5 - this.frameTime\n      this.fps = this.frameCounter * 2\n      this.frameCounter = 0\n      config.fpsTag.innerText = `FPS: ${this.fps}`\n    }\n\n    if(this.update) {\n      this.update()\n    }\n\n    if(this.draw) {\n      this.draw()\n    }\n    window.requestAnimationFrame(this.loop)\n  }\n}\n\nexport default Engine"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Input.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Input.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Input.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Input.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Input.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Input =\n/*#__PURE__*/\nfunction () {\n  function Input(messager) {\n    _classCallCheck(this, Input);\n\n    this.messager = messager;\n    this.setupEventListeners();\n  }\n\n  _createClass(Input, [{\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n\n      document.onkeydown = function (evt) {\n        _this.messager.post({\n          type: _config[\"default\"].messageTypes.keyDown,\n          keyCode: evt.keyCode\n        });\n      };\n    }\n  }]);\n\n  return Input;\n}();\n\nvar _default = Input;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklucHV0LmpzIl0sIm5hbWVzIjpbIklucHV0IiwibWVzc2FnZXIiLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwiZG9jdW1lbnQiLCJvbmtleWRvd24iLCJldnQiLCJwb3N0IiwidHlwZSIsImNvbmZpZyIsIm1lc3NhZ2VUeXBlcyIsImtleURvd24iLCJrZXlDb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7SUFFTUEsSzs7O0FBQ0osaUJBQVlDLFFBQVosRUFBc0I7QUFBQTs7QUFDcEIsU0FBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxtQkFBTDtBQUNEOzs7OzBDQUVxQjtBQUFBOztBQUNwQkMsTUFBQUEsUUFBUSxDQUFDQyxTQUFULEdBQXFCLFVBQUNDLEdBQUQsRUFBUztBQUM1QixRQUFBLEtBQUksQ0FBQ0osUUFBTCxDQUFjSyxJQUFkLENBQW1CO0FBQUNDLFVBQUFBLElBQUksRUFBRUMsbUJBQU9DLFlBQVAsQ0FBb0JDLE9BQTNCO0FBQW9DQyxVQUFBQSxPQUFPLEVBQUVOLEdBQUcsQ0FBQ007QUFBakQsU0FBbkI7QUFDRCxPQUZEO0FBR0Q7Ozs7OztlQUdZWCxLIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYW5pZWxwZWFjaC9EZXYvZGV2LWFyY2FkZS1nYW1lcy9BcmNhZGUgQ2hlc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJ1xuXG5jbGFzcyBJbnB1dCB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2VyKSB7XG4gICAgdGhpcy5tZXNzYWdlciA9IG1lc3NhZ2VyXG4gICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKClcbiAgfVxuXG4gIHNldHVwRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gKGV2dCkgPT4ge1xuICAgICAgdGhpcy5tZXNzYWdlci5wb3N0KHt0eXBlOiBjb25maWcubWVzc2FnZVR5cGVzLmtleURvd24sIGtleUNvZGU6IGV2dC5rZXlDb2RlfSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5wdXQiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "Input.js"
      ],
      "names": [
        "Input",
        "messager",
        "setupEventListeners",
        "document",
        "onkeydown",
        "evt",
        "post",
        "type",
        "config",
        "messageTypes",
        "keyDown",
        "keyCode"
      ],
      "mappings": ";;;;;;;AAAA;;;;;;;;;;IAEMA,K;;;AACJ,iBAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,mBAAL;AACD;;;;0CAEqB;AAAA;;AACpBC,MAAAA,QAAQ,CAACC,SAAT,GAAqB,UAACC,GAAD,EAAS;AAC5B,QAAA,KAAI,CAACJ,QAAL,CAAcK,IAAd,CAAmB;AAACC,UAAAA,IAAI,EAAEC,mBAAOC,YAAP,CAAoBC,OAA3B;AAAoCC,UAAAA,OAAO,EAAEN,GAAG,CAACM;AAAjD,SAAnB;AACD,OAFD;AAGD;;;;;;eAGYX,K",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import config from './config'\n\nclass Input {\n  constructor(messager) {\n    this.messager = messager\n    this.setupEventListeners()\n  }\n\n  setupEventListeners() {\n    document.onkeydown = (evt) => {\n      this.messager.post({type: config.messageTypes.keyDown, keyCode: evt.keyCode})\n    }\n  }\n}\n\nexport default Input"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Messager.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Messager.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Messager.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Messager.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Messager.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Messager =\n/*#__PURE__*/\nfunction () {\n  function Messager() {\n    _classCallCheck(this, Messager);\n\n    this.subscribers = [];\n  }\n\n  _createClass(Messager, [{\n    key: \"subscribe\",\n    value: function subscribe(subscriber) {\n      if (this.subscribers.indexOf(subscriber) < 0) {\n        this.subscribers.push(subscriber);\n        console.log('subscribed');\n      }\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(subscriber) {\n      var subIndex = this.subscribers.indexOf(subscriber);\n      this.subscribers.splice(subIndex, 1);\n    }\n  }, {\n    key: \"post\",\n    value: function post(msg) {\n      this.subscribers.forEach(function (sub) {\n        sub.handleMsg(msg);\n      });\n    }\n  }]);\n\n  return Messager;\n}();\n\nvar _default = Messager;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1lc3NhZ2VyLmpzIl0sIm5hbWVzIjpbIk1lc3NhZ2VyIiwic3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVyIiwiaW5kZXhPZiIsInB1c2giLCJjb25zb2xlIiwibG9nIiwic3ViSW5kZXgiLCJzcGxpY2UiLCJtc2ciLCJmb3JFYWNoIiwic3ViIiwiaGFuZGxlTXNnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0lBQU1BLFE7OztBQUNKLHNCQUFjO0FBQUE7O0FBQ1osU0FBS0MsV0FBTCxHQUFtQixFQUFuQjtBQUNEOzs7OzhCQUVTQyxVLEVBQVk7QUFDcEIsVUFBRyxLQUFLRCxXQUFMLENBQWlCRSxPQUFqQixDQUF5QkQsVUFBekIsSUFBdUMsQ0FBMUMsRUFBNkM7QUFDM0MsYUFBS0QsV0FBTCxDQUFpQkcsSUFBakIsQ0FBc0JGLFVBQXRCO0FBQ0FHLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFlBQVo7QUFDRDtBQUNGOzs7Z0NBRVdKLFUsRUFBWTtBQUN0QixVQUFJSyxRQUFRLEdBQUcsS0FBS04sV0FBTCxDQUFpQkUsT0FBakIsQ0FBeUJELFVBQXpCLENBQWY7QUFDQSxXQUFLRCxXQUFMLENBQWlCTyxNQUFqQixDQUF3QkQsUUFBeEIsRUFBa0MsQ0FBbEM7QUFDRDs7O3lCQUVJRSxHLEVBQUs7QUFDUixXQUFLUixXQUFMLENBQWlCUyxPQUFqQixDQUF5QixVQUFBQyxHQUFHLEVBQUk7QUFDOUJBLFFBQUFBLEdBQUcsQ0FBQ0MsU0FBSixDQUFjSCxHQUFkO0FBQ0QsT0FGRDtBQUdEOzs7Ozs7ZUFHWVQsUSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGFuaWVscGVhY2gvRGV2L2Rldi1hcmNhZGUtZ2FtZXMvQXJjYWRlIENoZXNzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTWVzc2FnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gW11cbiAgfVxuXG4gIHN1YnNjcmliZShzdWJzY3JpYmVyKSB7XG4gICAgaWYodGhpcy5zdWJzY3JpYmVycy5pbmRleE9mKHN1YnNjcmliZXIpIDwgMCkge1xuICAgICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmliZXIpXG4gICAgICBjb25zb2xlLmxvZygnc3Vic2NyaWJlZCcpXG4gICAgfVxuICB9XG5cbiAgdW5zdWJzY3JpYmUoc3Vic2NyaWJlcikge1xuICAgIGxldCBzdWJJbmRleCA9IHRoaXMuc3Vic2NyaWJlcnMuaW5kZXhPZihzdWJzY3JpYmVyKVxuICAgIHRoaXMuc3Vic2NyaWJlcnMuc3BsaWNlKHN1YkluZGV4LCAxKVxuICB9XG5cbiAgcG9zdChtc2cpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goc3ViID0+IHtcbiAgICAgIHN1Yi5oYW5kbGVNc2cobXNnKVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZXIiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "Messager.js"
      ],
      "names": [
        "Messager",
        "subscribers",
        "subscriber",
        "indexOf",
        "push",
        "console",
        "log",
        "subIndex",
        "splice",
        "msg",
        "forEach",
        "sub",
        "handleMsg"
      ],
      "mappings": ";;;;;;;;;;;;;IAAMA,Q;;;AACJ,sBAAc;AAAA;;AACZ,SAAKC,WAAL,GAAmB,EAAnB;AACD;;;;8BAESC,U,EAAY;AACpB,UAAG,KAAKD,WAAL,CAAiBE,OAAjB,CAAyBD,UAAzB,IAAuC,CAA1C,EAA6C;AAC3C,aAAKD,WAAL,CAAiBG,IAAjB,CAAsBF,UAAtB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD;AACF;;;gCAEWJ,U,EAAY;AACtB,UAAIK,QAAQ,GAAG,KAAKN,WAAL,CAAiBE,OAAjB,CAAyBD,UAAzB,CAAf;AACA,WAAKD,WAAL,CAAiBO,MAAjB,CAAwBD,QAAxB,EAAkC,CAAlC;AACD;;;yBAEIE,G,EAAK;AACR,WAAKR,WAAL,CAAiBS,OAAjB,CAAyB,UAAAC,GAAG,EAAI;AAC9BA,QAAAA,GAAG,CAACC,SAAJ,CAAcH,GAAd;AACD,OAFD;AAGD;;;;;;eAGYT,Q",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "class Messager {\n  constructor() {\n    this.subscribers = []\n  }\n\n  subscribe(subscriber) {\n    if(this.subscribers.indexOf(subscriber) < 0) {\n      this.subscribers.push(subscriber)\n      console.log('subscribed')\n    }\n  }\n\n  unsubscribe(subscriber) {\n    let subIndex = this.subscribers.indexOf(subscriber)\n    this.subscribers.splice(subIndex, 1)\n  }\n\n  post(msg) {\n    this.subscribers.forEach(sub => {\n      sub.handleMsg(msg)\n    })\n  }\n}\n\nexport default Messager"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604588
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"filename\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Player.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Player.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Player.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess/Player.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
        "sourceFileName": "Player.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar hm_players = 0;\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  function Player(keymap, messager) {\n    _classCallCheck(this, Player);\n\n    this.keymap = keymap;\n    this.messager = messager;\n    hm_players++;\n    this.playerNumber = hm_players;\n    this.currentTile = this.playerNumber === 1 ? 63 : 0;\n    this.heldPiece = null;\n    this.magnitude = this.playerNumber === 1 ? -1 : 1;\n    this.kingCode = _config[\"default\"].pieces_codes.KING * this.magnitude;\n    this.inCheck = false;\n    this.inCheckMate = false;\n    this.infoText = 'Good Luck!';\n    this.gameOver = false;\n  }\n\n  _createClass(Player, [{\n    key: \"update\",\n    value: function update(cb, board, otherPlayer) {\n      this.endTurn = cb;\n      this.board = board;\n      this.opponent = otherPlayer;\n      _config[\"default\"].turnTag.innerText = \"Player \".concat(this.playerNumber, \"'s turn\");\n      _config[\"default\"].infoTag.innerText = this.infoText;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var currentTileCoords = (0, _utils.indexToCoords)(this.currentTile);\n      ctx.fillStyle = 'cornflowerblue';\n      ctx.fillRect(currentTileCoords.x, currentTileCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n\n      if (this.heldPiece) {\n        ctx.fillStyle = 'rgba(80, 100, 230, 0.3)';\n        this.heldPiece.showPossibleMoves(this, this.board, ctx);\n      }\n\n      if (this.inCheck) {\n        ctx.fillStyle = 'rgba(193, 66, 66, 0.57)';\n        var kingCoords = (0, _utils.indexToCoords)(this.kingIndex);\n        ctx.fillRect(kingCoords.x, kingCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      }\n    }\n  }, {\n    key: \"selectTile\",\n    value: function selectTile(selectedTileIndex) {\n      if (this.heldPiece) {\n        if (this.heldPiece.getPossibleMoves(this, this.board).indexOf(selectedTileIndex) >= 0) {\n          var pieceOnSelectedTile = this.board[selectedTileIndex];\n\n          var _this$movePiece = this.movePiece(selectedTileIndex),\n              prevCoords = _this$movePiece.prevCoords,\n              movedPiece = _this$movePiece.movedPiece;\n\n          this.checkIfKingInCheck();\n\n          if (this.inCheck) {\n            var prevIndex = (0, _utils.coordsToIndex)(prevCoords.row, prevCoords.col);\n            this.board[prevIndex] = movedPiece;\n            this.board[selectedTileIndex] = pieceOnSelectedTile;\n            movedPiece.move(prevCoords);\n            this.infoText = \"You cannot move there, you must protect your King\";\n          } else {\n            this.endTurn();\n          }\n        } else if (this.board[selectedTileIndex] && this.ownsPiece(this.board[selectedTileIndex].code)) {\n          this.heldPiece = this.board[selectedTileIndex];\n        } else {\n          this.infoText = \"You cannot move there\";\n        }\n      } else if (this.ownsPiece(this.board[selectedTileIndex].code)) {\n        this.heldPiece = this.board[selectedTileIndex];\n      } else {\n        this.infoText = \"That is not yours\";\n      }\n    }\n  }, {\n    key: \"movePiece\",\n    value: function movePiece(selectedTileIndex) {\n      var attackedPiece = this.board[selectedTileIndex];\n\n      if (attackedPiece && Math.abs(attackedPiece.code) === _config[\"default\"].pieces_codes.KING) {\n        this.messager.post({\n          type: _config[\"default\"].messageTypes.gameOver\n        });\n      }\n\n      this.board[(0, _utils.coordsToIndex)(this.heldPiece.row, this.heldPiece.col)] = null;\n      var prevCoords = {\n        x: this.heldPiece.x,\n        y: this.heldPiece.y,\n        col: this.heldPiece.col,\n        row: this.heldPiece.row\n      };\n      var coords = (0, _utils.indexToCoords)(selectedTileIndex);\n      coords.row = coords.y / _config[\"default\"].tileHeight;\n      coords.col = coords.x / _config[\"default\"].tileWidth;\n      this.heldPiece.move(coords);\n      this.board[selectedTileIndex] = this.heldPiece;\n      var movedPiece = this.heldPiece;\n      this.heldPiece = null;\n      return {\n        prevCoords: prevCoords,\n        movedPiece: movedPiece\n      };\n    }\n  }, {\n    key: \"checkIfKingInCheck\",\n    value: function checkIfKingInCheck() {\n      var _this = this;\n\n      var inCheck = false;\n      this.infoText = '';\n\n      for (var i = 0; i < this.board.length; i++) {\n        var piece = this.board[i];\n\n        if (piece) {\n          if (!this.ownsPiece(piece.code)) {\n            piece.getPossibleMoves(this.opponent, this.board).map(function (index) {\n              var pieceUnderAttack = _this.board[index];\n\n              if (pieceUnderAttack && pieceUnderAttack.code === _this.kingCode) {\n                inCheck = true;\n                _this.kingIndex = index;\n                _this.infoText = \"Your King is under attack!\";\n              }\n            });\n          }\n        }\n      }\n\n      this.inCheck = inCheck;\n    }\n  }, {\n    key: \"ownsPiece\",\n    value: function ownsPiece(pieceCode) {\n      if (this.playerNumber === 1) {\n        return pieceCode < 0;\n      } else if (this.playerNumber === 2) {\n        return pieceCode > 0;\n      }\n    }\n  }, {\n    key: \"handleMsg\",\n    value: function handleMsg(msg) {\n      switch (msg.type) {\n        case _config[\"default\"].messageTypes.keyDown:\n          if (!this.gameOver) {\n            switch (msg.keyCode) {\n              case this.keymap.up:\n                if (this.currentTile - 8 >= 0) {\n                  this.currentTile -= 8;\n                }\n\n                break;\n\n              case this.keymap.down:\n                if (this.currentTile + 8 <= 63) {\n                  this.currentTile += 8;\n                }\n\n                break;\n\n              case this.keymap.left:\n                if (this.currentTile % 8 === 0) {\n                  this.currentTile += 7;\n                } else {\n                  this.currentTile--;\n                }\n\n                break;\n\n              case this.keymap.right:\n                if ((this.currentTile + 1) % 8 === 0) {\n                  this.currentTile -= 7;\n                } else {\n                  this.currentTile++;\n                }\n\n                break;\n\n              case this.keymap.select:\n                this.selectTile(this.currentTile);\n                break;\n\n              default: // pass\n\n            }\n          }\n\n          break;\n\n        case _config[\"default\"].messageTypes.gameOver:\n          this.gameOver = true;\n\n        default: // pass\n\n      }\n    }\n  }]);\n\n  return Player;\n}();\n\nvar _default = Player;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBsYXllci5qcyJdLCJuYW1lcyI6WyJobV9wbGF5ZXJzIiwiUGxheWVyIiwia2V5bWFwIiwibWVzc2FnZXIiLCJwbGF5ZXJOdW1iZXIiLCJjdXJyZW50VGlsZSIsImhlbGRQaWVjZSIsIm1hZ25pdHVkZSIsImtpbmdDb2RlIiwiY29uZmlnIiwicGllY2VzX2NvZGVzIiwiS0lORyIsImluQ2hlY2siLCJpbkNoZWNrTWF0ZSIsImluZm9UZXh0IiwiZ2FtZU92ZXIiLCJjYiIsImJvYXJkIiwib3RoZXJQbGF5ZXIiLCJlbmRUdXJuIiwib3Bwb25lbnQiLCJ0dXJuVGFnIiwiaW5uZXJUZXh0IiwiaW5mb1RhZyIsImN0eCIsImN1cnJlbnRUaWxlQ29vcmRzIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJ4IiwieSIsInRpbGVXaWR0aCIsInRpbGVIZWlnaHQiLCJzaG93UG9zc2libGVNb3ZlcyIsImtpbmdDb29yZHMiLCJraW5nSW5kZXgiLCJzZWxlY3RlZFRpbGVJbmRleCIsImdldFBvc3NpYmxlTW92ZXMiLCJpbmRleE9mIiwicGllY2VPblNlbGVjdGVkVGlsZSIsIm1vdmVQaWVjZSIsInByZXZDb29yZHMiLCJtb3ZlZFBpZWNlIiwiY2hlY2tJZktpbmdJbkNoZWNrIiwicHJldkluZGV4Iiwicm93IiwiY29sIiwibW92ZSIsIm93bnNQaWVjZSIsImNvZGUiLCJhdHRhY2tlZFBpZWNlIiwiTWF0aCIsImFicyIsInBvc3QiLCJ0eXBlIiwibWVzc2FnZVR5cGVzIiwiY29vcmRzIiwiaSIsImxlbmd0aCIsInBpZWNlIiwibWFwIiwiaW5kZXgiLCJwaWVjZVVuZGVyQXR0YWNrIiwicGllY2VDb2RlIiwibXNnIiwia2V5RG93biIsImtleUNvZGUiLCJ1cCIsImRvd24iLCJsZWZ0IiwicmlnaHQiLCJzZWxlY3QiLCJzZWxlY3RUaWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7QUFFQSxJQUFJQSxVQUFVLEdBQUcsQ0FBakI7O0lBRU1DLE07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QW9CLENBQXBCO0FBQ0Q7O0FBQ0Q7O0FBQ0YsbUJBQUssS0FBS0gsTUFBTCxDQUFZaUUsSUFBakI7QUFDRSxvQkFBRyxLQUFLOUQsV0FBTCxHQUFtQixDQUFuQixJQUF3QixFQUEzQixFQUErQjtBQUM3Qix1QkFBS0EsV0FBTCxJQUFvQixDQUFwQjtBQUNEOztBQUNEOztBQUNGLG1CQUFLLEtBQUtILE1BQUwsQ0FBWWtFLElBQWpCO0FBQ0Usb0JBQUksS0FBSy9ELFdBQUwsR0FBbUIsQ0FBbkIsS0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIsdUJBQUtBLFdBQUwsSUFBb0IsQ0FBcEI7QUFDRCxpQkFGRCxNQUVPO0FBQ0wsdUJBQUtBLFdBQUw7QUFDRDs7QUFDRDs7QUFDRixtQkFBSyxLQUFLSCxNQUFMLENBQVltRSxLQUFqQjtBQUNFLG9CQUFHLENBQUMsS0FBS2hFLFdBQUwsR0FBbUIsQ0FBcEIsSUFBeUIsQ0FBekIsS0FBK0IsQ0FBbEMsRUFBcUM7QUFDbkMsdUJBQUtBLFdBQUwsSUFBb0IsQ0FBcEI7QUFDRCxpQkFGRCxNQUVPO0FBQ0wsdUJBQUtBLFdBQUw7QUFDRDs7QUFDRDs7QUFDRixtQkFBSyxLQUFLSCxNQUFMLENBQVlvRSxNQUFqQjtBQUNFLHFCQUFLQyxVQUFMLENBQWdCLEtBQUtsRSxXQUFyQjtBQUNBOztBQUNGLHNCQTVCRixDQTZCSTs7QUE3Qko7QUErQkQ7O0FBQ0Q7O0FBQ0YsYUFBS0ksbUJBQU82QyxZQUFQLENBQW9CdkMsUUFBekI7QUFDRSxlQUFLQSxRQUFMLEdBQWdCLElBQWhCOztBQUNGLGdCQXRDRixDQXVDSTs7QUF2Q0o7QUF5Q0Q7Ozs7OztlQUdZZCxNIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYW5pZWxwZWFjaC9EZXYvZGV2LWFyY2FkZS1nYW1lcy9BcmNhZGUgQ2hlc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi9jb25maWcnXG5pbXBvcnQgeyBjb29yZHNUb0luZGV4LCBpbmRleFRvQ29vcmRzIH0gZnJvbSAnLi91dGlscydcblxubGV0IGhtX3BsYXllcnMgPSAwO1xuXG5jbGFzcyBQbGF5ZXIge1xuXG4gIGNvbnN0cnVjdG9yKGtleW1hcCwgbWVzc2FnZXIpIHtcbiAgICB0aGlzLmtleW1hcCA9IGtleW1hcFxuICAgIHRoaXMubWVzc2FnZXIgPSBtZXNzYWdlclxuICAgIGhtX3BsYXllcnMrK1xuICAgIHRoaXMucGxheWVyTnVtYmVyID0gaG1fcGxheWVyc1xuICAgIHRoaXMuY3VycmVudFRpbGUgPSB0aGlzLnBsYXllck51bWJlciA9PT0gMSA/IDYzIDogMFxuICAgIHRoaXMuaGVsZFBpZWNlID0gbnVsbFxuICAgIHRoaXMubWFnbml0dWRlID0gdGhpcy5wbGF5ZXJOdW1iZXIgPT09IDEgPyAtMSA6IDFcbiAgICB0aGlzLmtpbmdDb2RlID0gY29uZmlnLnBpZWNlc19jb2Rlcy5LSU5HICogdGhpcy5tYWduaXR1ZGVcbiAgICB0aGlzLmluQ2hlY2sgPSBmYWxzZVxuICAgIHRoaXMuaW5DaGVja01hdGUgPSBmYWxzZVxuICAgIHRoaXMuaW5mb1RleHQgPSAnR29vZCBMdWNrISdcbiAgICB0aGlzLmdhbWVPdmVyID0gZmFsc2VcbiAgfVxuXG4gIHVwZGF0ZShjYiwgYm9hcmQsIG90aGVyUGxheWVyKSB7XG4gICAgdGhpcy5lbmRUdXJuID0gY2JcbiAgICB0aGlzLmJvYXJkID0gYm9hcmRcbiAgICB0aGlzLm9wcG9uZW50ID0gb3RoZXJQbGF5ZXJcblxuICAgIGNvbmZpZy50dXJuVGFnLmlubmVyVGV4dCA9IGBQbGF5ZXIgJHt0aGlzLnBsYXllck51bWJlcn0ncyB0dXJuYFxuICAgIGNvbmZpZy5pbmZvVGFnLmlubmVyVGV4dCA9IHRoaXMuaW5mb1RleHRcbiAgfVxuXG4gIGRyYXcoY3R4KSB7XG4gICAgbGV0IGN1cnJlbnRUaWxlQ29vcmRzID0gaW5kZXhUb0Nvb3Jkcyh0aGlzLmN1cnJlbnRUaWxlKVxuICAgIGN0eC5maWxsU3R5bGUgPSAnY29ybmZsb3dlcmJsdWUnXG4gICAgY3R4LmZpbGxSZWN0KGN1cnJlbnRUaWxlQ29vcmRzLngsIGN1cnJlbnRUaWxlQ29vcmRzLnksIGNvbmZpZy50aWxlV2lkdGgsIGNvbmZpZy50aWxlSGVpZ2h0KVxuXG4gICAgaWYgKHRoaXMuaGVsZFBpZWNlKSB7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoODAsIDEwMCwgMjMwLCAwLjMpJ1xuICAgICAgdGhpcy5oZWxkUGllY2Uuc2hvd1Bvc3NpYmxlTW92ZXModGhpcywgdGhpcy5ib2FyZCwgY3R4KVxuICAgIH1cblxuICAgIGlmICh0aGlzLmluQ2hlY2spIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgxOTMsIDY2LCA2NiwgMC41NyknXG4gICAgICBsZXQga2luZ0Nvb3JkcyA9IGluZGV4VG9Db29yZHModGhpcy5raW5nSW5kZXgpXG4gICAgICBjdHguZmlsbFJlY3Qoa2luZ0Nvb3Jkcy54LCBraW5nQ29vcmRzLnksIGNvbmZpZy50aWxlV2lkdGgsIGNvbmZpZy50aWxlSGVpZ2h0KVxuICAgIH1cbiAgfVxuXG4gIHNlbGVjdFRpbGUoc2VsZWN0ZWRUaWxlSW5kZXgpIHtcbiAgICBpZiAodGhpcy5oZWxkUGllY2UpIHtcbiAgICAgIGlmICh0aGlzLmhlbGRQaWVjZS5nZXRQb3NzaWJsZU1vdmVzKHRoaXMsIHRoaXMuYm9hcmQpLmluZGV4T2Yoc2VsZWN0ZWRUaWxlSW5kZXgpID49IDApIHtcbiAgICAgICAgbGV0IHBpZWNlT25TZWxlY3RlZFRpbGUgPSB0aGlzLmJvYXJkW3NlbGVjdGVkVGlsZUluZGV4XVxuICAgICAgICBsZXQgeyBwcmV2Q29vcmRzLCBtb3ZlZFBpZWNlIH0gPSB0aGlzLm1vdmVQaWVjZShzZWxlY3RlZFRpbGVJbmRleClcbiAgICAgICAgdGhpcy5jaGVja0lmS2luZ0luQ2hlY2soKVxuICAgICAgICBpZiAodGhpcy5pbkNoZWNrKSB7XG4gICAgICAgICAgbGV0IHByZXZJbmRleCA9IGNvb3Jkc1RvSW5kZXgocHJldkNvb3Jkcy5yb3csIHByZXZDb29yZHMuY29sKVxuICAgICAgICAgIHRoaXMuYm9hcmRbcHJldkluZGV4XSA9IG1vdmVkUGllY2VcbiAgICAgICAgICB0aGlzLmJvYXJkW3NlbGVjdGVkVGlsZUluZGV4XSA9IHBpZWNlT25TZWxlY3RlZFRpbGVcbiAgICAgICAgICBtb3ZlZFBpZWNlLm1vdmUocHJldkNvb3JkcylcbiAgICAgICAgICB0aGlzLmluZm9UZXh0ID0gYFlvdSBjYW5ub3QgbW92ZSB0aGVyZSwgeW91IG11c3QgcHJvdGVjdCB5b3VyIEtpbmdgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbmRUdXJuKClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmJvYXJkW3NlbGVjdGVkVGlsZUluZGV4XSAmJiB0aGlzLm93bnNQaWVjZSh0aGlzLmJvYXJkW3NlbGVjdGVkVGlsZUluZGV4XS5jb2RlKSkge1xuICAgICAgICB0aGlzLmhlbGRQaWVjZSA9IHRoaXMuYm9hcmRbc2VsZWN0ZWRUaWxlSW5kZXhdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluZm9UZXh0ID0gYFlvdSBjYW5ub3QgbW92ZSB0aGVyZWBcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMub3duc1BpZWNlKHRoaXMuYm9hcmRbc2VsZWN0ZWRUaWxlSW5kZXhdLmNvZGUpKXtcbiAgICAgIHRoaXMuaGVsZFBpZWNlID0gdGhpcy5ib2FyZFtzZWxlY3RlZFRpbGVJbmRleF1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbmZvVGV4dCA9IGBUaGF0IGlzIG5vdCB5b3Vyc2BcbiAgICB9XG4gIH1cblxuICBtb3ZlUGllY2Uoc2VsZWN0ZWRUaWxlSW5kZXgpIHtcbiAgICBsZXQgYXR0YWNrZWRQaWVjZSA9IHRoaXMuYm9hcmRbc2VsZWN0ZWRUaWxlSW5kZXhdXG4gICAgaWYgKGF0dGFja2VkUGllY2UgJiYgTWF0aC5hYnMoYXR0YWNrZWRQaWVjZS5jb2RlKSA9PT0gY29uZmlnLnBpZWNlc19jb2Rlcy5LSU5HKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VyLnBvc3Qoe3R5cGU6IGNvbmZpZy5tZXNzYWdlVHlwZXMuZ2FtZU92ZXJ9KVxuICAgIH1cbiAgICB0aGlzLmJvYXJkW2Nvb3Jkc1RvSW5kZXgodGhpcy5oZWxkUGllY2Uucm93LCB0aGlzLmhlbGRQaWVjZS5jb2wpXSA9IG51bGxcbiAgICBsZXQgcHJldkNvb3JkcyA9IHsgeDogdGhpcy5oZWxkUGllY2UueCwgeTogdGhpcy5oZWxkUGllY2UueSwgY29sOiB0aGlzLmhlbGRQaWVjZS5jb2wsIHJvdzogdGhpcy5oZWxkUGllY2Uucm93IH1cbiAgICBsZXQgY29vcmRzID0gaW5kZXhUb0Nvb3JkcyhzZWxlY3RlZFRpbGVJbmRleClcbiAgICBjb29yZHMucm93ID0gY29vcmRzLnkgLyBjb25maWcudGlsZUhlaWdodFxuICAgIGNvb3Jkcy5jb2wgPSBjb29yZHMueCAvIGNvbmZpZy50aWxlV2lkdGhcbiAgICB0aGlzLmhlbGRQaWVjZS5tb3ZlKGNvb3JkcylcbiAgICB0aGlzLmJvYXJkW3NlbGVjdGVkVGlsZUluZGV4XSA9IHRoaXMuaGVsZFBpZWNlXG4gICAgbGV0IG1vdmVkUGllY2UgPSB0aGlzLmhlbGRQaWVjZVxuICAgIHRoaXMuaGVsZFBpZWNlID0gbnVsbFxuICAgIHJldHVybiB7IHByZXZDb29yZHMsIG1vdmVkUGllY2UgfVxuICB9XG5cbiAgY2hlY2tJZktpbmdJbkNoZWNrKCkge1xuICAgIGxldCBpbkNoZWNrID0gZmFsc2VcbiAgICB0aGlzLmluZm9UZXh0ID0gJydcbiAgICBmb3IobGV0IGk9MDtpPHRoaXMuYm9hcmQubGVuZ3RoO2krKykge1xuICAgICAgbGV0IHBpZWNlID0gdGhpcy5ib2FyZFtpXVxuICAgICAgaWYgKHBpZWNlKSB7XG4gICAgICAgIGlmICghdGhpcy5vd25zUGllY2UocGllY2UuY29kZSkpIHtcbiAgICAgICAgICBwaWVjZS5nZXRQb3NzaWJsZU1vdmVzKHRoaXMub3Bwb25lbnQsIHRoaXMuYm9hcmQpLm1hcChpbmRleCA9PiB7XG4gICAgICAgICAgICBsZXQgcGllY2VVbmRlckF0dGFjayA9IHRoaXMuYm9hcmRbaW5kZXhdXG4gICAgICAgICAgICBpZiAocGllY2VVbmRlckF0dGFjayAmJiBwaWVjZVVuZGVyQXR0YWNrLmNvZGUgPT09IHRoaXMua2luZ0NvZGUpIHtcbiAgICAgICAgICAgICAgaW5DaGVjayA9IHRydWVcbiAgICAgICAgICAgICAgdGhpcy5raW5nSW5kZXggPSBpbmRleFxuICAgICAgICAgICAgICB0aGlzLmluZm9UZXh0ID0gYFlvdXIgS2luZyBpcyB1bmRlciBhdHRhY2shYFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5pbkNoZWNrID0gaW5DaGVja1xuICB9XG5cbiAgb3duc1BpZWNlKHBpZWNlQ29kZSkge1xuICAgIGlmICh0aGlzLnBsYXllck51bWJlciA9PT0gMSkge1xuICAgICAgcmV0dXJuIHBpZWNlQ29kZSA8IDBcbiAgICB9IGVsc2UgaWYgKHRoaXMucGxheWVyTnVtYmVyID09PSAyKSB7XG4gICAgICByZXR1cm4gcGllY2VDb2RlID4gMFxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZU1zZyhtc2cpIHtcbiAgICBzd2l0Y2gobXNnLnR5cGUpIHtcbiAgICAgIGNhc2UgY29uZmlnLm1lc3NhZ2VUeXBlcy5rZXlEb3duOlxuICAgICAgICBpZiAoIXRoaXMuZ2FtZU92ZXIpIHtcbiAgICAgICAgICBzd2l0Y2ggKG1zZy5rZXlDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIHRoaXMua2V5bWFwLnVwOlxuICAgICAgICAgICAgICBpZih0aGlzLmN1cnJlbnRUaWxlIC0gOCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VGlsZSAtPSA4XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgdGhpcy5rZXltYXAuZG93bjpcbiAgICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50VGlsZSArIDggPD0gNjMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaWxlICs9IDhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSB0aGlzLmtleW1hcC5sZWZ0OlxuICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50VGlsZSAlIDggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaWxlICs9IDdcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaWxlLS1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSB0aGlzLmtleW1hcC5yaWdodDpcbiAgICAgICAgICAgICAgaWYoKHRoaXMuY3VycmVudFRpbGUgKyAxKSAlIDggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaWxlIC09IDdcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaWxlKytcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSB0aGlzLmtleW1hcC5zZWxlY3Q6XG4gICAgICAgICAgICAgIHRoaXMuc2VsZWN0VGlsZSh0aGlzLmN1cnJlbnRUaWxlKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgLy8gcGFzc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBjb25maWcubWVzc2FnZVR5cGVzLmdhbWVPdmVyOlxuICAgICAgICB0aGlzLmdhbWVPdmVyID0gdHJ1ZVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gcGFzc1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXIiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "Player.js"
      ],
      "names": [
        "hm_players",
        "Player",
        "keymap",
        "messager",
        "playerNumber",
        "currentTile",
        "heldPiece",
        "magnitude",
        "kingCode",
        "config",
        "pieces_codes",
        "KING",
        "inCheck",
        "inCheckMate",
        "infoText",
        "gameOver",
        "cb",
        "board",
        "otherPlayer",
        "endTurn",
        "opponent",
        "turnTag",
        "innerText",
        "infoTag",
        "ctx",
        "currentTileCoords",
        "fillStyle",
        "fillRect",
        "x",
        "y",
        "tileWidth",
        "tileHeight",
        "showPossibleMoves",
        "kingCoords",
        "kingIndex",
        "selectedTileIndex",
        "getPossibleMoves",
        "indexOf",
        "pieceOnSelectedTile",
        "movePiece",
        "prevCoords",
        "movedPiece",
        "checkIfKingInCheck",
        "prevIndex",
        "row",
        "col",
        "move",
        "ownsPiece",
        "code",
        "attackedPiece",
        "Math",
        "abs",
        "post",
        "type",
        "messageTypes",
        "coords",
        "i",
        "length",
        "piece",
        "map",
        "index",
        "pieceUnderAttack",
        "pieceCode",
        "msg",
        "keyDown",
        "keyCode",
        "up",
        "down",
        "left",
        "right",
        "select",
        "selectTile"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/dev-arcade-games/Arcade Chess",
      "sourcesContent": [
        "import config                           from './config'\nimport { coordsToIndex, indexToCoords } from './utils'\n\nlet hm_players = 0;\n\nclass Player {\n\n  constructor(keymap, messager) {\n    this.keymap = keymap\n    this.messager = messager\n    hm_players++\n    this.playerNumber = hm_players\n    this.currentTile = this.playerNumber === 1 ? 63 : 0\n    this.heldPiece = null\n    this.magnitude = this.playerNumber === 1 ? -1 : 1\n    this.kingCode = config.pieces_codes.KING * this.magnitude\n    this.inCheck = false\n    this.inCheckMate = false\n    this.infoText = 'Good Luck!'\n    this.gameOver = false\n  }\n\n  update(cb, board, otherPlayer) {\n    this.endTurn = cb\n    this.board = board\n    this.opponent = otherPlayer\n\n    config.turnTag.innerText = `Player ${this.playerNumber}'s turn`\n    config.infoTag.innerText = this.infoText\n  }\n\n  draw(ctx) {\n    let currentTileCoords = indexToCoords(this.currentTile)\n    ctx.fillStyle = 'cornflowerblue'\n    ctx.fillRect(currentTileCoords.x, currentTileCoords.y, config.tileWidth, config.tileHeight)\n\n    if (this.heldPiece) {\n      ctx.fillStyle = 'rgba(80, 100, 230, 0.3)'\n      this.heldPiece.showPossibleMoves(this, this.board, ctx)\n    }\n\n    if (this.inCheck) {\n      ctx.fillStyle = 'rgba(193, 66, 66, 0.57)'\n      let kingCoords = indexToCoords(this.kingIndex)\n      ctx.fillRect(kingCoords.x, kingCoords.y, config.tileWidth, config.tileHeight)\n    }\n  }\n\n  selectTile(selectedTileIndex) {\n    if (this.heldPiece) {\n      if (this.heldPiece.getPossibleMoves(this, this.board).indexOf(selectedTileIndex) >= 0) {\n        let pieceOnSelectedTile = this.board[selectedTileIndex]\n        let { prevCoords, movedPiece } = this.movePiece(selectedTileIndex)\n        this.checkIfKingInCheck()\n        if (this.inCheck) {\n          let prevIndex = coordsToIndex(prevCoords.row, prevCoords.col)\n          this.board[prevIndex] = movedPiece\n          this.board[selectedTileIndex] = pieceOnSelectedTile\n          movedPiece.move(prevCoords)\n          this.infoText = `You cannot move there, you must protect your King`\n        } else {\n          this.endTurn()\n        }\n      } else if (this.board[selectedTileIndex] && this.ownsPiece(this.board[selectedTileIndex].code)) {\n        this.heldPiece = this.board[selectedTileIndex]\n      } else {\n        this.infoText = `You cannot move there`\n      }\n    } else if (this.ownsPiece(this.board[selectedTileIndex].code)){\n      this.heldPiece = this.board[selectedTileIndex]\n    } else {\n      this.infoText = `That is not yours`\n    }\n  }\n\n  movePiece(selectedTileIndex) {\n    let attackedPiece = this.board[selectedTileIndex]\n    if (attackedPiece && Math.abs(attackedPiece.code) === config.pieces_codes.KING) {\n      this.messager.post({type: config.messageTypes.gameOver})\n    }\n    this.board[coordsToIndex(this.heldPiece.row, this.heldPiece.col)] = null\n    let prevCoords = { x: this.heldPiece.x, y: this.heldPiece.y, col: this.heldPiece.col, row: this.heldPiece.row }\n    let coords = indexToCoords(selectedTileIndex)\n    coords.row = coords.y / config.tileHeight\n    coords.col = coords.x / config.tileWidth\n    this.heldPiece.move(coords)\n    this.board[selectedTileIndex] = this.heldPiece\n    let movedPiece = this.heldPiece\n    this.heldPiece = null\n    return { prevCoords, movedPiece }\n  }\n\n  checkIfKingInCheck() {\n    let inCheck = false\n    this.infoText = ''\n    for(let i=0;i<this.board.length;i++) {\n      let piece = this.board[i]\n      if (piece) {\n        if (!this.ownsPiece(piece.code)) {\n          piece.getPossibleMoves(this.opponent, this.board).map(index => {\n            let pieceUnderAttack = this.board[index]\n            if (pieceUnderAttack && pieceUnderAttack.code === this.kingCode) {\n              inCheck = true\n              this.kingIndex = index\n              this.infoText = `Your King is under attack!`\n            }\n          })\n        }\n      }\n    }\n    this.inCheck = inCheck\n  }\n\n  ownsPiece(pieceCode) {\n    if (this.playerNumber === 1) {\n      return pieceCode < 0\n    } else if (this.playerNumber === 2) {\n      return pieceCode > 0\n    }\n  }\n\n  handleMsg(msg) {\n    switch(msg.type) {\n      case config.messageTypes.keyDown:\n        if (!this.gameOver) {\n          switch (msg.keyCode) {\n            case this.keymap.up:\n              if(this.currentTile - 8 >= 0) {\n                this.currentTile -= 8\n              }\n              break\n            case this.keymap.down:\n              if(this.currentTile + 8 <= 63) {\n                this.currentTile += 8\n              }\n              break\n            case this.keymap.left:\n              if (this.currentTile % 8 === 0) {\n                this.currentTile += 7\n              } else {\n                this.currentTile--\n              }\n              break\n            case this.keymap.right:\n              if((this.currentTile + 1) % 8 === 0) {\n                this.currentTile -= 7\n              } else {\n                this.currentTile++\n              }\n              break\n            case this.keymap.select:\n              this.selectTile(this.currentTile)\n              break\n            default:\n              // pass\n          }\n        }\n        break\n      case config.messageTypes.gameOver:\n        this.gameOver = true\n      default:\n        // pass\n    }\n  }\n}\n\nexport default Player"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604590
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Renderer.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Renderer.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Renderer.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Renderer.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Renderer.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _config = _interopRequireWildcard(require(\"./config\"));\n\nvar _Chess = _interopRequireDefault(require(\"./Chess\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Renderer = function Renderer() {\n  _classCallCheck(this, Renderer);\n\n  this.canvas = document.getElementById('canvas');\n  this.ctx = this.canvas.getContext('2d');\n  this.sideLength = document.getElementById('canvasBox').clientHeight;\n  this.canvas.height = this.sideLength;\n  this.canvas.width = this.sideLength;\n  this.canvas.imageSmoothingEnabled = false;\n  (0, _config.init)({\n    tileHeight: this.canvas.height / _config[\"default\"].rows,\n    tileWidth: this.canvas.width / _config[\"default\"].cols\n  });\n  new _Chess[\"default\"](this.ctx);\n};\n\nnew Renderer();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlbmRlcmVyLmpzIl0sIm5hbWVzIjpbIlJlbmRlcmVyIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImN0eCIsImdldENvbnRleHQiLCJzaWRlTGVuZ3RoIiwiY2xpZW50SGVpZ2h0IiwiaGVpZ2h0Iiwid2lkdGgiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJ0aWxlSGVpZ2h0IiwiY29uZmlnIiwicm93cyIsInRpbGVXaWR0aCIsImNvbHMiLCJDaGVzcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7Ozs7Ozs7SUFFTUEsUSxHQUNKLG9CQUFjO0FBQUE7O0FBQ1osT0FBS0MsTUFBTCxHQUFjQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBZDtBQUNBLE9BQUtDLEdBQUwsR0FBVyxLQUFLSCxNQUFMLENBQVlJLFVBQVosQ0FBdUIsSUFBdkIsQ0FBWDtBQUNBLE9BQUtDLFVBQUwsR0FBa0JKLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixXQUF4QixFQUFxQ0ksWUFBdkQ7QUFDQSxPQUFLTixNQUFMLENBQVlPLE1BQVosR0FBcUIsS0FBS0YsVUFBMUI7QUFDQSxPQUFLTCxNQUFMLENBQVlRLEtBQVosR0FBb0IsS0FBS0gsVUFBekI7QUFDQSxPQUFLTCxNQUFMLENBQVlTLHFCQUFaLEdBQW9DLEtBQXBDO0FBQ0Esb0JBQUs7QUFDSEMsSUFBQUEsVUFBVSxFQUFFLEtBQUtWLE1BQUwsQ0FBWU8sTUFBWixHQUFxQkksbUJBQU9DLElBRHJDO0FBRUhDLElBQUFBLFNBQVMsRUFBRSxLQUFLYixNQUFMLENBQVlRLEtBQVosR0FBb0JHLG1CQUFPRztBQUZuQyxHQUFMO0FBSUEsTUFBSUMsaUJBQUosQ0FBVSxLQUFLWixHQUFmO0FBQ0QsQzs7QUFHSCxJQUFJSixRQUFKIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYW5pZWxwZWFjaC9EZXYvRElZLUFyY2FkZS1DYWJpbmV0L2dhbWVzL2FyY2FkZV9jaGVzcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWcsIHtpbml0fSBmcm9tICcuL2NvbmZpZydcbmltcG9ydCBDaGVzcyBmcm9tICcuL0NoZXNzJ1xuXG5jbGFzcyBSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpXG4gICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgdGhpcy5zaWRlTGVuZ3RoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhc0JveCcpLmNsaWVudEhlaWdodFxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuc2lkZUxlbmd0aFxuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5zaWRlTGVuZ3RoXG4gICAgdGhpcy5jYW52YXMuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2VcbiAgICBpbml0KHtcbiAgICAgIHRpbGVIZWlnaHQ6IHRoaXMuY2FudmFzLmhlaWdodCAvIGNvbmZpZy5yb3dzLFxuICAgICAgdGlsZVdpZHRoOiB0aGlzLmNhbnZhcy53aWR0aCAvIGNvbmZpZy5jb2xzXG4gICAgfSlcbiAgICBuZXcgQ2hlc3ModGhpcy5jdHgpXG4gIH1cbn1cblxubmV3IFJlbmRlcmVyKCkiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "Renderer.js"
      ],
      "names": [
        "Renderer",
        "canvas",
        "document",
        "getElementById",
        "ctx",
        "getContext",
        "sideLength",
        "clientHeight",
        "height",
        "width",
        "imageSmoothingEnabled",
        "tileHeight",
        "config",
        "rows",
        "tileWidth",
        "cols",
        "Chess"
      ],
      "mappings": ";;AAAA;;AACA;;;;;;;;IAEMA,Q,GACJ,oBAAc;AAAA;;AACZ,OAAKC,MAAL,GAAcC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAd;AACA,OAAKC,GAAL,GAAW,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAX;AACA,OAAKC,UAAL,GAAkBJ,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCI,YAAvD;AACA,OAAKN,MAAL,CAAYO,MAAZ,GAAqB,KAAKF,UAA1B;AACA,OAAKL,MAAL,CAAYQ,KAAZ,GAAoB,KAAKH,UAAzB;AACA,OAAKL,MAAL,CAAYS,qBAAZ,GAAoC,KAApC;AACA,oBAAK;AACHC,IAAAA,UAAU,EAAE,KAAKV,MAAL,CAAYO,MAAZ,GAAqBI,mBAAOC,IADrC;AAEHC,IAAAA,SAAS,EAAE,KAAKb,MAAL,CAAYQ,KAAZ,GAAoBG,mBAAOG;AAFnC,GAAL;AAIA,MAAIC,iBAAJ,CAAU,KAAKZ,GAAf;AACD,C;;AAGH,IAAIJ,QAAJ",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import config, {init} from './config'\nimport Chess from './Chess'\n\nclass Renderer {\n  constructor() {\n    this.canvas = document.getElementById('canvas')\n    this.ctx = this.canvas.getContext('2d')\n    this.sideLength = document.getElementById('canvasBox').clientHeight\n    this.canvas.height = this.sideLength\n    this.canvas.width = this.sideLength\n    this.canvas.imageSmoothingEnabled = false\n    init({\n      tileHeight: this.canvas.height / config.rows,\n      tileWidth: this.canvas.width / config.cols\n    })\n    new Chess(this.ctx)\n  }\n}\n\nnew Renderer()"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604593
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/config.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/config.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/config.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "config.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.init = void 0;\nvar config = {\n  fpsTag: document.getElementById('fps'),\n  turnTag: document.getElementById('turn'),\n  infoTag: document.getElementById('info'),\n  winnerTag: document.getElementById('winner'),\n  testing: false,\n  blank_board: [2, 3, 4, 5, 6, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, -1, 6, -1, -1, -1, -1, -2, -3, -4, -5, -6, -4, -3, -2],\n  rows: 8,\n  cols: 8,\n  pieces_codes: {\n    NO_PIECE: 0,\n    PAWN: 1,\n    ROOK: 2,\n    KNIGHT: 3,\n    BISHOP: 4,\n    KING: 5,\n    QUEEN: 6\n  },\n  playerOneKeyMap: {\n    up: 87,\n    down: 83,\n    left: 65,\n    right: 68,\n    select: 70\n  },\n  playerTwoKeyMap: {\n    up: 73,\n    down: 75,\n    left: 74,\n    right: 76,\n    select: 72\n  },\n  messageTypes: {\n    keyDown: 'KEY_DOWN',\n    keyUp: 'KEY_UP',\n    gameOver: 'GAME_OVER'\n  }\n};\n\nvar init = function init(ops) {\n  config.tileHeight = ops.tileHeight;\n  config.tileWidth = ops.tileWidth;\n};\n\nexports.init = init;\nvar _default = config;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJmcHNUYWciLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidHVyblRhZyIsImluZm9UYWciLCJ3aW5uZXJUYWciLCJ0ZXN0aW5nIiwiYmxhbmtfYm9hcmQiLCJyb3dzIiwiY29scyIsInBpZWNlc19jb2RlcyIsIk5PX1BJRUNFIiwiUEFXTiIsIlJPT0siLCJLTklHSFQiLCJCSVNIT1AiLCJLSU5HIiwiUVVFRU4iLCJwbGF5ZXJPbmVLZXlNYXAiLCJ1cCIsImRvd24iLCJsZWZ0IiwicmlnaHQiLCJzZWxlY3QiLCJwbGF5ZXJUd29LZXlNYXAiLCJtZXNzYWdlVHlwZXMiLCJrZXlEb3duIiwia2V5VXAiLCJnYW1lT3ZlciIsImluaXQiLCJvcHMiLCJ0aWxlSGVpZ2h0IiwidGlsZVdpZHRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUk7QUFDWkMsRUFBQUEsTUFBTSxFQUFFQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsS0FBeEIsQ0FESTtBQUVaQyxFQUFBQSxPQUFPLEVBQUVGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixNQUF4QixDQUZHO0FBR1pFLEVBQUFBLE9BQU8sRUFBRUgsUUFBUSxDQUFDQyxjQUFULENBQXdCLE1BQXhCLENBSEc7QUFJWkcsRUFBQUEsU0FBUyxFQUFFSixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FKQztBQUtaSSxFQUFBQSxPQUFPLEVBQUUsS0FMRztBQU1aQyxFQUFBQSxXQUFXLEVBQUUsQ0FDWCxDQURXLEVBQ1IsQ0FEUSxFQUNMLENBREssRUFDRixDQURFLEVBQ0MsQ0FERCxFQUNJLENBREosRUFDTyxDQURQLEVBQ1UsQ0FEVixFQUVYLENBRlcsRUFFUixDQUZRLEVBRUwsQ0FGSyxFQUVGLENBRkUsRUFFQyxDQUZELEVBRUksQ0FGSixFQUVPLENBRlAsRUFFVSxDQUZWLEVBR1gsQ0FIVyxFQUdSLENBSFEsRUFHTCxDQUhLLEVBR0YsQ0FIRSxFQUdDLENBSEQsRUFHSSxDQUhKLEVBR08sQ0FIUCxFQUdVLENBSFYsRUFJWCxDQUpXLEVBSVIsQ0FKUSxFQUlMLENBSkssRUFJRixDQUpFLEVBSUMsQ0FKRCxFQUlJLENBSkosRUFJTyxDQUpQLEVBSVUsQ0FKVixFQUtYLENBTFcsRUFLUixDQUxRLEVBS0wsQ0FMSyxFQUtGLENBTEUsRUFLQyxDQUxELEVBS0ksQ0FMSixFQUtPLENBTFAsRUFLVSxDQUxWLEVBTVgsQ0FOVyxFQU1SLENBTlEsRUFNTCxDQU5LLEVBTUYsQ0FORSxFQU1DLENBTkQsRUFNSSxDQU5KLEVBTU8sQ0FOUCxFQU1VLENBTlYsRUFPWCxDQUFDLENBUFUsRUFPUCxDQUFDLENBUE0sRUFPSCxDQUFDLENBUEUsRUFPRSxDQVBGLEVBT0ssQ0FBQyxDQVBOLEVBT1MsQ0FBQyxDQVBWLEVBT2EsQ0FBQyxDQVBkLEVBT2lCLENBQUMsQ0FQbEIsRUFRWCxDQUFDLENBUlUsRUFRUCxDQUFDLENBUk0sRUFRSCxDQUFDLENBUkUsRUFRQyxDQUFDLENBUkYsRUFRSyxDQUFDLENBUk4sRUFRUyxDQUFDLENBUlYsRUFRYSxDQUFDLENBUmQsRUFRaUIsQ0FBQyxDQVJsQixDQU5EO0FBZ0JaQyxFQUFBQSxJQUFJLEVBQUUsQ0FoQk07QUFpQlpDLEVBQUFBLElBQUksRUFBRSxDQWpCTTtBQWtCWkMsRUFBQUEsWUFBWSxFQUFFO0FBQ1pDLElBQUFBLFFBQVEsRUFBRSxDQURFO0FBRVpDLElBQUFBLElBQUksRUFBRSxDQUZNO0FBR1pDLElBQUFBLElBQUksRUFBRSxDQUhNO0FBSVpDLElBQUFBLE1BQU0sRUFBRSxDQUpJO0FBS1pDLElBQUFBLE1BQU0sRUFBRSxDQUxJO0FBTVpDLElBQUFBLElBQUksRUFBRSxDQU5NO0FBT1pDLElBQUFBLEtBQUssRUFBRTtBQVBLLEdBbEJGO0FBMkJaQyxFQUFBQSxlQUFlLEVBQUU7QUFDZkMsSUFBQUEsRUFBRSxFQUFFLEVBRFc7QUFFZkMsSUFBQUEsSUFBSSxFQUFFLEVBRlM7QUFHZkMsSUFBQUEsSUFBSSxFQUFFLEVBSFM7QUFJZkMsSUFBQUEsS0FBSyxFQUFFLEVBSlE7QUFLZkMsSUFBQUEsTUFBTSxFQUFFO0FBTE8sR0EzQkw7QUFrQ1pDLEVBQUFBLGVBQWUsRUFBRTtBQUNmTCxJQUFBQSxFQUFFLEVBQUUsRUFEVztBQUVmQyxJQUFBQSxJQUFJLEVBQUUsRUFGUztBQUdmQyxJQUFBQSxJQUFJLEVBQUUsRUFIUztBQUlmQyxJQUFBQSxLQUFLLEVBQUUsRUFKUTtBQUtmQyxJQUFBQSxNQUFNLEVBQUU7QUFMTyxHQWxDTDtBQXlDWkUsRUFBQUEsWUFBWSxFQUFFO0FBQ1pDLElBQUFBLE9BQU8sRUFBRSxVQURHO0FBRVpDLElBQUFBLEtBQUssRUFBRSxRQUZLO0FBR1pDLElBQUFBLFFBQVEsRUFBRTtBQUhFO0FBekNGLENBQWQ7O0FBZ0RPLElBQU1DLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQUNDLEdBQUQsRUFBUztBQUMzQi9CLEVBQUFBLE1BQU0sQ0FBQ2dDLFVBQVAsR0FBb0JELEdBQUcsQ0FBQ0MsVUFBeEI7QUFDQWhDLEVBQUFBLE1BQU0sQ0FBQ2lDLFNBQVAsR0FBbUJGLEdBQUcsQ0FBQ0UsU0FBdkI7QUFDRCxDQUhNOzs7ZUFLUWpDLE0iLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbmllbHBlYWNoL0Rldi9ESVktQXJjYWRlLUNhYmluZXQvZ2FtZXMvYXJjYWRlX2NoZXNzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGNvbmZpZyA9ICB7XG4gIGZwc1RhZzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZwcycpLFxuICB0dXJuVGFnOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHVybicpLFxuICBpbmZvVGFnOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mbycpLFxuICB3aW5uZXJUYWc6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aW5uZXInKSxcbiAgdGVzdGluZzogZmFsc2UsXG4gIGJsYW5rX2JvYXJkOiBbXG4gICAgMiwgMywgNCwgNSwgNiwgNCwgMywgMixcbiAgICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLFxuICAgIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gICAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAgIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDAsXG4gICAgLTEsIC0xLCAtMSwgIDYsIC0xLCAtMSwgLTEsIC0xLFxuICAgIC0yLCAtMywgLTQsIC01LCAtNiwgLTQsIC0zLCAtMlxuICBdLFxuICByb3dzOiA4LFxuICBjb2xzOiA4LFxuICBwaWVjZXNfY29kZXM6IHtcbiAgICBOT19QSUVDRTogMCxcbiAgICBQQVdOOiAxLFxuICAgIFJPT0s6IDIsXG4gICAgS05JR0hUOiAzLFxuICAgIEJJU0hPUDogNCxcbiAgICBLSU5HOiA1LFxuICAgIFFVRUVOOiA2XG4gIH0sXG4gIHBsYXllck9uZUtleU1hcDoge1xuICAgIHVwOiA4NyxcbiAgICBkb3duOiA4MyxcbiAgICBsZWZ0OiA2NSxcbiAgICByaWdodDogNjgsXG4gICAgc2VsZWN0OiA3MFxuICB9LFxuICBwbGF5ZXJUd29LZXlNYXA6IHtcbiAgICB1cDogNzMsXG4gICAgZG93bjogNzUsXG4gICAgbGVmdDogNzQsXG4gICAgcmlnaHQ6IDc2LFxuICAgIHNlbGVjdDogNzJcbiAgfSxcbiAgbWVzc2FnZVR5cGVzOiB7XG4gICAga2V5RG93bjogJ0tFWV9ET1dOJyxcbiAgICBrZXlVcDogJ0tFWV9VUCcsXG4gICAgZ2FtZU92ZXI6ICdHQU1FX09WRVInXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGluaXQgPSAob3BzKSA9PiB7XG4gIGNvbmZpZy50aWxlSGVpZ2h0ID0gb3BzLnRpbGVIZWlnaHRcbiAgY29uZmlnLnRpbGVXaWR0aCA9IG9wcy50aWxlV2lkdGhcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnIl19",
    "map": {
      "version": 3,
      "sources": [
        "config.js"
      ],
      "names": [
        "config",
        "fpsTag",
        "document",
        "getElementById",
        "turnTag",
        "infoTag",
        "winnerTag",
        "testing",
        "blank_board",
        "rows",
        "cols",
        "pieces_codes",
        "NO_PIECE",
        "PAWN",
        "ROOK",
        "KNIGHT",
        "BISHOP",
        "KING",
        "QUEEN",
        "playerOneKeyMap",
        "up",
        "down",
        "left",
        "right",
        "select",
        "playerTwoKeyMap",
        "messageTypes",
        "keyDown",
        "keyUp",
        "gameOver",
        "init",
        "ops",
        "tileHeight",
        "tileWidth"
      ],
      "mappings": ";;;;;;AAAA,IAAIA,MAAM,GAAI;AACZC,EAAAA,MAAM,EAAEC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CADI;AAEZC,EAAAA,OAAO,EAAEF,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFG;AAGZE,EAAAA,OAAO,EAAEH,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHG;AAIZG,EAAAA,SAAS,EAAEJ,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAJC;AAKZI,EAAAA,OAAO,EAAE,KALG;AAMZC,EAAAA,WAAW,EAAE,CACX,CADW,EACR,CADQ,EACL,CADK,EACF,CADE,EACC,CADD,EACI,CADJ,EACO,CADP,EACU,CADV,EAEX,CAFW,EAER,CAFQ,EAEL,CAFK,EAEF,CAFE,EAEC,CAFD,EAEI,CAFJ,EAEO,CAFP,EAEU,CAFV,EAGX,CAHW,EAGR,CAHQ,EAGL,CAHK,EAGF,CAHE,EAGC,CAHD,EAGI,CAHJ,EAGO,CAHP,EAGU,CAHV,EAIX,CAJW,EAIR,CAJQ,EAIL,CAJK,EAIF,CAJE,EAIC,CAJD,EAII,CAJJ,EAIO,CAJP,EAIU,CAJV,EAKX,CALW,EAKR,CALQ,EAKL,CALK,EAKF,CALE,EAKC,CALD,EAKI,CALJ,EAKO,CALP,EAKU,CALV,EAMX,CANW,EAMR,CANQ,EAML,CANK,EAMF,CANE,EAMC,CAND,EAMI,CANJ,EAMO,CANP,EAMU,CANV,EAOX,CAAC,CAPU,EAOP,CAAC,CAPM,EAOH,CAAC,CAPE,EAOE,CAPF,EAOK,CAAC,CAPN,EAOS,CAAC,CAPV,EAOa,CAAC,CAPd,EAOiB,CAAC,CAPlB,EAQX,CAAC,CARU,EAQP,CAAC,CARM,EAQH,CAAC,CARE,EAQC,CAAC,CARF,EAQK,CAAC,CARN,EAQS,CAAC,CARV,EAQa,CAAC,CARd,EAQiB,CAAC,CARlB,CAND;AAgBZC,EAAAA,IAAI,EAAE,CAhBM;AAiBZC,EAAAA,IAAI,EAAE,CAjBM;AAkBZC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,CADE;AAEZC,IAAAA,IAAI,EAAE,CAFM;AAGZC,IAAAA,IAAI,EAAE,CAHM;AAIZC,IAAAA,MAAM,EAAE,CAJI;AAKZC,IAAAA,MAAM,EAAE,CALI;AAMZC,IAAAA,IAAI,EAAE,CANM;AAOZC,IAAAA,KAAK,EAAE;AAPK,GAlBF;AA2BZC,EAAAA,eAAe,EAAE;AACfC,IAAAA,EAAE,EAAE,EADW;AAEfC,IAAAA,IAAI,EAAE,EAFS;AAGfC,IAAAA,IAAI,EAAE,EAHS;AAIfC,IAAAA,KAAK,EAAE,EAJQ;AAKfC,IAAAA,MAAM,EAAE;AALO,GA3BL;AAkCZC,EAAAA,eAAe,EAAE;AACfL,IAAAA,EAAE,EAAE,EADW;AAEfC,IAAAA,IAAI,EAAE,EAFS;AAGfC,IAAAA,IAAI,EAAE,EAHS;AAIfC,IAAAA,KAAK,EAAE,EAJQ;AAKfC,IAAAA,MAAM,EAAE;AALO,GAlCL;AAyCZE,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,UADG;AAEZC,IAAAA,KAAK,EAAE,QAFK;AAGZC,IAAAA,QAAQ,EAAE;AAHE;AAzCF,CAAd;;AAgDO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAS;AAC3B/B,EAAAA,MAAM,CAACgC,UAAP,GAAoBD,GAAG,CAACC,UAAxB;AACAhC,EAAAA,MAAM,CAACiC,SAAP,GAAmBF,GAAG,CAACE,SAAvB;AACD,CAHM;;;eAKQjC,M",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "let config =  {\n  fpsTag: document.getElementById('fps'),\n  turnTag: document.getElementById('turn'),\n  infoTag: document.getElementById('info'),\n  winnerTag: document.getElementById('winner'),\n  testing: false,\n  blank_board: [\n    2, 3, 4, 5, 6, 4, 3, 2,\n    1, 1, 1, 1, 1, 1, 1, 1,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 1, 0, 0, 0, 0, 0,\n    -1, -1, -1,  6, -1, -1, -1, -1,\n    -2, -3, -4, -5, -6, -4, -3, -2\n  ],\n  rows: 8,\n  cols: 8,\n  pieces_codes: {\n    NO_PIECE: 0,\n    PAWN: 1,\n    ROOK: 2,\n    KNIGHT: 3,\n    BISHOP: 4,\n    KING: 5,\n    QUEEN: 6\n  },\n  playerOneKeyMap: {\n    up: 87,\n    down: 83,\n    left: 65,\n    right: 68,\n    select: 70\n  },\n  playerTwoKeyMap: {\n    up: 73,\n    down: 75,\n    left: 74,\n    right: 76,\n    select: 72\n  },\n  messageTypes: {\n    keyDown: 'KEY_DOWN',\n    keyUp: 'KEY_UP',\n    gameOver: 'GAME_OVER'\n  }\n}\n\nexport const init = (ops) => {\n  config.tileHeight = ops.tileHeight\n  config.tileWidth = ops.tileWidth\n}\n\nexport default config"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604594
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Chess.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Chess.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Chess.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Chess.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Chess.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Bishop = _interopRequireDefault(require(\"./Bishop\"));\n\nvar _King = _interopRequireDefault(require(\"./King\"));\n\nvar _Knight = _interopRequireDefault(require(\"./Knight\"));\n\nvar _Pawn = _interopRequireDefault(require(\"./Pawn\"));\n\nvar _Queen = _interopRequireDefault(require(\"./Queen\"));\n\nvar _Rook = _interopRequireDefault(require(\"./Rook\"));\n\nvar _Engine = _interopRequireDefault(require(\"./Engine\"));\n\nvar _Player = _interopRequireDefault(require(\"./Player\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Chess =\n/*#__PURE__*/\nfunction () {\n  function Chess(ctx) {\n    var _this = this;\n\n    _classCallCheck(this, Chess);\n\n    _defineProperty(this, \"initializeBoard\", function () {\n      var w = _config[\"default\"].tileWidth;\n      var h = _config[\"default\"].tileHeight;\n\n      for (var row = 0; row < _this.rows; row++) {\n        for (var col = 0; col < _this.cols; col++) {\n          var piece = void 0;\n          var tileIndex = (0, _utils.coordsToIndex)(row, col);\n          var coords = {\n            x: col * w,\n            y: row * h,\n            row: row,\n            col: col\n          };\n\n          switch (Math.abs(_this.blank_board[tileIndex])) {\n            case _config[\"default\"].pieces_codes.PAWN:\n              piece = new _Pawn[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.ROOK:\n              piece = new _Rook[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.KNIGHT:\n              piece = new _Knight[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.BISHOP:\n              piece = new _Bishop[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.KING:\n              piece = new _King[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            case _config[\"default\"].pieces_codes.QUEEN:\n              piece = new _Queen[\"default\"](coords, _this.blank_board[tileIndex]);\n              break;\n\n            default: // pass\n\n          }\n\n          if (piece) {\n            _this.board[tileIndex] = piece;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"update\", function () {\n      if (_this.gameOver) {\n        _config[\"default\"].winnerTag.innerText = \"Game Over! Player \".concat(_this.otherPlayer.playerNumber, \" wins!\");\n      }\n\n      _this.currentPlayer.update(_this.switchPlayer, _this.board, _this.otherPlayer);\n    });\n\n    _defineProperty(this, \"switchPlayer\", function () {\n      _this.messager.unsubscribe(_this.currentPlayer);\n\n      var tempPlayer = _this.currentPlayer;\n      _this.currentPlayer = _this.otherPlayer;\n      _this.otherPlayer = tempPlayer;\n\n      _this.messager.subscribe(_this.currentPlayer);\n\n      if (_this.currentPlayer.board) {\n        _this.currentPlayer.checkIfKingInCheck();\n      }\n    });\n\n    _defineProperty(this, \"draw\", function () {\n      _this.drawBoard();\n\n      if (!_this.gameOver) {\n        _this.currentPlayer.draw(_this.engine.ctx);\n      }\n\n      _this.drawPieces();\n    });\n\n    this.blank_board = _config[\"default\"].blank_board;\n    this.board = [];\n    this.rows = _config[\"default\"].rows;\n    this.cols = _config[\"default\"].cols;\n    this.engine = new _Engine[\"default\"](this.initializeBoard, ctx);\n    this.engine.update = this.update;\n    this.engine.draw = this.draw;\n    this.messager = this.engine.messager;\n    this.player1 = new _Player[\"default\"](_config[\"default\"].playerOneKeyMap, this.messager);\n    this.player2 = new _Player[\"default\"](_config[\"default\"].playerTwoKeyMap, this.messager);\n    this.currentPlayer = this.player1;\n    this.otherPlayer = this.player2;\n    this.messager.subscribe(this.currentPlayer);\n  }\n\n  _createClass(Chess, [{\n    key: \"drawBoard\",\n    value: function drawBoard() {\n      var color = '';\n      var w = _config[\"default\"].tileWidth;\n      var h = _config[\"default\"].tileHeight;\n\n      for (var row = 0; row < this.rows; row++) {\n        color = Math.floor(row % 2) === 0 ? 'grey' : 'black';\n\n        for (var col = 0; col < this.cols; col++) {\n          this.engine.ctx.fillStyle = color;\n          this.engine.ctx.fillRect(col * w, row * h, w, h);\n          color = color === 'grey' ? 'black' : 'grey';\n\n          if (_config[\"default\"].testing) {\n            var index = (0, _utils.coordsToIndex)(row, col);\n            this.engine.ctx.fillStyle = 'yellow';\n            this.engine.ctx.font = \"30px Arial\";\n            this.engine.ctx.fillText(index, col * w + 10, row * h + 30);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawPieces\",\n    value: function drawPieces() {\n      for (var pieceIndex = 0; pieceIndex < this.board.length; pieceIndex++) {\n        var piece = this.board[pieceIndex];\n\n        if (piece) {\n          this.engine.ctx.drawImage(piece.img, piece.x, piece.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n        }\n      }\n    }\n  }]);\n\n  return Chess;\n}();\n\nvar _default = Chess;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Chess.js"
      ],
      "names": [
        "Chess",
        "ctx",
        "w",
        "config",
        "tileWidth",
        "h",
        "tileHeight",
        "row",
        "rows",
        "col",
        "cols",
        "piece",
        "tileIndex",
        "coords",
        "x",
        "y",
        "Math",
        "abs",
        "blank_board",
        "pieces_codes",
        "PAWN",
        "Pawn",
        "ROOK",
        "Rook",
        "KNIGHT",
        "Knight",
        "BISHOP",
        "Bishop",
        "KING",
        "King",
        "QUEEN",
        "Queen",
        "board",
        "gameOver",
        "winnerTag",
        "innerText",
        "otherPlayer",
        "playerNumber",
        "currentPlayer",
        "update",
        "switchPlayer",
        "messager",
        "unsubscribe",
        "tempPlayer",
        "subscribe",
        "checkIfKingInCheck",
        "drawBoard",
        "draw",
        "engine",
        "drawPieces",
        "Engine",
        "initializeBoard",
        "player1",
        "Player",
        "playerOneKeyMap",
        "player2",
        "playerTwoKeyMap",
        "color",
        "floor",
        "fillStyle",
        "fillRect",
        "testing",
        "index",
        "font",
        "fillText",
        "pieceIndex",
        "length",
        "drawImage",
        "img"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import config            from './config'\nimport { coordsToIndex } from \"./utils\"\nimport Bishop            from './Bishop'\nimport King              from './King'\nimport Knight            from './Knight'\nimport Pawn              from './Pawn'\nimport Queen             from './Queen'\nimport Rook              from './Rook'\nimport Engine            from './Engine'\nimport Player            from './Player'\n\nclass Chess {\n  constructor(ctx) {\n    this.blank_board = config.blank_board\n    this.board = []\n    this.rows = config.rows\n    this.cols = config.cols\n    this.engine = new Engine(this.initializeBoard, ctx)\n    this.engine.update = this.update\n    this.engine.draw = this.draw\n    this.messager = this.engine.messager\n    this.player1 = new Player(config.playerOneKeyMap, this.messager)\n    this.player2 = new Player(config.playerTwoKeyMap, this.messager)\n    this.currentPlayer = this.player1\n    this.otherPlayer = this.player2\n    this.messager.subscribe(this.currentPlayer)\n  }\n\n  initializeBoard = () => {\n    const w = config.tileWidth\n    const h = config.tileHeight\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.cols; col++) {\n        let piece\n        let tileIndex = coordsToIndex(row, col)\n        let coords = { x: col * w, y: row * h, row: row, col: col }\n        switch (Math.abs(this.blank_board[ tileIndex ])) {\n          case config.pieces_codes.PAWN:\n            piece = new Pawn(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.ROOK:\n            piece = new Rook(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.KNIGHT:\n            piece = new Knight(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.BISHOP:\n            piece = new Bishop(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.KING:\n            piece = new King(coords, this.blank_board[ tileIndex ])\n            break\n          case config.pieces_codes.QUEEN:\n            piece = new Queen(coords, this.blank_board[ tileIndex ])\n            break\n          default:\n            // pass\n        }\n        if (piece) {\n          this.board[ tileIndex ] = piece\n        }\n      }\n    }\n  }\n\n  drawBoard() {\n    let color = ''\n    const w = config.tileWidth\n    const h = config.tileHeight\n    for(let row = 0;row<this.rows;row++) {\n      color = Math.floor(row % 2) === 0 ? 'grey' : 'black'\n      for(let col = 0;col<this.cols;col++) {\n        this.engine.ctx.fillStyle = color\n        this.engine.ctx.fillRect(col * w, row * h, w, h)\n        color = color === 'grey' ? 'black' : 'grey'\n        if (config.testing) {\n          let index = coordsToIndex(row, col)\n          this.engine.ctx.fillStyle = 'yellow'\n          this.engine.ctx.font = \"30px Arial\"\n          this.engine.ctx.fillText(index, col * w + 10, row * h + 30)\n        }\n      }\n    }\n  }\n\n  drawPieces() {\n    for(let pieceIndex = 0; pieceIndex<this.board.length; pieceIndex++) {\n      let piece = this.board[pieceIndex]\n      if(piece) {\n        this.engine.ctx.drawImage(piece.img, piece.x, piece.y, config.tileWidth, config.tileHeight)\n      }\n    }\n  }\n\n  update = () =>  {\n    if (this.gameOver) {\n      config.winnerTag.innerText = `Game Over! Player ${this.otherPlayer.playerNumber} wins!`\n    }\n    this.currentPlayer.update(this.switchPlayer, this.board, this.otherPlayer)\n  }\n\n  switchPlayer = () => {\n    this.messager.unsubscribe(this.currentPlayer)\n    let tempPlayer = this.currentPlayer\n    this.currentPlayer = this.otherPlayer\n    this.otherPlayer = tempPlayer\n    this.messager.subscribe(this.currentPlayer)\n    if (this.currentPlayer.board) {\n      this.currentPlayer.checkIfKingInCheck()\n    }\n  }\n\n  draw = () => {\n    this.drawBoard()\n    if(!this.gameOver) {\n      this.currentPlayer.draw(this.engine.ctx)\n    }\n    this.drawPieces()\n  }\n}\n\nexport default Chess"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/utils.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/utils.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/utils.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/utils.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "utils.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexToCoords = indexToCoords;\nexports.coordsToIndex = coordsToIndex;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction indexToCoords(index) {\n  return {\n    x: index % 8 * _config[\"default\"].tileWidth,\n    y: Math.floor(index / 8) * _config[\"default\"].tileHeight\n  };\n}\n\nfunction coordsToIndex(x, y) {\n  return x * 8 + y;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbImluZGV4VG9Db29yZHMiLCJpbmRleCIsIngiLCJjb25maWciLCJ0aWxlV2lkdGgiLCJ5IiwiTWF0aCIsImZsb29yIiwidGlsZUhlaWdodCIsImNvb3Jkc1RvSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFTyxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QjtBQUNuQyxTQUFPO0FBQ0xDLElBQUFBLENBQUMsRUFBR0QsS0FBSyxHQUFHLENBQVQsR0FBY0UsbUJBQU9DLFNBRG5CO0FBRUxDLElBQUFBLENBQUMsRUFBRUMsSUFBSSxDQUFDQyxLQUFMLENBQVdOLEtBQUssR0FBRyxDQUFuQixJQUF3QkUsbUJBQU9LO0FBRjdCLEdBQVA7QUFJRDs7QUFFTSxTQUFTQyxhQUFULENBQXVCUCxDQUF2QixFQUEwQkcsQ0FBMUIsRUFBNkI7QUFDbEMsU0FBUUgsQ0FBQyxHQUFHLENBQUwsR0FBVUcsQ0FBakI7QUFDRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGFuaWVscGVhY2gvRGV2L0RJWS1BcmNhZGUtQ2FiaW5ldC9nYW1lcy9hcmNhZGVfY2hlc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhUb0Nvb3JkcyhpbmRleCkge1xuICByZXR1cm4ge1xuICAgIHg6IChpbmRleCAlIDgpICogY29uZmlnLnRpbGVXaWR0aCxcbiAgICB5OiBNYXRoLmZsb29yKGluZGV4IC8gOCkgKiBjb25maWcudGlsZUhlaWdodFxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb29yZHNUb0luZGV4KHgsIHkpIHtcbiAgcmV0dXJuICh4ICogOCkgKyB5XG59Il19",
    "map": {
      "version": 3,
      "sources": [
        "utils.js"
      ],
      "names": [
        "indexToCoords",
        "index",
        "x",
        "config",
        "tileWidth",
        "y",
        "Math",
        "floor",
        "tileHeight",
        "coordsToIndex"
      ],
      "mappings": ";;;;;;;;AAAA;;;;AAEO,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,SAAO;AACLC,IAAAA,CAAC,EAAGD,KAAK,GAAG,CAAT,GAAcE,mBAAOC,SADnB;AAELC,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWN,KAAK,GAAG,CAAnB,IAAwBE,mBAAOK;AAF7B,GAAP;AAID;;AAEM,SAASC,aAAT,CAAuBP,CAAvB,EAA0BG,CAA1B,EAA6B;AAClC,SAAQH,CAAC,GAAG,CAAL,GAAUG,CAAjB;AACD",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import config from './config'\n\nexport function indexToCoords(index) {\n  return {\n    x: (index % 8) * config.tileWidth,\n    y: Math.floor(index / 8) * config.tileHeight\n  }\n}\n\nexport function coordsToIndex(x, y) {\n  return (x * 8) + y\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604607
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Bishop.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Bishop.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Bishop.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Bishop.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Bishop.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Bishop =\n/*#__PURE__*/\nfunction () {\n  function Bishop(coords, pieceCode) {\n    _classCallCheck(this, Bishop);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_bishop : _ImageLoader[\"default\"].w_bishop;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Bishop, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var blocked = false;\n      var tilesAdvanced = 0;\n      var tilesShifted = 0;\n      var lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n        var proposedIndex = currentIndex + tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = proposedIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (pieceOnTile) {\n          if (player.ownsPiece(pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex = currentIndex + tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex;\n        var _pieceOnTile = board[_proposedIndex];\n\n        if (_pieceOnTile) {\n          if (player.ownsPiece(_pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex2 = currentIndex - tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex2)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex2;\n        var _pieceOnTile2 = board[_proposedIndex2];\n\n        if (_pieceOnTile2) {\n          if (player.ownsPiece(_pieceOnTile2.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex2);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex2);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex3 = currentIndex - tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex3)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex3;\n        var _pieceOnTile3 = board[_proposedIndex3];\n\n        if (_pieceOnTile3) {\n          if (player.ownsPiece(_pieceOnTile3.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex3);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex3);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 7 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Bishop;\n}();\n\nvar _default = Bishop;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Bishop.js"
      ],
      "names": [
        "Bishop",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_bishop",
        "w_bishop",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "blocked",
        "tilesAdvanced",
        "tilesShifted",
        "lastIndexChecked",
        "config",
        "cols",
        "proposedIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import images from \"./ImageLoader\"\nimport config from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Bishop {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_bishop : images.w_bishop\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let blocked = false\n    let tilesAdvanced = 0\n    let tilesShifted = 0\n    let lastIndexChecked = currentIndex\n    while(!blocked) { // move forward right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move forward left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 7 && prevIndex % 8 ===0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Bishop"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604586
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/ImageLoader.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/ImageLoader.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/ImageLoader.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/ImageLoader.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "ImageLoader.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.loadImages = void 0;\nvar images = {\n  b_pawn: null,\n  b_rook: null,\n  b_knight: null,\n  b_bishop: null,\n  b_king: null,\n  b_queen: null,\n  w_pawn: null,\n  w_rook: null,\n  w_knight: null,\n  w_bishop: null,\n  w_king: null,\n  w_queen: null\n};\nvar imagesLeftToLoad = 0;\n\nfunction handleImageLoaded() {\n  imagesLeftToLoad--;\n\n  if (imagesLeftToLoad <= 0) {\n    startEngine();\n  }\n}\n\nfunction startEngine() {}\n\nvar loadImages = function loadImages(cb) {\n  var image_files = ['b_pawn.png', 'b_rook.png', 'b_knight.png', 'b_bishop.png', 'b_king.png', 'b_queen.png', 'w_pawn.png', 'w_rook.png', 'w_knight.png', 'w_bishop.png', 'w_king.png', 'w_queen.png'];\n  imagesLeftToLoad = image_files.length;\n\n  for (var key in images) {\n    images[key] = document.createElement('img');\n    images[key].onload = handleImageLoaded;\n    images[key].src = \"images/\".concat(key, \".png\");\n  }\n\n  startEngine = cb;\n};\n\nexports.loadImages = loadImages;\nvar _default = images;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlTG9hZGVyLmpzIl0sIm5hbWVzIjpbImltYWdlcyIsImJfcGF3biIsImJfcm9vayIsImJfa25pZ2h0IiwiYl9iaXNob3AiLCJiX2tpbmciLCJiX3F1ZWVuIiwid19wYXduIiwid19yb29rIiwid19rbmlnaHQiLCJ3X2Jpc2hvcCIsIndfa2luZyIsIndfcXVlZW4iLCJpbWFnZXNMZWZ0VG9Mb2FkIiwiaGFuZGxlSW1hZ2VMb2FkZWQiLCJzdGFydEVuZ2luZSIsImxvYWRJbWFnZXMiLCJjYiIsImltYWdlX2ZpbGVzIiwibGVuZ3RoIiwia2V5IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwib25sb2FkIiwic3JjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUc7QUFDWEMsRUFBQUEsTUFBTSxFQUFFLElBREc7QUFFWEMsRUFBQUEsTUFBTSxFQUFFLElBRkc7QUFHWEMsRUFBQUEsUUFBUSxFQUFFLElBSEM7QUFJWEMsRUFBQUEsUUFBUSxFQUFFLElBSkM7QUFLWEMsRUFBQUEsTUFBTSxFQUFFLElBTEc7QUFNWEMsRUFBQUEsT0FBTyxFQUFFLElBTkU7QUFPWEMsRUFBQUEsTUFBTSxFQUFFLElBUEc7QUFRWEMsRUFBQUEsTUFBTSxFQUFFLElBUkc7QUFTWEMsRUFBQUEsUUFBUSxFQUFFLElBVEM7QUFVWEMsRUFBQUEsUUFBUSxFQUFFLElBVkM7QUFXWEMsRUFBQUEsTUFBTSxFQUFFLElBWEc7QUFZWEMsRUFBQUEsT0FBTyxFQUFFO0FBWkUsQ0FBYjtBQWVBLElBQUlDLGdCQUFnQixHQUFHLENBQXZCOztBQUVBLFNBQVNDLGlCQUFULEdBQTZCO0FBQzNCRCxFQUFBQSxnQkFBZ0I7O0FBQ2hCLE1BQUdBLGdCQUFnQixJQUFJLENBQXZCLEVBQTBCO0FBQ3hCRSxJQUFBQSxXQUFXO0FBQ1o7QUFDRjs7QUFFRCxTQUFTQSxXQUFULEdBQXVCLENBRXRCOztBQUdNLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNDLEVBQUQsRUFBUTtBQUNoQyxNQUFJQyxXQUFXLEdBQUcsQ0FDZCxZQURjLEVBQ0EsWUFEQSxFQUNjLGNBRGQsRUFDOEIsY0FEOUIsRUFDOEMsWUFEOUMsRUFDNEQsYUFENUQsRUFFZCxZQUZjLEVBRUEsWUFGQSxFQUVjLGNBRmQsRUFFOEIsY0FGOUIsRUFFOEMsWUFGOUMsRUFFNEQsYUFGNUQsQ0FBbEI7QUFLQUwsRUFBQUEsZ0JBQWdCLEdBQUdLLFdBQVcsQ0FBQ0MsTUFBL0I7O0FBRUEsT0FBSSxJQUFJQyxHQUFSLElBQWVwQixNQUFmLEVBQXVCO0FBQ3JCQSxJQUFBQSxNQUFNLENBQUNvQixHQUFELENBQU4sR0FBY0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQXRCLElBQUFBLE1BQU0sQ0FBQ29CLEdBQUQsQ0FBTixDQUFZRyxNQUFaLEdBQXFCVCxpQkFBckI7QUFDQWQsSUFBQUEsTUFBTSxDQUFDb0IsR0FBRCxDQUFOLENBQVlJLEdBQVosb0JBQTRCSixHQUE1QjtBQUNEOztBQUVETCxFQUFBQSxXQUFXLEdBQUdFLEVBQWQ7QUFDRCxDQWZNOzs7ZUFpQlFqQixNIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYW5pZWxwZWFjaC9EZXYvRElZLUFyY2FkZS1DYWJpbmV0L2dhbWVzL2FyY2FkZV9jaGVzcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBpbWFnZXMgPSB7XG4gIGJfcGF3bjogbnVsbCxcbiAgYl9yb29rOiBudWxsLFxuICBiX2tuaWdodDogbnVsbCxcbiAgYl9iaXNob3A6IG51bGwsXG4gIGJfa2luZzogbnVsbCxcbiAgYl9xdWVlbjogbnVsbCxcbiAgd19wYXduOiBudWxsLFxuICB3X3Jvb2s6IG51bGwsXG4gIHdfa25pZ2h0OiBudWxsLFxuICB3X2Jpc2hvcDogbnVsbCxcbiAgd19raW5nOiBudWxsLFxuICB3X3F1ZWVuOiBudWxsLFxufVxuXG5sZXQgaW1hZ2VzTGVmdFRvTG9hZCA9IDBcblxuZnVuY3Rpb24gaGFuZGxlSW1hZ2VMb2FkZWQoKSB7XG4gIGltYWdlc0xlZnRUb0xvYWQtLVxuICBpZihpbWFnZXNMZWZ0VG9Mb2FkIDw9IDApIHtcbiAgICBzdGFydEVuZ2luZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRFbmdpbmUoKSB7XG5cbn1cblxuXG5leHBvcnQgY29uc3QgbG9hZEltYWdlcyA9IChjYikgPT4ge1xuICBsZXQgaW1hZ2VfZmlsZXMgPSBbXG4gICAgICAnYl9wYXduLnBuZycsICdiX3Jvb2sucG5nJywgJ2Jfa25pZ2h0LnBuZycsICdiX2Jpc2hvcC5wbmcnLCAnYl9raW5nLnBuZycsICdiX3F1ZWVuLnBuZycsXG4gICAgICAnd19wYXduLnBuZycsICd3X3Jvb2sucG5nJywgJ3dfa25pZ2h0LnBuZycsICd3X2Jpc2hvcC5wbmcnLCAnd19raW5nLnBuZycsICd3X3F1ZWVuLnBuZycsXG4gIF1cblxuICBpbWFnZXNMZWZ0VG9Mb2FkID0gaW1hZ2VfZmlsZXMubGVuZ3RoXG5cbiAgZm9yKGxldCBrZXkgaW4gaW1hZ2VzKSB7XG4gICAgaW1hZ2VzW2tleV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKVxuICAgIGltYWdlc1trZXldLm9ubG9hZCA9IGhhbmRsZUltYWdlTG9hZGVkXG4gICAgaW1hZ2VzW2tleV0uc3JjID0gYGltYWdlcy8ke2tleX0ucG5nYFxuICB9XG5cbiAgc3RhcnRFbmdpbmUgPSBjYlxufVxuXG5leHBvcnQgZGVmYXVsdCBpbWFnZXMiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "ImageLoader.js"
      ],
      "names": [
        "images",
        "b_pawn",
        "b_rook",
        "b_knight",
        "b_bishop",
        "b_king",
        "b_queen",
        "w_pawn",
        "w_rook",
        "w_knight",
        "w_bishop",
        "w_king",
        "w_queen",
        "imagesLeftToLoad",
        "handleImageLoaded",
        "startEngine",
        "loadImages",
        "cb",
        "image_files",
        "length",
        "key",
        "document",
        "createElement",
        "onload",
        "src"
      ],
      "mappings": ";;;;;;AAAA,IAAIA,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,IADG;AAEXC,EAAAA,MAAM,EAAE,IAFG;AAGXC,EAAAA,QAAQ,EAAE,IAHC;AAIXC,EAAAA,QAAQ,EAAE,IAJC;AAKXC,EAAAA,MAAM,EAAE,IALG;AAMXC,EAAAA,OAAO,EAAE,IANE;AAOXC,EAAAA,MAAM,EAAE,IAPG;AAQXC,EAAAA,MAAM,EAAE,IARG;AASXC,EAAAA,QAAQ,EAAE,IATC;AAUXC,EAAAA,QAAQ,EAAE,IAVC;AAWXC,EAAAA,MAAM,EAAE,IAXG;AAYXC,EAAAA,OAAO,EAAE;AAZE,CAAb;AAeA,IAAIC,gBAAgB,GAAG,CAAvB;;AAEA,SAASC,iBAAT,GAA6B;AAC3BD,EAAAA,gBAAgB;;AAChB,MAAGA,gBAAgB,IAAI,CAAvB,EAA0B;AACxBE,IAAAA,WAAW;AACZ;AACF;;AAED,SAASA,WAAT,GAAuB,CAEtB;;AAGM,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD,EAAQ;AAChC,MAAIC,WAAW,GAAG,CACd,YADc,EACA,YADA,EACc,cADd,EAC8B,cAD9B,EAC8C,YAD9C,EAC4D,aAD5D,EAEd,YAFc,EAEA,YAFA,EAEc,cAFd,EAE8B,cAF9B,EAE8C,YAF9C,EAE4D,aAF5D,CAAlB;AAKAL,EAAAA,gBAAgB,GAAGK,WAAW,CAACC,MAA/B;;AAEA,OAAI,IAAIC,GAAR,IAAepB,MAAf,EAAuB;AACrBA,IAAAA,MAAM,CAACoB,GAAD,CAAN,GAAcC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACAtB,IAAAA,MAAM,CAACoB,GAAD,CAAN,CAAYG,MAAZ,GAAqBT,iBAArB;AACAd,IAAAA,MAAM,CAACoB,GAAD,CAAN,CAAYI,GAAZ,oBAA4BJ,GAA5B;AACD;;AAEDL,EAAAA,WAAW,GAAGE,EAAd;AACD,CAfM;;;eAiBQjB,M",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "let images = {\n  b_pawn: null,\n  b_rook: null,\n  b_knight: null,\n  b_bishop: null,\n  b_king: null,\n  b_queen: null,\n  w_pawn: null,\n  w_rook: null,\n  w_knight: null,\n  w_bishop: null,\n  w_king: null,\n  w_queen: null,\n}\n\nlet imagesLeftToLoad = 0\n\nfunction handleImageLoaded() {\n  imagesLeftToLoad--\n  if(imagesLeftToLoad <= 0) {\n    startEngine()\n  }\n}\n\nfunction startEngine() {\n\n}\n\n\nexport const loadImages = (cb) => {\n  let image_files = [\n      'b_pawn.png', 'b_rook.png', 'b_knight.png', 'b_bishop.png', 'b_king.png', 'b_queen.png',\n      'w_pawn.png', 'w_rook.png', 'w_knight.png', 'w_bishop.png', 'w_king.png', 'w_queen.png',\n  ]\n\n  imagesLeftToLoad = image_files.length\n\n  for(let key in images) {\n    images[key] = document.createElement('img')\n    images[key].onload = handleImageLoaded\n    images[key].src = `images/${key}.png`\n  }\n\n  startEngine = cb\n}\n\nexport default images"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/King.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/King.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/King.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/King.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "King.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar King =\n/*#__PURE__*/\nfunction () {\n  function King(coords, pieceCode) {\n    _classCallCheck(this, King);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_king : _ImageLoader[\"default\"].w_king;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(King, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var proposedIndex = currentIndex + _config[\"default\"].cols * this.magnitude; // move forward\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var pieceOnTile = board[proposedIndex];\n\n        if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - _config[\"default\"].cols * this.magnitude; // move backward\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile = board[proposedIndex];\n\n        if (!_pieceOnTile || !player.ownsPiece(_pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex + 1; // move right\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile2 = board[proposedIndex];\n\n        if (!_pieceOnTile2 || !player.ownsPiece(_pieceOnTile2.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - 1; // move left\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile3 = board[proposedIndex];\n\n        if (!_pieceOnTile3 || !player.ownsPiece(_pieceOnTile3.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex + _config[\"default\"].cols * this.magnitude + 1; // move forward right\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile4 = board[proposedIndex];\n\n        if (!_pieceOnTile4 || !player.ownsPiece(_pieceOnTile4.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex + _config[\"default\"].cols * this.magnitude - 1; // move forward left\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile5 = board[proposedIndex];\n\n        if (!_pieceOnTile5 || !player.ownsPiece(_pieceOnTile5.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - _config[\"default\"].cols * this.magnitude + 1; // move backwards right\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile6 = board[proposedIndex];\n\n        if (!_pieceOnTile6 || !player.ownsPiece(_pieceOnTile6.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      proposedIndex = currentIndex - _config[\"default\"].cols * this.magnitude - 1; // move backwards left\n\n      if (this.inBounds(currentIndex, proposedIndex)) {\n        var _pieceOnTile7 = board[proposedIndex];\n\n        if (!_pieceOnTile7 || !player.ownsPiece(_pieceOnTile7.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 7 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return King;\n}();\n\nvar _default = King;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "King.js"
      ],
      "names": [
        "King",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_king",
        "w_king",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "proposedIndex",
        "config",
        "cols",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": ";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;IAEMA,I;;;AACJ,gBAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAC7B,SAAKC,CAAL,GAASF,MAAM,CAACE,CAAhB;AACA,SAAKC,CAAL,GAASH,MAAM,CAACG,CAAhB;AACA,SAAKC,GAAL,GAAWJ,MAAM,CAACI,GAAlB;AACA,SAAKC,GAAL,GAAWL,MAAM,CAACK,GAAlB;AACA,SAAKC,GAAL,GAAWL,SAAS,GAAG,CAAZ,GAAgBM,wBAAOC,MAAvB,GAAgCD,wBAAOE,MAAlD;AACA,SAAKC,IAAL,GAAYT,SAAZ;AACA,SAAKU,SAAL,GAAiB,KAAKD,IAAL,GAAYE,IAAI,CAACC,GAAL,CAAS,KAAKH,IAAd,CAA7B;AACD;;;;qCAEgBI,M,EAAQC,K,EAAO;AAC9B,UAAIC,YAAY,GAAG,0BAAc,KAAKZ,GAAnB,EAAwB,KAAKC,GAA7B,CAAnB;AACA,UAAIY,aAAa,GAAG,EAApB;AAEA,UAAIC,aAAa,GAAGF,YAAY,GAAIG,mBAAOC,IAAP,GAAc,KAAKT,SAAvD,CAJ8B,CAIoC;;AAClE,UAAI,KAAKU,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,WAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,WAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,WAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAEDA,MAAAA,aAAa,GAAGF,YAAY,GAAIG,mBAAOC,IAAP,GAAc,KAAKT,SAAnD,CAZ8B,CAYgC;;AAC9D,UAAI,KAAKU,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,YAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,YAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,YAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAEDA,MAAAA,aAAa,GAAGF,YAAY,GAAG,CAA/B,CApB8B,CAoBG;;AACjC,UAAI,KAAKK,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,aAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,aAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,aAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAEDA,MAAAA,aAAa,GAAGF,YAAY,GAAG,CAA/B,CA5B8B,CA4BG;;AACjC,UAAI,KAAKK,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,aAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,aAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,aAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAEDA,MAAAA,aAAa,GAAGF,YAAY,GAAIG,mBAAOC,IAAP,GAAc,KAAKT,SAAnC,GAAgD,CAAhE,CApC8B,CAoCoC;;AAClE,UAAI,KAAKU,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,aAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,aAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,aAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAEDA,MAAAA,aAAa,GAAGF,YAAY,GAAIG,mBAAOC,IAAP,GAAc,KAAKT,SAAnC,GAAgD,CAAhE,CA5C8B,CA4CoC;;AAClE,UAAI,KAAKU,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,aAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,aAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,aAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAEDA,MAAAA,aAAa,GAAGF,YAAY,GAAIG,mBAAOC,IAAP,GAAc,KAAKT,SAAnC,GAAgD,CAAhE,CApD8B,CAoDoC;;AAClE,UAAI,KAAKU,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,aAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,aAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,aAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAEDA,MAAAA,aAAa,GAAGF,YAAY,GAAIG,mBAAOC,IAAP,GAAc,KAAKT,SAAnC,GAAgD,CAAhE,CA5D8B,CA4DoC;;AAClE,UAAI,KAAKU,QAAL,CAAcL,YAAd,EAA4BE,aAA5B,CAAJ,EAAgD;AAC9C,YAAII,aAAW,GAAGP,KAAK,CAACG,aAAD,CAAvB;;AACA,YAAI,CAACI,aAAD,IAAgB,CAACR,MAAM,CAACS,SAAP,CAAiBD,aAAW,CAACZ,IAA7B,CAArB,EAAyD;AACvDO,UAAAA,aAAa,CAACO,IAAd,CAAmBN,aAAnB;AACD;AACF;;AAED,aAAOD,aAAP;AACD;;;sCAEiBH,M,EAAQC,K,EAAOU,G,EAAK;AACpC,WAAKC,gBAAL,CAAsBZ,MAAtB,EAA8BC,KAA9B,EAAqCY,OAArC,CAA6C,UAAAT,aAAa,EAAI;AAC5D,YAAIU,cAAc,GAAG,0BAAcV,aAAd,CAArB;AACAO,QAAAA,GAAG,CAACI,QAAJ,CAAaD,cAAc,CAAC1B,CAA5B,EAA+B0B,cAAc,CAACzB,CAA9C,EAAiDgB,mBAAOW,SAAxD,EAAmEX,mBAAOY,UAA1E;AACD,OAHD;AAID;;;6BAEQC,S,EAAWC,S,EAAW;AAC7B,UAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB,eAAO,KAAP;AACD;;AACD,UAAIA,SAAS,GAAGd,mBAAOC,IAAP,GAAcD,mBAAOe,IAArC,EAA2C;AACzC,eAAO,KAAP;AACD;;AACD,UAAIF,SAAS,GAAGC,SAAZ,KAA0B,CAA1B,IAA+BD,SAAS,GAAG,CAAZ,KAAkB,CAArD,EAAwD;AACtD,eAAO,KAAP;AACD;;AACD,UAAIC,SAAS,GAAGD,SAAZ,KAA0B,CAA1B,IAA+BC,SAAS,GAAG,CAAZ,KAAkB,CAArD,EAAwD;AACtD,eAAO,KAAP;AACD;;AACD,UAAIA,SAAS,GAAGD,SAAZ,KAA0B,CAA1B,IAA+BC,SAAS,GAAG,CAAZ,KAAkB,CAArD,EAAwD;AACtD,eAAO,KAAP;AACD;;AACD,UAAIA,SAAS,GAAGD,SAAZ,KAA0B,CAA1B,IAA+BA,SAAS,GAAG,CAAZ,KAAiB,CAApD,EAAuD;AACrD,eAAO,KAAP;AACD;;AACD,UAAIC,SAAS,GAAGD,SAAZ,KAA0B,CAAC,CAA3B,IAAgCA,SAAS,GAAG,CAAZ,KAAkB,CAAtD,EAAyD;AACvD,eAAO,KAAP;AACD;;AACD,UAAIC,SAAS,GAAGD,SAAZ,KAA0B,CAAC,CAA3B,IAAgCC,SAAS,GAAG,CAAZ,KAAkB,CAAtD,EAAyD;AACvD,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;;yBAEIjC,M,EAAQ;AACX,WAAKE,CAAL,GAASF,MAAM,CAACE,CAAhB;AACA,WAAKC,CAAL,GAASH,MAAM,CAACG,CAAhB;AACA,WAAKC,GAAL,GAAWJ,MAAM,CAACI,GAAlB;AACA,WAAKC,GAAL,GAAWL,MAAM,CAACK,GAAlB;AACD;;;;;;eAGYN,I",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass King {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_king : images.w_king\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let proposedIndex = currentIndex + (config.cols * this.magnitude) // move forward\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - (config.cols * this.magnitude) // move backward\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex + 1 // move right\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - 1 // move left\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex + (config.cols * this.magnitude) + 1 // move forward right\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex + (config.cols * this.magnitude) - 1 // move forward left\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - (config.cols * this.magnitude) + 1 // move backwards right\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    proposedIndex = currentIndex - (config.cols * this.magnitude) - 1 // move backwards left\n    if (this.inBounds(currentIndex, proposedIndex)) {\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 7 && prevIndex % 8 ===0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default King"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604588
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Knight.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Knight.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Knight.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Knight.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Knight.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Knight =\n/*#__PURE__*/\nfunction () {\n  function Knight(coords, pieceCode) {\n    _classCallCheck(this, Knight);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_knight : _ImageLoader[\"default\"].w_knight;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Knight, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var proposedIndex;\n      var doubleForwardIndex = currentIndex + _config[\"default\"].cols * 2 * this.magnitude;\n      var singleRightIndex = doubleForwardIndex + 1;\n\n      if (this.inBounds(doubleForwardIndex, singleRightIndex)) {\n        proposedIndex = singleRightIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var singleLeftIndex = doubleForwardIndex - 1;\n\n      if (this.inBounds(doubleForwardIndex, singleLeftIndex)) {\n        proposedIndex = singleLeftIndex;\n        var _pieceOnTile = board[proposedIndex];\n\n        if (!_pieceOnTile || !player.ownsPiece(_pieceOnTile.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var doubleBackwardIndex = currentIndex - _config[\"default\"].cols * 2 * this.magnitude;\n      singleRightIndex = doubleBackwardIndex + 1;\n\n      if (this.inBounds(doubleBackwardIndex, singleRightIndex)) {\n        proposedIndex = singleRightIndex;\n        var _pieceOnTile2 = board[proposedIndex];\n\n        if (!_pieceOnTile2 || !player.ownsPiece(_pieceOnTile2.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      singleLeftIndex = doubleBackwardIndex - 1;\n\n      if (this.inBounds(doubleBackwardIndex, singleLeftIndex)) {\n        proposedIndex = singleLeftIndex;\n        var _pieceOnTile3 = board[proposedIndex];\n\n        if (!_pieceOnTile3 || !player.ownsPiece(_pieceOnTile3.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var singleForwardIndex = currentIndex + _config[\"default\"].cols * this.magnitude;\n      var doubleRightIndex = singleForwardIndex + 2;\n\n      if (this.inBounds(singleForwardIndex, doubleRightIndex)) {\n        proposedIndex = doubleRightIndex;\n        var _pieceOnTile4 = board[proposedIndex];\n\n        if (!_pieceOnTile4 || !player.ownsPiece(_pieceOnTile4.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var doubleLeftIndex = singleForwardIndex - 2;\n\n      if (this.inBounds(singleForwardIndex, doubleLeftIndex)) {\n        proposedIndex = doubleLeftIndex;\n        var _pieceOnTile5 = board[proposedIndex];\n\n        if (!_pieceOnTile5 || !player.ownsPiece(_pieceOnTile5.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      var singleBackwardIndex = currentIndex - _config[\"default\"].cols * this.magnitude;\n      doubleRightIndex = singleBackwardIndex + 2;\n\n      if (this.inBounds(singleBackwardIndex, doubleRightIndex)) {\n        proposedIndex = doubleRightIndex;\n        var _pieceOnTile6 = board[proposedIndex];\n\n        if (!_pieceOnTile6 || !player.ownsPiece(_pieceOnTile6.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      doubleLeftIndex = singleBackwardIndex - 2;\n\n      if (this.inBounds(singleBackwardIndex, doubleLeftIndex)) {\n        proposedIndex = doubleLeftIndex;\n        var _pieceOnTile7 = board[proposedIndex];\n\n        if (!_pieceOnTile7 || !player.ownsPiece(_pieceOnTile7.code)) {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 2 && (prevIndex % 8 === 0 || (prevIndex - 1) % 8 === 0)) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 2 && ((prevIndex + 1) % 8 === 0 || (prevIndex + 2) % 8 === 0)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Knight;\n}();\n\nvar _default = Knight;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Knight.js"
      ],
      "names": [
        "Knight",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_knight",
        "w_knight",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "proposedIndex",
        "doubleForwardIndex",
        "config",
        "cols",
        "singleRightIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "singleLeftIndex",
        "doubleBackwardIndex",
        "singleForwardIndex",
        "doubleRightIndex",
        "doubleLeftIndex",
        "singleBackwardIndex",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Knight {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_knight : images.w_knight\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n    let proposedIndex\n\n    let doubleForwardIndex = currentIndex + ((config.cols * 2) * this.magnitude)\n    let singleRightIndex = doubleForwardIndex + 1\n    if (this.inBounds(doubleForwardIndex, singleRightIndex)) {\n      proposedIndex = singleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let singleLeftIndex = doubleForwardIndex - 1\n    if (this.inBounds(doubleForwardIndex, singleLeftIndex)) {\n      proposedIndex = singleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let doubleBackwardIndex = currentIndex - ((config.cols * 2) * this.magnitude)\n    singleRightIndex = doubleBackwardIndex + 1\n    if (this.inBounds(doubleBackwardIndex, singleRightIndex)) {\n      proposedIndex = singleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    singleLeftIndex = doubleBackwardIndex - 1\n    if (this.inBounds(doubleBackwardIndex, singleLeftIndex)) {\n      proposedIndex = singleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let singleForwardIndex = currentIndex + (config.cols * this.magnitude)\n    let doubleRightIndex = singleForwardIndex + 2\n    if (this.inBounds(singleForwardIndex, doubleRightIndex)) {\n      proposedIndex = doubleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let doubleLeftIndex = singleForwardIndex - 2\n    if (this.inBounds(singleForwardIndex, doubleLeftIndex)) {\n      proposedIndex = doubleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    let singleBackwardIndex = currentIndex - (config.cols * this.magnitude)\n    doubleRightIndex = singleBackwardIndex + 2\n    if (this.inBounds(singleBackwardIndex, doubleRightIndex)) {\n      proposedIndex = doubleRightIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    doubleLeftIndex = singleBackwardIndex - 2\n    if (this.inBounds(singleBackwardIndex, doubleLeftIndex)) {\n      proposedIndex = doubleLeftIndex\n      let pieceOnTile = board[proposedIndex]\n      if (!pieceOnTile || !player.ownsPiece(pieceOnTile.code)) {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (prevIndex - nextIndex === 2 && (prevIndex % 8 === 0 || (prevIndex - 1) % 8 === 0)) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 2 && ((prevIndex + 1) % 8 === 0 || (prevIndex + 2) % 8 === 0)) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Knight"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604588
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Pawn.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Pawn.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Pawn.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Pawn.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Pawn.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Pawn =\n/*#__PURE__*/\nfunction () {\n  function Pawn(coords, pieceCode) {\n    _classCallCheck(this, Pawn);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_pawn : _ImageLoader[\"default\"].w_pawn;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Pawn, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var singleForwardIndex = currentIndex + _config[\"default\"].cols * this.magnitude;\n      var doubleForwardIndex = currentIndex + _config[\"default\"].cols * 2 * this.magnitude;\n      var possibleMoves = [];\n\n      if (this.inBounds(currentIndex, singleForwardIndex) && !board[singleForwardIndex]) {\n        possibleMoves.push(singleForwardIndex); // move up\n      }\n\n      if (this.inBounds(currentIndex, doubleForwardIndex) && this.row === _config[\"default\"].rows - 2 || this.row === 1) {\n        // first turn with pawn\n        possibleMoves.push(doubleForwardIndex); // move up twice\n      }\n\n      if (this.inBounds(singleForwardIndex, singleForwardIndex + 1) && board[singleForwardIndex + 1] && !player.ownsPiece(board[singleForwardIndex + 1].code)) {\n        // diagonal right piece to attack\n        possibleMoves.push(singleForwardIndex + 1);\n      }\n\n      if (this.inBounds(singleForwardIndex, singleForwardIndex - 1) && board[singleForwardIndex - 1] && !player.ownsPiece(board[singleForwardIndex - 1].code)) {\n        possibleMoves.push(singleForwardIndex - 1);\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows - 1) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Pawn;\n}();\n\nvar _default = Pawn;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBhd24uanMiXSwibmFtZXMiOlsiUGF3biIsImNvb3JkcyIsInBpZWNlQ29kZSIsIngiLCJ5Iiwicm93IiwiY29sIiwiaW1nIiwiaW1hZ2VzIiwiYl9wYXduIiwid19wYXduIiwiY29kZSIsIm1hZ25pdHVkZSIsIk1hdGgiLCJhYnMiLCJwbGF5ZXIiLCJib2FyZCIsImN1cnJlbnRJbmRleCIsInNpbmdsZUZvcndhcmRJbmRleCIsImNvbmZpZyIsImNvbHMiLCJkb3VibGVGb3J3YXJkSW5kZXgiLCJwb3NzaWJsZU1vdmVzIiwiaW5Cb3VuZHMiLCJwdXNoIiwicm93cyIsIm93bnNQaWVjZSIsImN0eCIsImdldFBvc3NpYmxlTW92ZXMiLCJmb3JFYWNoIiwicHJvcG9zZWRJbmRleCIsInByb3Bvc2VkQ29vcmRzIiwiZmlsbFJlY3QiLCJ0aWxlV2lkdGgiLCJ0aWxlSGVpZ2h0IiwicHJldkluZGV4IiwibmV4dEluZGV4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7SUFFTUEsSTs7O0FBQ0osZ0JBQVlDLE1BQVosRUFBb0JDLFNBQXBCLEVBQStCO0FBQUE7O0FBQzdCLFNBQUtDLENBQUwsR0FBU0YsTUFBTSxDQUFDRSxDQUFoQjtBQUNBLFNBQUtDLENBQUwsR0FBU0gsTUFBTSxDQUFDRyxDQUFoQjtBQUNBLFNBQUtDLEdBQUwsR0FBV0osTUFBTSxDQUFDSSxHQUFsQjtBQUNBLFNBQUtDLEdBQUwsR0FBV0wsTUFBTSxDQUFDSyxHQUFsQjtBQUNBLFNBQUtDLEdBQUwsR0FBV0wsU0FBUyxHQUFHLENBQVosR0FBZ0JNLHdCQUFPQyxNQUF2QixHQUFnQ0Qsd0JBQU9FLE1BQWxEO0FBQ0EsU0FBS0MsSUFBTCxHQUFZVCxTQUFaO0FBQ0EsU0FBS1UsU0FBTCxHQUFpQixLQUFLRCxJQUFMLEdBQVlFLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEtBQUtILElBQWQsQ0FBN0I7QUFDRDs7OztxQ0FFZ0JJLE0sRUFBUUMsSyxFQUFPO0FBQzlC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QVE7QUFDWCxXQUFLRSxDQUFMLEdBQVNGLE1BQU0sQ0FBQ0UsQ0FBaEI7QUFDQSxXQUFLQyxDQUFMLEdBQVNILE1BQU0sQ0FBQ0csQ0FBaEI7QUFDQSxXQUFLQyxHQUFMLEdBQVdKLE1BQU0sQ0FBQ0ksR0FBbEI7QUFDQSxXQUFLQyxHQUFMLEdBQVdMLE1BQU0sQ0FBQ0ssR0FBbEI7QUFDRDs7Ozs7O2VBR1lOLEkiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbmllbHBlYWNoL0Rldi9ESVktQXJjYWRlLUNhYmluZXQvZ2FtZXMvYXJjYWRlX2NoZXNzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGltYWdlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFwiLi9JbWFnZUxvYWRlclwiXG5pbXBvcnQgY29uZmlnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IHsgY29vcmRzVG9JbmRleCwgaW5kZXhUb0Nvb3JkcyB9IGZyb20gJy4vdXRpbHMnXG5cbmNsYXNzIFBhd24ge1xuICBjb25zdHJ1Y3Rvcihjb29yZHMsIHBpZWNlQ29kZSkge1xuICAgIHRoaXMueCA9IGNvb3Jkcy54XG4gICAgdGhpcy55ID0gY29vcmRzLnlcbiAgICB0aGlzLnJvdyA9IGNvb3Jkcy5yb3dcbiAgICB0aGlzLmNvbCA9IGNvb3Jkcy5jb2xcbiAgICB0aGlzLmltZyA9IHBpZWNlQ29kZSA+IDAgPyBpbWFnZXMuYl9wYXduIDogaW1hZ2VzLndfcGF3blxuICAgIHRoaXMuY29kZSA9IHBpZWNlQ29kZVxuICAgIHRoaXMubWFnbml0dWRlID0gdGhpcy5jb2RlIC8gTWF0aC5hYnModGhpcy5jb2RlKVxuICB9XG5cbiAgZ2V0UG9zc2libGVNb3ZlcyhwbGF5ZXIsIGJvYXJkKSB7XG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IGNvb3Jkc1RvSW5kZXgodGhpcy5yb3csIHRoaXMuY29sKVxuICAgIGxldCBzaW5nbGVGb3J3YXJkSW5kZXggPSBjdXJyZW50SW5kZXggKyAoY29uZmlnLmNvbHMgKiB0aGlzLm1hZ25pdHVkZSlcbiAgICBsZXQgZG91YmxlRm9yd2FyZEluZGV4ID0gY3VycmVudEluZGV4ICsgKChjb25maWcuY29scyAqIDIpICogdGhpcy5tYWduaXR1ZGUpXG4gICAgbGV0IHBvc3NpYmxlTW92ZXMgPSBbXVxuICAgIGlmKHRoaXMuaW5Cb3VuZHMoY3VycmVudEluZGV4LCBzaW5nbGVGb3J3YXJkSW5kZXgpICYmICFib2FyZFtzaW5nbGVGb3J3YXJkSW5kZXhdKSB7XG4gICAgICBwb3NzaWJsZU1vdmVzLnB1c2goc2luZ2xlRm9yd2FyZEluZGV4KSAvLyBtb3ZlIHVwXG4gICAgfVxuICAgIGlmICh0aGlzLmluQm91bmRzKGN1cnJlbnRJbmRleCwgZG91YmxlRm9yd2FyZEluZGV4KSAmJiB0aGlzLnJvdyA9PT0gY29uZmlnLnJvd3MgLSAyIHx8IHRoaXMucm93ID09PSAxKSB7IC8vIGZpcnN0IHR1cm4gd2l0aCBwYXduXG4gICAgICBwb3NzaWJsZU1vdmVzLnB1c2goZG91YmxlRm9yd2FyZEluZGV4KSAvLyBtb3ZlIHVwIHR3aWNlXG4gICAgfVxuICAgIGlmICh0aGlzLmluQm91bmRzKHNpbmdsZUZvcndhcmRJbmRleCwgc2luZ2xlRm9yd2FyZEluZGV4ICsgMSkgJiYgYm9hcmRbc2luZ2xlRm9yd2FyZEluZGV4ICsgMV0gJiYgIXBsYXllci5vd25zUGllY2UoYm9hcmRbc2luZ2xlRm9yd2FyZEluZGV4ICsgMV0uY29kZSkpIHsgLy8gZGlhZ29uYWwgcmlnaHQgcGllY2UgdG8gYXR0YWNrXG4gICAgICBwb3NzaWJsZU1vdmVzLnB1c2goc2luZ2xlRm9yd2FyZEluZGV4ICsgMSlcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5Cb3VuZHMoc2luZ2xlRm9yd2FyZEluZGV4LCBzaW5nbGVGb3J3YXJkSW5kZXggLSAxKSAmJiBib2FyZFtzaW5nbGVGb3J3YXJkSW5kZXggLSAxXSAmJiAhcGxheWVyLm93bnNQaWVjZShib2FyZFtzaW5nbGVGb3J3YXJkSW5kZXggLSAxXS5jb2RlKSkge1xuICAgICAgcG9zc2libGVNb3Zlcy5wdXNoKHNpbmdsZUZvcndhcmRJbmRleCAtIDEpXG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc3NpYmxlTW92ZXNcbiAgfVxuXG4gIHNob3dQb3NzaWJsZU1vdmVzKHBsYXllciwgYm9hcmQsIGN0eCkge1xuICAgIHRoaXMuZ2V0UG9zc2libGVNb3ZlcyhwbGF5ZXIsIGJvYXJkKS5mb3JFYWNoKHByb3Bvc2VkSW5kZXggPT4ge1xuICAgICAgbGV0IHByb3Bvc2VkQ29vcmRzID0gaW5kZXhUb0Nvb3Jkcyhwcm9wb3NlZEluZGV4KVxuICAgICAgY3R4LmZpbGxSZWN0KHByb3Bvc2VkQ29vcmRzLngsIHByb3Bvc2VkQ29vcmRzLnksIGNvbmZpZy50aWxlV2lkdGgsIGNvbmZpZy50aWxlSGVpZ2h0KVxuICAgIH0pXG4gIH1cblxuICBpbkJvdW5kcyhwcmV2SW5kZXgsIG5leHRJbmRleCkge1xuICAgIGlmIChuZXh0SW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5leHRJbmRleCA+IGNvbmZpZy5jb2xzICogY29uZmlnLnJvd3MgLSAxKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKHByZXZJbmRleCAtIG5leHRJbmRleCA9PT0gMSAmJiBwcmV2SW5kZXggJSA4ID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5leHRJbmRleCAtIHByZXZJbmRleCA9PT0gMSAmJiBuZXh0SW5kZXggJSA4ID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIG1vdmUoY29vcmRzKSB7XG4gICAgdGhpcy54ID0gY29vcmRzLnhcbiAgICB0aGlzLnkgPSBjb29yZHMueVxuICAgIHRoaXMucm93ID0gY29vcmRzLnJvd1xuICAgIHRoaXMuY29sID0gY29vcmRzLmNvbFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhd24iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "Pawn.js"
      ],
      "names": [
        "Pawn",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_pawn",
        "w_pawn",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "singleForwardIndex",
        "config",
        "cols",
        "doubleForwardIndex",
        "possibleMoves",
        "inBounds",
        "push",
        "rows",
        "ownsPiece",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedIndex",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import images                                     from \"./ImageLoader\"\nimport config                                     from './config'\nimport { coordsToIndex, indexToCoords } from './utils'\n\nclass Pawn {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_pawn : images.w_pawn\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let singleForwardIndex = currentIndex + (config.cols * this.magnitude)\n    let doubleForwardIndex = currentIndex + ((config.cols * 2) * this.magnitude)\n    let possibleMoves = []\n    if(this.inBounds(currentIndex, singleForwardIndex) && !board[singleForwardIndex]) {\n      possibleMoves.push(singleForwardIndex) // move up\n    }\n    if (this.inBounds(currentIndex, doubleForwardIndex) && this.row === config.rows - 2 || this.row === 1) { // first turn with pawn\n      possibleMoves.push(doubleForwardIndex) // move up twice\n    }\n    if (this.inBounds(singleForwardIndex, singleForwardIndex + 1) && board[singleForwardIndex + 1] && !player.ownsPiece(board[singleForwardIndex + 1].code)) { // diagonal right piece to attack\n      possibleMoves.push(singleForwardIndex + 1)\n    }\n    if (this.inBounds(singleForwardIndex, singleForwardIndex - 1) && board[singleForwardIndex - 1] && !player.ownsPiece(board[singleForwardIndex - 1].code)) {\n      possibleMoves.push(singleForwardIndex - 1)\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows - 1) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Pawn"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604589
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Queen.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Queen.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Queen.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Queen.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Queen.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Queen =\n/*#__PURE__*/\nfunction () {\n  function Queen(coords, pieceCode) {\n    _classCallCheck(this, Queen);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_queen : _ImageLoader[\"default\"].w_queen;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Queen, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var blocked = false;\n      var tilesAdvanced = 0;\n      var lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward\n        tilesAdvanced += _config[\"default\"].cols;\n        var proposedIndex = currentIndex + tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = proposedIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (pieceOnTile) {\n          if (player.ownsPiece(pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move right\n        tilesAdvanced += 1;\n\n        var _proposedIndex = currentIndex + tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex;\n        var _pieceOnTile = board[_proposedIndex];\n\n        if (_pieceOnTile) {\n          if (player.ownsPiece(_pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move left\n        tilesAdvanced += 1;\n\n        var _proposedIndex2 = currentIndex - tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex2)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex2;\n        var _pieceOnTile2 = board[_proposedIndex2];\n\n        if (_pieceOnTile2) {\n          if (player.ownsPiece(_pieceOnTile2.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex2);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex2);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move back\n        tilesAdvanced += _config[\"default\"].cols;\n\n        var _proposedIndex3 = currentIndex - tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex3)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex3;\n        var _pieceOnTile3 = board[_proposedIndex3];\n\n        if (_pieceOnTile3) {\n          if (player.ownsPiece(_pieceOnTile3.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex3);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex3);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      var tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex4 = currentIndex + tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex4)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex4;\n        var _pieceOnTile4 = board[_proposedIndex4];\n\n        if (_pieceOnTile4) {\n          if (player.ownsPiece(_pieceOnTile4.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex4);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex4);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex5 = currentIndex + tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex5)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex5;\n        var _pieceOnTile5 = board[_proposedIndex5];\n\n        if (_pieceOnTile5) {\n          if (player.ownsPiece(_pieceOnTile5.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex5);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex5);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards right\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex6 = currentIndex - tilesAdvanced * this.magnitude - tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex6)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex6;\n        var _pieceOnTile6 = board[_proposedIndex6];\n\n        if (_pieceOnTile6) {\n          if (player.ownsPiece(_pieceOnTile6.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex6);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex6);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      tilesShifted = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move backwards left\n        tilesAdvanced += _config[\"default\"].cols;\n        tilesShifted++;\n\n        var _proposedIndex7 = currentIndex - tilesAdvanced * this.magnitude + tilesShifted;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex7)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex7;\n        var _pieceOnTile7 = board[_proposedIndex7];\n\n        if (_pieceOnTile7) {\n          if (player.ownsPiece(_pieceOnTile7.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex7);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex7);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 7 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Queen;\n}();\n\nvar _default = Queen;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Queen.js"
      ],
      "names": [
        "Queen",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_queen",
        "w_queen",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "blocked",
        "tilesAdvanced",
        "lastIndexChecked",
        "config",
        "cols",
        "proposedIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "tilesShifted",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Queen {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_queen : images.w_queen\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let blocked = false\n    let tilesAdvanced = 0\n    let lastIndexChecked = currentIndex\n    while(!blocked) { // move forward\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex + (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move right\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex + tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move left\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex - tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move back\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex - (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    let tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move forward right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move forward left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex + (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards right\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) - tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    tilesShifted = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move backwards left\n      tilesAdvanced += config.cols\n      tilesShifted++\n      let proposedIndex = (currentIndex - (tilesAdvanced * this.magnitude)) + tilesShifted\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 9 && nextIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 7 && prevIndex % 8 ===0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -9 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === -7 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Queen"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604591
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Rook.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Rook.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Rook.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Rook.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Rook.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = _interopRequireDefault(require(\"./ImageLoader\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Rook =\n/*#__PURE__*/\nfunction () {\n  function Rook(coords, pieceCode) {\n    _classCallCheck(this, Rook);\n\n    this.x = coords.x;\n    this.y = coords.y;\n    this.row = coords.row;\n    this.col = coords.col;\n    this.img = pieceCode > 0 ? _ImageLoader[\"default\"].b_rook : _ImageLoader[\"default\"].w_rook;\n    this.code = pieceCode;\n    this.magnitude = this.code / Math.abs(this.code);\n  }\n\n  _createClass(Rook, [{\n    key: \"getPossibleMoves\",\n    value: function getPossibleMoves(player, board) {\n      var currentIndex = (0, _utils.coordsToIndex)(this.row, this.col);\n      var possibleMoves = [];\n      var blocked = false;\n      var tilesAdvanced = 0;\n      var lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move forward\n        tilesAdvanced += _config[\"default\"].cols;\n        var proposedIndex = currentIndex + tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = proposedIndex;\n        var pieceOnTile = board[proposedIndex];\n\n        if (pieceOnTile) {\n          if (player.ownsPiece(pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move back\n        tilesAdvanced += _config[\"default\"].cols;\n\n        var _proposedIndex = currentIndex - tilesAdvanced * this.magnitude;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex;\n        var _pieceOnTile = board[_proposedIndex];\n\n        if (_pieceOnTile) {\n          if (player.ownsPiece(_pieceOnTile.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move right\n        tilesAdvanced += 1;\n\n        var _proposedIndex2 = currentIndex + tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex2)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex2;\n        var _pieceOnTile2 = board[_proposedIndex2];\n\n        if (_pieceOnTile2) {\n          if (player.ownsPiece(_pieceOnTile2.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex2);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex2);\n        }\n      }\n\n      blocked = false;\n      tilesAdvanced = 0;\n      lastIndexChecked = currentIndex;\n\n      while (!blocked) {\n        // move left\n        tilesAdvanced += 1;\n\n        var _proposedIndex3 = currentIndex - tilesAdvanced;\n\n        if (!this.inBounds(lastIndexChecked, _proposedIndex3)) {\n          break; // can't advance off the board\n        }\n\n        lastIndexChecked = _proposedIndex3;\n        var _pieceOnTile3 = board[_proposedIndex3];\n\n        if (_pieceOnTile3) {\n          if (player.ownsPiece(_pieceOnTile3.code)) {\n            blocked = true;\n          } else {\n            possibleMoves.push(_proposedIndex3);\n            blocked = true;\n          }\n        } else {\n          possibleMoves.push(_proposedIndex3);\n        }\n      }\n\n      return possibleMoves;\n    }\n  }, {\n    key: \"showPossibleMoves\",\n    value: function showPossibleMoves(player, board, ctx) {\n      this.getPossibleMoves(player, board).forEach(function (proposedIndex) {\n        var proposedCoords = (0, _utils.indexToCoords)(proposedIndex);\n        ctx.fillRect(proposedCoords.x, proposedCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      });\n    }\n  }, {\n    key: \"inBounds\",\n    value: function inBounds(prevIndex, nextIndex) {\n      if (nextIndex < 0) {\n        return false;\n      }\n\n      if (nextIndex > _config[\"default\"].cols * _config[\"default\"].rows - 1) {\n        return false;\n      }\n\n      if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n        return false;\n      }\n\n      if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"move\",\n    value: function move(coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n      this.row = coords.row;\n      this.col = coords.col;\n    }\n  }]);\n\n  return Rook;\n}();\n\nvar _default = Rook;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Rook.js"
      ],
      "names": [
        "Rook",
        "coords",
        "pieceCode",
        "x",
        "y",
        "row",
        "col",
        "img",
        "images",
        "b_rook",
        "w_rook",
        "code",
        "magnitude",
        "Math",
        "abs",
        "player",
        "board",
        "currentIndex",
        "possibleMoves",
        "blocked",
        "tilesAdvanced",
        "lastIndexChecked",
        "config",
        "cols",
        "proposedIndex",
        "inBounds",
        "pieceOnTile",
        "ownsPiece",
        "push",
        "ctx",
        "getPossibleMoves",
        "forEach",
        "proposedCoords",
        "fillRect",
        "tileWidth",
        "tileHeight",
        "prevIndex",
        "nextIndex",
        "rows"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import images                           from \"./ImageLoader\"\nimport config                           from './config'\nimport { coordsToIndex, indexToCoords } from \"./utils\";\n\nclass Rook {\n  constructor(coords, pieceCode) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n    this.img = pieceCode > 0 ? images.b_rook : images.w_rook\n    this.code = pieceCode\n    this.magnitude = this.code / Math.abs(this.code)\n  }\n\n  getPossibleMoves(player, board) {\n    let currentIndex = coordsToIndex(this.row, this.col)\n    let possibleMoves = []\n\n    let blocked = false\n    let tilesAdvanced = 0\n    let lastIndexChecked = currentIndex\n    while(!blocked) { // move forward\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex + (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move back\n      tilesAdvanced += config.cols\n      let proposedIndex = currentIndex - (tilesAdvanced * this.magnitude)\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move right\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex + tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    blocked = false\n    tilesAdvanced = 0\n    lastIndexChecked = currentIndex\n    while(!blocked) { // move left\n      tilesAdvanced += 1\n      let proposedIndex = currentIndex - tilesAdvanced\n      if (!this.inBounds(lastIndexChecked, proposedIndex)) {\n        break // can't advance off the board\n      }\n      lastIndexChecked = proposedIndex\n      let pieceOnTile = board[proposedIndex]\n      if(pieceOnTile) {\n        if(player.ownsPiece(pieceOnTile.code)) {\n          blocked = true\n        }\n        else {\n          possibleMoves.push(proposedIndex)\n          blocked = true\n        }\n      } else {\n        possibleMoves.push(proposedIndex)\n      }\n    }\n\n    return possibleMoves\n  }\n\n  showPossibleMoves(player, board, ctx) {\n    this.getPossibleMoves(player, board).forEach(proposedIndex => {\n      let proposedCoords = indexToCoords(proposedIndex)\n      ctx.fillRect(proposedCoords.x, proposedCoords.y, config.tileWidth, config.tileHeight)\n    })\n  }\n\n  inBounds(prevIndex, nextIndex) {\n    if (nextIndex < 0) {\n      return false\n    }\n    if (nextIndex > config.cols * config.rows - 1) {\n      return false\n    }\n    if (prevIndex - nextIndex === 1 && prevIndex % 8 === 0) {\n      return false\n    }\n    if (nextIndex - prevIndex === 1 && nextIndex % 8 === 0) {\n      return false\n    }\n    return true\n  }\n\n  move(coords) {\n    this.x = coords.x\n    this.y = coords.y\n    this.row = coords.row\n    this.col = coords.col\n  }\n}\n\nexport default Rook"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604594
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Engine.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Engine.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Engine.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Engine.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Engine.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ImageLoader = require(\"./ImageLoader\");\n\nvar _Input = _interopRequireDefault(require(\"./Input\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _Messager = _interopRequireDefault(require(\"./Messager\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Engine = function Engine(onStartUp, ctx) {\n  var _this = this;\n\n  _classCallCheck(this, Engine);\n\n  _defineProperty(this, \"startUp\", function () {\n    _this.onStartUp();\n\n    _this.lastUpdateTime = new Date().getTime();\n    _this.frameCounter = 0;\n    _this.frameTime = 0;\n    window.requestAnimationFrame(_this.loop);\n  });\n\n  _defineProperty(this, \"loop\", function () {\n    var currentTime = new Date().getTime();\n    var deltaTime = (currentTime - _this.lastUpdateTime) / 1000;\n    _this.lastUpdateTime = currentTime;\n    _this.frameCounter++;\n    _this.frameTime += deltaTime;\n\n    if (_this.frameTime >= .5) {\n      _this.frameTime = .5 - _this.frameTime;\n      _this.fps = _this.frameCounter * 2;\n      _this.frameCounter = 0;\n      _config[\"default\"].fpsTag.innerText = \"FPS: \".concat(_this.fps);\n    }\n\n    if (_this.update) {\n      _this.update();\n    }\n\n    if (_this.draw) {\n      _this.draw();\n    }\n\n    window.requestAnimationFrame(_this.loop);\n  });\n\n  this.ctx = ctx;\n  this.onStartUp = onStartUp;\n  this.fps = 0;\n  this.messager = new _Messager[\"default\"]();\n  new _Input[\"default\"](this.messager);\n  (0, _ImageLoader.loadImages)(this.startUp);\n};\n\nvar _default = Engine;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVuZ2luZS5qcyJdLCJuYW1lcyI6WyJFbmdpbmUiLCJvblN0YXJ0VXAiLCJjdHgiLCJsYXN0VXBkYXRlVGltZSIsIkRhdGUiLCJnZXRUaW1lIiwiZnJhbWVDb3VudGVyIiwiZnJhbWVUaW1lIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibG9vcCIsImN1cnJlbnRUaW1lIiwiZGVsdGFUaW1lIiwiZnBzIiwiY29uZmlnIiwiZnBzVGFnIiwiaW5uZXJUZXh0IiwidXBkYXRlIiwiZHJhdyIsIm1lc3NhZ2VyIiwiTWVzc2FnZXIiLCJJbnB1dCIsInN0YXJ0VXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7SUFFTUEsTSxHQUNKLGdCQUFZQyxTQUFaLEVBQXVCQyxHQUF2QixFQUE0QjtBQUFBOztBQUFBOztBQUFBLG1DQVNsQixZQUFNO0FBQ2QsSUFBQSxLQUFJLENBQUNELFNBQUw7O0FBQ0EsSUFBQSxLQUFJLENBQUNFLGNBQUwsR0FBc0IsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQXRCO0FBQ0EsSUFBQSxLQUFJLENBQUNDLFlBQUwsR0FBb0IsQ0FBcEI7QUFDQSxJQUFBLEtBQUksQ0FBQ0MsU0FBTCxHQUFpQixDQUFqQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLHFCQUFQLENBQTZCLEtBQUksQ0FBQ0MsSUFBbEM7QUFDRCxHQWYyQjs7QUFBQSxnQ0FpQnJCLFlBQU07QUFDWCxRQUFNQyxXQUFXLEdBQUcsSUFBSVAsSUFBSixHQUFXQyxPQUFYLEVBQXBCO0FBQ0EsUUFBTU8sU0FBUyxHQUFHLENBQUNELFdBQVcsR0FBRyxLQUFJLENBQUNSLGNBQXBCLElBQXNDLElBQXhEO0FBQ0EsSUFBQSxLQUFJLENBQUNBLGNBQUwsR0FBc0JRLFdBQXRCO0FBRUEsSUFBQSxLQUFJLENBQUNMLFlBQUw7QUFDQSxJQUFBLEtBQUksQ0FBQ0MsU0FBTCxJQUFrQkssU0FBbEI7O0FBRUEsUUFBRyxLQUFJLENBQUNMLFNBQUwsSUFBa0IsRUFBckIsRUFBeUI7QUFDdkIsTUFBQSxLQUFJLENBQUNBLFNBQUwsR0FBaUIsS0FBSyxLQUFJLENBQUNBLFNBQTNCO0FBQ0EsTUFBQSxLQUFJLENBQUNNLEdBQUwsR0FBVyxLQUFJLENBQUNQLFlBQUwsR0FBb0IsQ0FBL0I7QUFDQSxNQUFBLEtBQUksQ0FBQ0EsWUFBTCxHQUFvQixDQUFwQjtBQUNBUSx5QkFBT0MsTUFBUCxDQUFjQyxTQUFkLGtCQUFrQyxLQUFJLENBQUNILEdBQXZDO0FBQ0Q7O0FBRUQsUUFBRyxLQUFJLENBQUNJLE1BQVIsRUFBZ0I7QUFDZCxNQUFBLEtBQUksQ0FBQ0EsTUFBTDtBQUNEOztBQUVELFFBQUcsS0FBSSxDQUFDQyxJQUFSLEVBQWM7QUFDWixNQUFBLEtBQUksQ0FBQ0EsSUFBTDtBQUNEOztBQUNEVixJQUFBQSxNQUFNLENBQUNDLHFCQUFQLENBQTZCLEtBQUksQ0FBQ0MsSUFBbEM7QUFDRCxHQXhDMkI7O0FBQzFCLE9BQUtSLEdBQUwsR0FBV0EsR0FBWDtBQUNBLE9BQUtELFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsT0FBS1ksR0FBTCxHQUFXLENBQVg7QUFDQSxPQUFLTSxRQUFMLEdBQWdCLElBQUlDLG9CQUFKLEVBQWhCO0FBQ0EsTUFBSUMsaUJBQUosQ0FBVSxLQUFLRixRQUFmO0FBQ0EsK0JBQVcsS0FBS0csT0FBaEI7QUFDRCxDOztlQW9DWXRCLE0iLCJzb3VyY2VSb290IjoiL1VzZXJzL2RhbmllbHBlYWNoL0Rldi9ESVktQXJjYWRlLUNhYmluZXQvZ2FtZXMvYXJjYWRlX2NoZXNzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtsb2FkSW1hZ2VzfSBmcm9tIFwiLi9JbWFnZUxvYWRlclwiO1xuaW1wb3J0IElucHV0IGZyb20gJy4vSW5wdXQnXG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IE1lc3NhZ2VyICAgICAgICAgICAgZnJvbSAnLi9NZXNzYWdlcidcblxuY2xhc3MgRW5naW5lIHtcbiAgY29uc3RydWN0b3Iob25TdGFydFVwLCBjdHgpIHtcbiAgICB0aGlzLmN0eCA9IGN0eFxuICAgIHRoaXMub25TdGFydFVwID0gb25TdGFydFVwXG4gICAgdGhpcy5mcHMgPSAwXG4gICAgdGhpcy5tZXNzYWdlciA9IG5ldyBNZXNzYWdlcigpXG4gICAgbmV3IElucHV0KHRoaXMubWVzc2FnZXIpXG4gICAgbG9hZEltYWdlcyh0aGlzLnN0YXJ0VXApXG4gIH1cblxuICBzdGFydFVwID0gKCkgPT4ge1xuICAgIHRoaXMub25TdGFydFVwKClcbiAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICB0aGlzLmZyYW1lQ291bnRlciA9IDBcbiAgICB0aGlzLmZyYW1lVGltZSA9IDBcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubG9vcClcbiAgfVxuXG4gIGxvb3AgPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIGNvbnN0IGRlbHRhVGltZSA9IChjdXJyZW50VGltZSAtIHRoaXMubGFzdFVwZGF0ZVRpbWUpIC8gMTAwMFxuICAgIHRoaXMubGFzdFVwZGF0ZVRpbWUgPSBjdXJyZW50VGltZVxuXG4gICAgdGhpcy5mcmFtZUNvdW50ZXIrK1xuICAgIHRoaXMuZnJhbWVUaW1lICs9IGRlbHRhVGltZVxuXG4gICAgaWYodGhpcy5mcmFtZVRpbWUgPj0gLjUpIHtcbiAgICAgIHRoaXMuZnJhbWVUaW1lID0gLjUgLSB0aGlzLmZyYW1lVGltZVxuICAgICAgdGhpcy5mcHMgPSB0aGlzLmZyYW1lQ291bnRlciAqIDJcbiAgICAgIHRoaXMuZnJhbWVDb3VudGVyID0gMFxuICAgICAgY29uZmlnLmZwc1RhZy5pbm5lclRleHQgPSBgRlBTOiAke3RoaXMuZnBzfWBcbiAgICB9XG5cbiAgICBpZih0aGlzLnVwZGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGUoKVxuICAgIH1cblxuICAgIGlmKHRoaXMuZHJhdykge1xuICAgICAgdGhpcy5kcmF3KClcbiAgICB9XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmxvb3ApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRW5naW5lIl19",
    "map": {
      "version": 3,
      "sources": [
        "Engine.js"
      ],
      "names": [
        "Engine",
        "onStartUp",
        "ctx",
        "lastUpdateTime",
        "Date",
        "getTime",
        "frameCounter",
        "frameTime",
        "window",
        "requestAnimationFrame",
        "loop",
        "currentTime",
        "deltaTime",
        "fps",
        "config",
        "fpsTag",
        "innerText",
        "update",
        "draw",
        "messager",
        "Messager",
        "Input",
        "startUp"
      ],
      "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;IAEMA,M,GACJ,gBAAYC,SAAZ,EAAuBC,GAAvB,EAA4B;AAAA;;AAAA;;AAAA,mCASlB,YAAM;AACd,IAAA,KAAI,CAACD,SAAL;;AACA,IAAA,KAAI,CAACE,cAAL,GAAsB,IAAIC,IAAJ,GAAWC,OAAX,EAAtB;AACA,IAAA,KAAI,CAACC,YAAL,GAAoB,CAApB;AACA,IAAA,KAAI,CAACC,SAAL,GAAiB,CAAjB;AACAC,IAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAI,CAACC,IAAlC;AACD,GAf2B;;AAAA,gCAiBrB,YAAM;AACX,QAAMC,WAAW,GAAG,IAAIP,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMO,SAAS,GAAG,CAACD,WAAW,GAAG,KAAI,CAACR,cAApB,IAAsC,IAAxD;AACA,IAAA,KAAI,CAACA,cAAL,GAAsBQ,WAAtB;AAEA,IAAA,KAAI,CAACL,YAAL;AACA,IAAA,KAAI,CAACC,SAAL,IAAkBK,SAAlB;;AAEA,QAAG,KAAI,CAACL,SAAL,IAAkB,EAArB,EAAyB;AACvB,MAAA,KAAI,CAACA,SAAL,GAAiB,KAAK,KAAI,CAACA,SAA3B;AACA,MAAA,KAAI,CAACM,GAAL,GAAW,KAAI,CAACP,YAAL,GAAoB,CAA/B;AACA,MAAA,KAAI,CAACA,YAAL,GAAoB,CAApB;AACAQ,yBAAOC,MAAP,CAAcC,SAAd,kBAAkC,KAAI,CAACH,GAAvC;AACD;;AAED,QAAG,KAAI,CAACI,MAAR,EAAgB;AACd,MAAA,KAAI,CAACA,MAAL;AACD;;AAED,QAAG,KAAI,CAACC,IAAR,EAAc;AACZ,MAAA,KAAI,CAACA,IAAL;AACD;;AACDV,IAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAI,CAACC,IAAlC;AACD,GAxC2B;;AAC1B,OAAKR,GAAL,GAAWA,GAAX;AACA,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKY,GAAL,GAAW,CAAX;AACA,OAAKM,QAAL,GAAgB,IAAIC,oBAAJ,EAAhB;AACA,MAAIC,iBAAJ,CAAU,KAAKF,QAAf;AACA,+BAAW,KAAKG,OAAhB;AACD,C;;eAoCYtB,M",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import {loadImages} from \"./ImageLoader\";\nimport Input from './Input'\nimport config from './config'\nimport Messager            from './Messager'\n\nclass Engine {\n  constructor(onStartUp, ctx) {\n    this.ctx = ctx\n    this.onStartUp = onStartUp\n    this.fps = 0\n    this.messager = new Messager()\n    new Input(this.messager)\n    loadImages(this.startUp)\n  }\n\n  startUp = () => {\n    this.onStartUp()\n    this.lastUpdateTime = new Date().getTime()\n    this.frameCounter = 0\n    this.frameTime = 0\n    window.requestAnimationFrame(this.loop)\n  }\n\n  loop = () => {\n    const currentTime = new Date().getTime()\n    const deltaTime = (currentTime - this.lastUpdateTime) / 1000\n    this.lastUpdateTime = currentTime\n\n    this.frameCounter++\n    this.frameTime += deltaTime\n\n    if(this.frameTime >= .5) {\n      this.frameTime = .5 - this.frameTime\n      this.fps = this.frameCounter * 2\n      this.frameCounter = 0\n      config.fpsTag.innerText = `FPS: ${this.fps}`\n    }\n\n    if(this.update) {\n      this.update()\n    }\n\n    if(this.draw) {\n      this.draw()\n    }\n    window.requestAnimationFrame(this.loop)\n  }\n}\n\nexport default Engine"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Input.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Input.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Input.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Input.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Input.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Input =\n/*#__PURE__*/\nfunction () {\n  function Input(messager) {\n    _classCallCheck(this, Input);\n\n    this.messager = messager;\n    this.setupEventListeners();\n  }\n\n  _createClass(Input, [{\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n\n      document.onkeydown = function (evt) {\n        _this.messager.post({\n          type: _config[\"default\"].messageTypes.keyDown,\n          keyCode: evt.keyCode\n        });\n      };\n    }\n  }]);\n\n  return Input;\n}();\n\nvar _default = Input;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklucHV0LmpzIl0sIm5hbWVzIjpbIklucHV0IiwibWVzc2FnZXIiLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwiZG9jdW1lbnQiLCJvbmtleWRvd24iLCJldnQiLCJwb3N0IiwidHlwZSIsImNvbmZpZyIsIm1lc3NhZ2VUeXBlcyIsImtleURvd24iLCJrZXlDb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7SUFFTUEsSzs7O0FBQ0osaUJBQVlDLFFBQVosRUFBc0I7QUFBQTs7QUFDcEIsU0FBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxtQkFBTDtBQUNEOzs7OzBDQUVxQjtBQUFBOztBQUNwQkMsTUFBQUEsUUFBUSxDQUFDQyxTQUFULEdBQXFCLFVBQUNDLEdBQUQsRUFBUztBQUM1QixRQUFBLEtBQUksQ0FBQ0osUUFBTCxDQUFjSyxJQUFkLENBQW1CO0FBQUNDLFVBQUFBLElBQUksRUFBRUMsbUJBQU9DLFlBQVAsQ0FBb0JDLE9BQTNCO0FBQW9DQyxVQUFBQSxPQUFPLEVBQUVOLEdBQUcsQ0FBQ007QUFBakQsU0FBbkI7QUFDRCxPQUZEO0FBR0Q7Ozs7OztlQUdZWCxLIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kYW5pZWxwZWFjaC9EZXYvRElZLUFyY2FkZS1DYWJpbmV0L2dhbWVzL2FyY2FkZV9jaGVzcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnXG5cbmNsYXNzIElucHV0IHtcbiAgY29uc3RydWN0b3IobWVzc2FnZXIpIHtcbiAgICB0aGlzLm1lc3NhZ2VyID0gbWVzc2FnZXJcbiAgICB0aGlzLnNldHVwRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgc2V0dXBFdmVudExpc3RlbmVycygpIHtcbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSAoZXZ0KSA9PiB7XG4gICAgICB0aGlzLm1lc3NhZ2VyLnBvc3Qoe3R5cGU6IGNvbmZpZy5tZXNzYWdlVHlwZXMua2V5RG93biwga2V5Q29kZTogZXZ0LmtleUNvZGV9KVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnB1dCJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "Input.js"
      ],
      "names": [
        "Input",
        "messager",
        "setupEventListeners",
        "document",
        "onkeydown",
        "evt",
        "post",
        "type",
        "config",
        "messageTypes",
        "keyDown",
        "keyCode"
      ],
      "mappings": ";;;;;;;AAAA;;;;;;;;;;IAEMA,K;;;AACJ,iBAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,mBAAL;AACD;;;;0CAEqB;AAAA;;AACpBC,MAAAA,QAAQ,CAACC,SAAT,GAAqB,UAACC,GAAD,EAAS;AAC5B,QAAA,KAAI,CAACJ,QAAL,CAAcK,IAAd,CAAmB;AAACC,UAAAA,IAAI,EAAEC,mBAAOC,YAAP,CAAoBC,OAA3B;AAAoCC,UAAAA,OAAO,EAAEN,GAAG,CAACM;AAAjD,SAAnB;AACD,OAFD;AAGD;;;;;;eAGYX,K",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import config from './config'\n\nclass Input {\n  constructor(messager) {\n    this.messager = messager\n    this.setupEventListeners()\n  }\n\n  setupEventListeners() {\n    document.onkeydown = (evt) => {\n      this.messager.post({type: config.messageTypes.keyDown, keyCode: evt.keyCode})\n    }\n  }\n}\n\nexport default Input"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604587
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Messager.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Messager.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Messager.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Messager.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Messager.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Messager =\n/*#__PURE__*/\nfunction () {\n  function Messager() {\n    _classCallCheck(this, Messager);\n\n    this.subscribers = [];\n  }\n\n  _createClass(Messager, [{\n    key: \"subscribe\",\n    value: function subscribe(subscriber) {\n      if (this.subscribers.indexOf(subscriber) < 0) {\n        this.subscribers.push(subscriber);\n        console.log('subscribed');\n      }\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(subscriber) {\n      var subIndex = this.subscribers.indexOf(subscriber);\n      this.subscribers.splice(subIndex, 1);\n    }\n  }, {\n    key: \"post\",\n    value: function post(msg) {\n      this.subscribers.forEach(function (sub) {\n        sub.handleMsg(msg);\n      });\n    }\n  }]);\n\n  return Messager;\n}();\n\nvar _default = Messager;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1lc3NhZ2VyLmpzIl0sIm5hbWVzIjpbIk1lc3NhZ2VyIiwic3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVyIiwiaW5kZXhPZiIsInB1c2giLCJjb25zb2xlIiwibG9nIiwic3ViSW5kZXgiLCJzcGxpY2UiLCJtc2ciLCJmb3JFYWNoIiwic3ViIiwiaGFuZGxlTXNnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0lBQU1BLFE7OztBQUNKLHNCQUFjO0FBQUE7O0FBQ1osU0FBS0MsV0FBTCxHQUFtQixFQUFuQjtBQUNEOzs7OzhCQUVTQyxVLEVBQVk7QUFDcEIsVUFBRyxLQUFLRCxXQUFMLENBQWlCRSxPQUFqQixDQUF5QkQsVUFBekIsSUFBdUMsQ0FBMUMsRUFBNkM7QUFDM0MsYUFBS0QsV0FBTCxDQUFpQkcsSUFBakIsQ0FBc0JGLFVBQXRCO0FBQ0FHLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFlBQVo7QUFDRDtBQUNGOzs7Z0NBRVdKLFUsRUFBWTtBQUN0QixVQUFJSyxRQUFRLEdBQUcsS0FBS04sV0FBTCxDQUFpQkUsT0FBakIsQ0FBeUJELFVBQXpCLENBQWY7QUFDQSxXQUFLRCxXQUFMLENBQWlCTyxNQUFqQixDQUF3QkQsUUFBeEIsRUFBa0MsQ0FBbEM7QUFDRDs7O3lCQUVJRSxHLEVBQUs7QUFDUixXQUFLUixXQUFMLENBQWlCUyxPQUFqQixDQUF5QixVQUFBQyxHQUFHLEVBQUk7QUFDOUJBLFFBQUFBLEdBQUcsQ0FBQ0MsU0FBSixDQUFjSCxHQUFkO0FBQ0QsT0FGRDtBQUdEOzs7Ozs7ZUFHWVQsUSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGFuaWVscGVhY2gvRGV2L0RJWS1BcmNhZGUtQ2FiaW5ldC9nYW1lcy9hcmNhZGVfY2hlc3MiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBNZXNzYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBbXVxuICB9XG5cbiAgc3Vic2NyaWJlKHN1YnNjcmliZXIpIHtcbiAgICBpZih0aGlzLnN1YnNjcmliZXJzLmluZGV4T2Yoc3Vic2NyaWJlcikgPCAwKSB7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcilcbiAgICAgIGNvbnNvbGUubG9nKCdzdWJzY3JpYmVkJylcbiAgICB9XG4gIH1cblxuICB1bnN1YnNjcmliZShzdWJzY3JpYmVyKSB7XG4gICAgbGV0IHN1YkluZGV4ID0gdGhpcy5zdWJzY3JpYmVycy5pbmRleE9mKHN1YnNjcmliZXIpXG4gICAgdGhpcy5zdWJzY3JpYmVycy5zcGxpY2Uoc3ViSW5kZXgsIDEpXG4gIH1cblxuICBwb3N0KG1zZykge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzdWIgPT4ge1xuICAgICAgc3ViLmhhbmRsZU1zZyhtc2cpXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlciJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "Messager.js"
      ],
      "names": [
        "Messager",
        "subscribers",
        "subscriber",
        "indexOf",
        "push",
        "console",
        "log",
        "subIndex",
        "splice",
        "msg",
        "forEach",
        "sub",
        "handleMsg"
      ],
      "mappings": ";;;;;;;;;;;;;IAAMA,Q;;;AACJ,sBAAc;AAAA;;AACZ,SAAKC,WAAL,GAAmB,EAAnB;AACD;;;;8BAESC,U,EAAY;AACpB,UAAG,KAAKD,WAAL,CAAiBE,OAAjB,CAAyBD,UAAzB,IAAuC,CAA1C,EAA6C;AAC3C,aAAKD,WAAL,CAAiBG,IAAjB,CAAsBF,UAAtB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD;AACF;;;gCAEWJ,U,EAAY;AACtB,UAAIK,QAAQ,GAAG,KAAKN,WAAL,CAAiBE,OAAjB,CAAyBD,UAAzB,CAAf;AACA,WAAKD,WAAL,CAAiBO,MAAjB,CAAwBD,QAAxB,EAAkC,CAAlC;AACD;;;yBAEIE,G,EAAK;AACR,WAAKR,WAAL,CAAiBS,OAAjB,CAAyB,UAAAC,GAAG,EAAI;AAC9BA,QAAAA,GAAG,CAACC,SAAJ,CAAcH,GAAd;AACD,OAFD;AAGD;;;;;;eAGYT,Q",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "class Messager {\n  constructor() {\n    this.subscribers = []\n  }\n\n  subscribe(subscriber) {\n    if(this.subscribers.indexOf(subscriber) < 0) {\n      this.subscribers.push(subscriber)\n      console.log('subscribed')\n    }\n  }\n\n  unsubscribe(subscriber) {\n    let subIndex = this.subscribers.indexOf(subscriber)\n    this.subscribers.splice(subIndex, 1)\n  }\n\n  post(msg) {\n    this.subscribers.forEach(sub => {\n      sub.handleMsg(msg)\n    })\n  }\n}\n\nexport default Messager"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604588
  },
  "{\"sourceRoot\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"filename\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Player.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Player.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Player.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess/Player.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
        "sourceFileName": "Player.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar hm_players = 0;\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  function Player(keymap, messager) {\n    _classCallCheck(this, Player);\n\n    this.keymap = keymap;\n    this.messager = messager;\n    hm_players++;\n    this.playerNumber = hm_players;\n    this.currentTile = this.playerNumber === 1 ? 63 : 0;\n    this.heldPiece = null;\n    this.magnitude = this.playerNumber === 1 ? -1 : 1;\n    this.kingCode = _config[\"default\"].pieces_codes.KING * this.magnitude;\n    this.inCheck = false;\n    this.inCheckMate = false;\n    this.infoText = 'Good Luck!';\n    this.gameOver = false;\n  }\n\n  _createClass(Player, [{\n    key: \"update\",\n    value: function update(cb, board, otherPlayer) {\n      this.endTurn = cb;\n      this.board = board;\n      this.opponent = otherPlayer;\n      _config[\"default\"].turnTag.innerText = \"Player \".concat(this.playerNumber, \"'s turn\");\n      _config[\"default\"].infoTag.innerText = this.infoText;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var currentTileCoords = (0, _utils.indexToCoords)(this.currentTile);\n      ctx.fillStyle = 'cornflowerblue';\n      ctx.fillRect(currentTileCoords.x, currentTileCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n\n      if (this.heldPiece) {\n        ctx.fillStyle = 'rgba(80, 100, 230, 0.3)';\n        this.heldPiece.showPossibleMoves(this, this.board, ctx);\n      }\n\n      if (this.inCheck) {\n        ctx.fillStyle = 'rgba(193, 66, 66, 0.57)';\n        var kingCoords = (0, _utils.indexToCoords)(this.kingIndex);\n        ctx.fillRect(kingCoords.x, kingCoords.y, _config[\"default\"].tileWidth, _config[\"default\"].tileHeight);\n      }\n    }\n  }, {\n    key: \"selectTile\",\n    value: function selectTile(selectedTileIndex) {\n      if (this.heldPiece) {\n        if (this.heldPiece.getPossibleMoves(this, this.board).indexOf(selectedTileIndex) >= 0) {\n          var pieceOnSelectedTile = this.board[selectedTileIndex];\n\n          var _this$movePiece = this.movePiece(selectedTileIndex),\n              prevCoords = _this$movePiece.prevCoords,\n              movedPiece = _this$movePiece.movedPiece;\n\n          this.checkIfKingInCheck();\n\n          if (this.inCheck) {\n            var prevIndex = (0, _utils.coordsToIndex)(prevCoords.row, prevCoords.col);\n            this.board[prevIndex] = movedPiece;\n            this.board[selectedTileIndex] = pieceOnSelectedTile;\n            movedPiece.move(prevCoords);\n            this.infoText = \"You cannot move there, you must protect your King\";\n          } else {\n            this.endTurn();\n          }\n        } else if (this.board[selectedTileIndex] && this.ownsPiece(this.board[selectedTileIndex].code)) {\n          this.heldPiece = this.board[selectedTileIndex];\n        } else {\n          this.infoText = \"You cannot move there\";\n        }\n      } else if (this.ownsPiece(this.board[selectedTileIndex].code)) {\n        this.heldPiece = this.board[selectedTileIndex];\n      } else {\n        this.infoText = \"That is not yours\";\n      }\n    }\n  }, {\n    key: \"movePiece\",\n    value: function movePiece(selectedTileIndex) {\n      var attackedPiece = this.board[selectedTileIndex];\n\n      if (attackedPiece && Math.abs(attackedPiece.code) === _config[\"default\"].pieces_codes.KING) {\n        this.messager.post({\n          type: _config[\"default\"].messageTypes.gameOver\n        });\n      }\n\n      this.board[(0, _utils.coordsToIndex)(this.heldPiece.row, this.heldPiece.col)] = null;\n      var prevCoords = {\n        x: this.heldPiece.x,\n        y: this.heldPiece.y,\n        col: this.heldPiece.col,\n        row: this.heldPiece.row\n      };\n      var coords = (0, _utils.indexToCoords)(selectedTileIndex);\n      coords.row = coords.y / _config[\"default\"].tileHeight;\n      coords.col = coords.x / _config[\"default\"].tileWidth;\n      this.heldPiece.move(coords);\n      this.board[selectedTileIndex] = this.heldPiece;\n      var movedPiece = this.heldPiece;\n      this.heldPiece = null;\n      return {\n        prevCoords: prevCoords,\n        movedPiece: movedPiece\n      };\n    }\n  }, {\n    key: \"checkIfKingInCheck\",\n    value: function checkIfKingInCheck() {\n      var _this = this;\n\n      var inCheck = false;\n      this.infoText = '';\n\n      for (var i = 0; i < this.board.length; i++) {\n        var piece = this.board[i];\n\n        if (piece) {\n          if (!this.ownsPiece(piece.code)) {\n            piece.getPossibleMoves(this.opponent, this.board).map(function (index) {\n              var pieceUnderAttack = _this.board[index];\n\n              if (pieceUnderAttack && pieceUnderAttack.code === _this.kingCode) {\n                inCheck = true;\n                _this.kingIndex = index;\n                _this.infoText = \"Your King is under attack!\";\n              }\n            });\n          }\n        }\n      }\n\n      this.inCheck = inCheck;\n    }\n  }, {\n    key: \"ownsPiece\",\n    value: function ownsPiece(pieceCode) {\n      if (this.playerNumber === 1) {\n        return pieceCode < 0;\n      } else if (this.playerNumber === 2) {\n        return pieceCode > 0;\n      }\n    }\n  }, {\n    key: \"handleMsg\",\n    value: function handleMsg(msg) {\n      switch (msg.type) {\n        case _config[\"default\"].messageTypes.keyDown:\n          if (!this.gameOver) {\n            switch (msg.keyCode) {\n              case this.keymap.up:\n                if (this.currentTile - 8 >= 0) {\n                  this.currentTile -= 8;\n                }\n\n                break;\n\n              case this.keymap.down:\n                if (this.currentTile + 8 <= 63) {\n                  this.currentTile += 8;\n                }\n\n                break;\n\n              case this.keymap.left:\n                if (this.currentTile % 8 === 0) {\n                  this.currentTile += 7;\n                } else {\n                  this.currentTile--;\n                }\n\n                break;\n\n              case this.keymap.right:\n                if ((this.currentTile + 1) % 8 === 0) {\n                  this.currentTile -= 7;\n                } else {\n                  this.currentTile++;\n                }\n\n                break;\n\n              case this.keymap.select:\n                this.selectTile(this.currentTile);\n                break;\n\n              default: // pass\n\n            }\n          }\n\n          break;\n\n        case _config[\"default\"].messageTypes.gameOver:\n          this.gameOver = true;\n\n        default: // pass\n\n      }\n    }\n  }]);\n\n  return Player;\n}();\n\nvar _default = Player;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "Player.js"
      ],
      "names": [
        "hm_players",
        "Player",
        "keymap",
        "messager",
        "playerNumber",
        "currentTile",
        "heldPiece",
        "magnitude",
        "kingCode",
        "config",
        "pieces_codes",
        "KING",
        "inCheck",
        "inCheckMate",
        "infoText",
        "gameOver",
        "cb",
        "board",
        "otherPlayer",
        "endTurn",
        "opponent",
        "turnTag",
        "innerText",
        "infoTag",
        "ctx",
        "currentTileCoords",
        "fillStyle",
        "fillRect",
        "x",
        "y",
        "tileWidth",
        "tileHeight",
        "showPossibleMoves",
        "kingCoords",
        "kingIndex",
        "selectedTileIndex",
        "getPossibleMoves",
        "indexOf",
        "pieceOnSelectedTile",
        "movePiece",
        "prevCoords",
        "movedPiece",
        "checkIfKingInCheck",
        "prevIndex",
        "row",
        "col",
        "move",
        "ownsPiece",
        "code",
        "attackedPiece",
        "Math",
        "abs",
        "post",
        "type",
        "messageTypes",
        "coords",
        "i",
        "length",
        "piece",
        "map",
        "index",
        "pieceUnderAttack",
        "pieceCode",
        "msg",
        "keyDown",
        "keyCode",
        "up",
        "down",
        "left",
        "right",
        "select",
        "selectTile"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/danielpeach/Dev/DIY-Arcade-Cabinet/games/arcade_chess",
      "sourcesContent": [
        "import config                           from './config'\nimport { coordsToIndex, indexToCoords } from './utils'\n\nlet hm_players = 0;\n\nclass Player {\n\n  constructor(keymap, messager) {\n    this.keymap = keymap\n    this.messager = messager\n    hm_players++\n    this.playerNumber = hm_players\n    this.currentTile = this.playerNumber === 1 ? 63 : 0\n    this.heldPiece = null\n    this.magnitude = this.playerNumber === 1 ? -1 : 1\n    this.kingCode = config.pieces_codes.KING * this.magnitude\n    this.inCheck = false\n    this.inCheckMate = false\n    this.infoText = 'Good Luck!'\n    this.gameOver = false\n  }\n\n  update(cb, board, otherPlayer) {\n    this.endTurn = cb\n    this.board = board\n    this.opponent = otherPlayer\n\n    config.turnTag.innerText = `Player ${this.playerNumber}'s turn`\n    config.infoTag.innerText = this.infoText\n  }\n\n  draw(ctx) {\n    let currentTileCoords = indexToCoords(this.currentTile)\n    ctx.fillStyle = 'cornflowerblue'\n    ctx.fillRect(currentTileCoords.x, currentTileCoords.y, config.tileWidth, config.tileHeight)\n\n    if (this.heldPiece) {\n      ctx.fillStyle = 'rgba(80, 100, 230, 0.3)'\n      this.heldPiece.showPossibleMoves(this, this.board, ctx)\n    }\n\n    if (this.inCheck) {\n      ctx.fillStyle = 'rgba(193, 66, 66, 0.57)'\n      let kingCoords = indexToCoords(this.kingIndex)\n      ctx.fillRect(kingCoords.x, kingCoords.y, config.tileWidth, config.tileHeight)\n    }\n  }\n\n  selectTile(selectedTileIndex) {\n    if (this.heldPiece) {\n      if (this.heldPiece.getPossibleMoves(this, this.board).indexOf(selectedTileIndex) >= 0) {\n        let pieceOnSelectedTile = this.board[selectedTileIndex]\n        let { prevCoords, movedPiece } = this.movePiece(selectedTileIndex)\n        this.checkIfKingInCheck()\n        if (this.inCheck) {\n          let prevIndex = coordsToIndex(prevCoords.row, prevCoords.col)\n          this.board[prevIndex] = movedPiece\n          this.board[selectedTileIndex] = pieceOnSelectedTile\n          movedPiece.move(prevCoords)\n          this.infoText = `You cannot move there, you must protect your King`\n        } else {\n          this.endTurn()\n        }\n      } else if (this.board[selectedTileIndex] && this.ownsPiece(this.board[selectedTileIndex].code)) {\n        this.heldPiece = this.board[selectedTileIndex]\n      } else {\n        this.infoText = `You cannot move there`\n      }\n    } else if (this.ownsPiece(this.board[selectedTileIndex].code)){\n      this.heldPiece = this.board[selectedTileIndex]\n    } else {\n      this.infoText = `That is not yours`\n    }\n  }\n\n  movePiece(selectedTileIndex) {\n    let attackedPiece = this.board[selectedTileIndex]\n    if (attackedPiece && Math.abs(attackedPiece.code) === config.pieces_codes.KING) {\n      this.messager.post({type: config.messageTypes.gameOver})\n    }\n    this.board[coordsToIndex(this.heldPiece.row, this.heldPiece.col)] = null\n    let prevCoords = { x: this.heldPiece.x, y: this.heldPiece.y, col: this.heldPiece.col, row: this.heldPiece.row }\n    let coords = indexToCoords(selectedTileIndex)\n    coords.row = coords.y / config.tileHeight\n    coords.col = coords.x / config.tileWidth\n    this.heldPiece.move(coords)\n    this.board[selectedTileIndex] = this.heldPiece\n    let movedPiece = this.heldPiece\n    this.heldPiece = null\n    return { prevCoords, movedPiece }\n  }\n\n  checkIfKingInCheck() {\n    let inCheck = false\n    this.infoText = ''\n    for(let i=0;i<this.board.length;i++) {\n      let piece = this.board[i]\n      if (piece) {\n        if (!this.ownsPiece(piece.code)) {\n          piece.getPossibleMoves(this.opponent, this.board).map(index => {\n            let pieceUnderAttack = this.board[index]\n            if (pieceUnderAttack && pieceUnderAttack.code === this.kingCode) {\n              inCheck = true\n              this.kingIndex = index\n              this.infoText = `Your King is under attack!`\n            }\n          })\n        }\n      }\n    }\n    this.inCheck = inCheck\n  }\n\n  ownsPiece(pieceCode) {\n    if (this.playerNumber === 1) {\n      return pieceCode < 0\n    } else if (this.playerNumber === 2) {\n      return pieceCode > 0\n    }\n  }\n\n  handleMsg(msg) {\n    switch(msg.type) {\n      case config.messageTypes.keyDown:\n        if (!this.gameOver) {\n          switch (msg.keyCode) {\n            case this.keymap.up:\n              if(this.currentTile - 8 >= 0) {\n                this.currentTile -= 8\n              }\n              break\n            case this.keymap.down:\n              if(this.currentTile + 8 <= 63) {\n                this.currentTile += 8\n              }\n              break\n            case this.keymap.left:\n              if (this.currentTile % 8 === 0) {\n                this.currentTile += 7\n              } else {\n                this.currentTile--\n              }\n              break\n            case this.keymap.right:\n              if((this.currentTile + 1) % 8 === 0) {\n                this.currentTile -= 7\n              } else {\n                this.currentTile++\n              }\n              break\n            case this.keymap.select:\n              this.selectTile(this.currentTile)\n              break\n            default:\n              // pass\n          }\n        }\n        break\n      case config.messageTypes.gameOver:\n        this.gameOver = true\n      default:\n        // pass\n    }\n  }\n}\n\nexport default Player"
      ]
    },
    "sourceType": "script",
    "mtime": 1567612604590
  }
}